
429_lcd-motor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .ccmram       00002398  10000000  10000000  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .ccmidata     00000000  10002398  10002398  00032398  2**0
                  CONTENTS
  3 .text         0000a79c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       00000a40  0800a950  0800a950  0001a950  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM.extab    00000000  0800b390  0800b390  00032398  2**0
                  CONTENTS
  6 .ARM          00000008  0800b390  0800b390  0001b390  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .preinit_array 00000000  0800b398  0800b398  00032398  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  8 .init_array   00000004  0800b398  0800b398  0001b398  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .fini_array   00000004  0800b39c  0800b39c  0001b39c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .data         000001e4  20000000  0800b3a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000884  200001e4  0800b584  000201e4  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20000a68  0800b584  00020a68  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  00032398  2**0
                  CONTENTS, READONLY
 14 .debug_info   0002cee2  00000000  00000000  000323c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev 000048dc  00000000  00000000  0005f2aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    00028176  00000000  00000000  00063b86  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_aranges 000011a8  00000000  00000000  0008bd00  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_ranges 000055c0  00000000  00000000  0008cea8  2**3
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_macro  00005884  00000000  00000000  00092468  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_line   000163d0  00000000  00000000  00097cec  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_str    000e4ae8  00000000  00000000  000ae0bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .comment      0000007b  00000000  00000000  00192ba4  2**0
                  CONTENTS, READONLY
 23 .debug_frame  00004ca4  00000000  00000000  00192c20  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800a934 	.word	0x0800a934

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001e8 	.word	0x200001e8
 80001ec:	0800a934 	.word	0x0800a934

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003de:	f1a4 0401 	sub.w	r4, r4, #1
 80003e2:	d1e9      	bne.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_uldivmod>:
 8000bc8:	b953      	cbnz	r3, 8000be0 <__aeabi_uldivmod+0x18>
 8000bca:	b94a      	cbnz	r2, 8000be0 <__aeabi_uldivmod+0x18>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bf08      	it	eq
 8000bd0:	2800      	cmpeq	r0, #0
 8000bd2:	bf1c      	itt	ne
 8000bd4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bd8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bdc:	f000 b972 	b.w	8000ec4 <__aeabi_idiv0>
 8000be0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be8:	f000 f806 	bl	8000bf8 <__udivmoddi4>
 8000bec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf4:	b004      	add	sp, #16
 8000bf6:	4770      	bx	lr

08000bf8 <__udivmoddi4>:
 8000bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bfc:	9e08      	ldr	r6, [sp, #32]
 8000bfe:	4604      	mov	r4, r0
 8000c00:	4688      	mov	r8, r1
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d14b      	bne.n	8000c9e <__udivmoddi4+0xa6>
 8000c06:	428a      	cmp	r2, r1
 8000c08:	4615      	mov	r5, r2
 8000c0a:	d967      	bls.n	8000cdc <__udivmoddi4+0xe4>
 8000c0c:	fab2 f282 	clz	r2, r2
 8000c10:	b14a      	cbz	r2, 8000c26 <__udivmoddi4+0x2e>
 8000c12:	f1c2 0720 	rsb	r7, r2, #32
 8000c16:	fa01 f302 	lsl.w	r3, r1, r2
 8000c1a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c1e:	4095      	lsls	r5, r2
 8000c20:	ea47 0803 	orr.w	r8, r7, r3
 8000c24:	4094      	lsls	r4, r2
 8000c26:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c2a:	0c23      	lsrs	r3, r4, #16
 8000c2c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c30:	fa1f fc85 	uxth.w	ip, r5
 8000c34:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c38:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c3c:	fb07 f10c 	mul.w	r1, r7, ip
 8000c40:	4299      	cmp	r1, r3
 8000c42:	d909      	bls.n	8000c58 <__udivmoddi4+0x60>
 8000c44:	18eb      	adds	r3, r5, r3
 8000c46:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000c4a:	f080 811b 	bcs.w	8000e84 <__udivmoddi4+0x28c>
 8000c4e:	4299      	cmp	r1, r3
 8000c50:	f240 8118 	bls.w	8000e84 <__udivmoddi4+0x28c>
 8000c54:	3f02      	subs	r7, #2
 8000c56:	442b      	add	r3, r5
 8000c58:	1a5b      	subs	r3, r3, r1
 8000c5a:	b2a4      	uxth	r4, r4
 8000c5c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c60:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c64:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c68:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c6c:	45a4      	cmp	ip, r4
 8000c6e:	d909      	bls.n	8000c84 <__udivmoddi4+0x8c>
 8000c70:	192c      	adds	r4, r5, r4
 8000c72:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c76:	f080 8107 	bcs.w	8000e88 <__udivmoddi4+0x290>
 8000c7a:	45a4      	cmp	ip, r4
 8000c7c:	f240 8104 	bls.w	8000e88 <__udivmoddi4+0x290>
 8000c80:	3802      	subs	r0, #2
 8000c82:	442c      	add	r4, r5
 8000c84:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c88:	eba4 040c 	sub.w	r4, r4, ip
 8000c8c:	2700      	movs	r7, #0
 8000c8e:	b11e      	cbz	r6, 8000c98 <__udivmoddi4+0xa0>
 8000c90:	40d4      	lsrs	r4, r2
 8000c92:	2300      	movs	r3, #0
 8000c94:	e9c6 4300 	strd	r4, r3, [r6]
 8000c98:	4639      	mov	r1, r7
 8000c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9e:	428b      	cmp	r3, r1
 8000ca0:	d909      	bls.n	8000cb6 <__udivmoddi4+0xbe>
 8000ca2:	2e00      	cmp	r6, #0
 8000ca4:	f000 80eb 	beq.w	8000e7e <__udivmoddi4+0x286>
 8000ca8:	2700      	movs	r7, #0
 8000caa:	e9c6 0100 	strd	r0, r1, [r6]
 8000cae:	4638      	mov	r0, r7
 8000cb0:	4639      	mov	r1, r7
 8000cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb6:	fab3 f783 	clz	r7, r3
 8000cba:	2f00      	cmp	r7, #0
 8000cbc:	d147      	bne.n	8000d4e <__udivmoddi4+0x156>
 8000cbe:	428b      	cmp	r3, r1
 8000cc0:	d302      	bcc.n	8000cc8 <__udivmoddi4+0xd0>
 8000cc2:	4282      	cmp	r2, r0
 8000cc4:	f200 80fa 	bhi.w	8000ebc <__udivmoddi4+0x2c4>
 8000cc8:	1a84      	subs	r4, r0, r2
 8000cca:	eb61 0303 	sbc.w	r3, r1, r3
 8000cce:	2001      	movs	r0, #1
 8000cd0:	4698      	mov	r8, r3
 8000cd2:	2e00      	cmp	r6, #0
 8000cd4:	d0e0      	beq.n	8000c98 <__udivmoddi4+0xa0>
 8000cd6:	e9c6 4800 	strd	r4, r8, [r6]
 8000cda:	e7dd      	b.n	8000c98 <__udivmoddi4+0xa0>
 8000cdc:	b902      	cbnz	r2, 8000ce0 <__udivmoddi4+0xe8>
 8000cde:	deff      	udf	#255	; 0xff
 8000ce0:	fab2 f282 	clz	r2, r2
 8000ce4:	2a00      	cmp	r2, #0
 8000ce6:	f040 808f 	bne.w	8000e08 <__udivmoddi4+0x210>
 8000cea:	1b49      	subs	r1, r1, r5
 8000cec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cf0:	fa1f f885 	uxth.w	r8, r5
 8000cf4:	2701      	movs	r7, #1
 8000cf6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000cfa:	0c23      	lsrs	r3, r4, #16
 8000cfc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d00:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d04:	fb08 f10c 	mul.w	r1, r8, ip
 8000d08:	4299      	cmp	r1, r3
 8000d0a:	d907      	bls.n	8000d1c <__udivmoddi4+0x124>
 8000d0c:	18eb      	adds	r3, r5, r3
 8000d0e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000d12:	d202      	bcs.n	8000d1a <__udivmoddi4+0x122>
 8000d14:	4299      	cmp	r1, r3
 8000d16:	f200 80cd 	bhi.w	8000eb4 <__udivmoddi4+0x2bc>
 8000d1a:	4684      	mov	ip, r0
 8000d1c:	1a59      	subs	r1, r3, r1
 8000d1e:	b2a3      	uxth	r3, r4
 8000d20:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d24:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d28:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d2c:	fb08 f800 	mul.w	r8, r8, r0
 8000d30:	45a0      	cmp	r8, r4
 8000d32:	d907      	bls.n	8000d44 <__udivmoddi4+0x14c>
 8000d34:	192c      	adds	r4, r5, r4
 8000d36:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x14a>
 8000d3c:	45a0      	cmp	r8, r4
 8000d3e:	f200 80b6 	bhi.w	8000eae <__udivmoddi4+0x2b6>
 8000d42:	4618      	mov	r0, r3
 8000d44:	eba4 0408 	sub.w	r4, r4, r8
 8000d48:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d4c:	e79f      	b.n	8000c8e <__udivmoddi4+0x96>
 8000d4e:	f1c7 0c20 	rsb	ip, r7, #32
 8000d52:	40bb      	lsls	r3, r7
 8000d54:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d58:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d5c:	fa01 f407 	lsl.w	r4, r1, r7
 8000d60:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d64:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d68:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d6c:	4325      	orrs	r5, r4
 8000d6e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d72:	0c2c      	lsrs	r4, r5, #16
 8000d74:	fb08 3319 	mls	r3, r8, r9, r3
 8000d78:	fa1f fa8e 	uxth.w	sl, lr
 8000d7c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d80:	fb09 f40a 	mul.w	r4, r9, sl
 8000d84:	429c      	cmp	r4, r3
 8000d86:	fa02 f207 	lsl.w	r2, r2, r7
 8000d8a:	fa00 f107 	lsl.w	r1, r0, r7
 8000d8e:	d90b      	bls.n	8000da8 <__udivmoddi4+0x1b0>
 8000d90:	eb1e 0303 	adds.w	r3, lr, r3
 8000d94:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000d98:	f080 8087 	bcs.w	8000eaa <__udivmoddi4+0x2b2>
 8000d9c:	429c      	cmp	r4, r3
 8000d9e:	f240 8084 	bls.w	8000eaa <__udivmoddi4+0x2b2>
 8000da2:	f1a9 0902 	sub.w	r9, r9, #2
 8000da6:	4473      	add	r3, lr
 8000da8:	1b1b      	subs	r3, r3, r4
 8000daa:	b2ad      	uxth	r5, r5
 8000dac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000db0:	fb08 3310 	mls	r3, r8, r0, r3
 8000db4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000db8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000dbc:	45a2      	cmp	sl, r4
 8000dbe:	d908      	bls.n	8000dd2 <__udivmoddi4+0x1da>
 8000dc0:	eb1e 0404 	adds.w	r4, lr, r4
 8000dc4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000dc8:	d26b      	bcs.n	8000ea2 <__udivmoddi4+0x2aa>
 8000dca:	45a2      	cmp	sl, r4
 8000dcc:	d969      	bls.n	8000ea2 <__udivmoddi4+0x2aa>
 8000dce:	3802      	subs	r0, #2
 8000dd0:	4474      	add	r4, lr
 8000dd2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dd6:	fba0 8902 	umull	r8, r9, r0, r2
 8000dda:	eba4 040a 	sub.w	r4, r4, sl
 8000dde:	454c      	cmp	r4, r9
 8000de0:	46c2      	mov	sl, r8
 8000de2:	464b      	mov	r3, r9
 8000de4:	d354      	bcc.n	8000e90 <__udivmoddi4+0x298>
 8000de6:	d051      	beq.n	8000e8c <__udivmoddi4+0x294>
 8000de8:	2e00      	cmp	r6, #0
 8000dea:	d069      	beq.n	8000ec0 <__udivmoddi4+0x2c8>
 8000dec:	ebb1 050a 	subs.w	r5, r1, sl
 8000df0:	eb64 0403 	sbc.w	r4, r4, r3
 8000df4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000df8:	40fd      	lsrs	r5, r7
 8000dfa:	40fc      	lsrs	r4, r7
 8000dfc:	ea4c 0505 	orr.w	r5, ip, r5
 8000e00:	e9c6 5400 	strd	r5, r4, [r6]
 8000e04:	2700      	movs	r7, #0
 8000e06:	e747      	b.n	8000c98 <__udivmoddi4+0xa0>
 8000e08:	f1c2 0320 	rsb	r3, r2, #32
 8000e0c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e10:	4095      	lsls	r5, r2
 8000e12:	fa01 f002 	lsl.w	r0, r1, r2
 8000e16:	fa21 f303 	lsr.w	r3, r1, r3
 8000e1a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e1e:	4338      	orrs	r0, r7
 8000e20:	0c01      	lsrs	r1, r0, #16
 8000e22:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e26:	fa1f f885 	uxth.w	r8, r5
 8000e2a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e2e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e32:	fb07 f308 	mul.w	r3, r7, r8
 8000e36:	428b      	cmp	r3, r1
 8000e38:	fa04 f402 	lsl.w	r4, r4, r2
 8000e3c:	d907      	bls.n	8000e4e <__udivmoddi4+0x256>
 8000e3e:	1869      	adds	r1, r5, r1
 8000e40:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000e44:	d22f      	bcs.n	8000ea6 <__udivmoddi4+0x2ae>
 8000e46:	428b      	cmp	r3, r1
 8000e48:	d92d      	bls.n	8000ea6 <__udivmoddi4+0x2ae>
 8000e4a:	3f02      	subs	r7, #2
 8000e4c:	4429      	add	r1, r5
 8000e4e:	1acb      	subs	r3, r1, r3
 8000e50:	b281      	uxth	r1, r0
 8000e52:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e56:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e5a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e5e:	fb00 f308 	mul.w	r3, r0, r8
 8000e62:	428b      	cmp	r3, r1
 8000e64:	d907      	bls.n	8000e76 <__udivmoddi4+0x27e>
 8000e66:	1869      	adds	r1, r5, r1
 8000e68:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000e6c:	d217      	bcs.n	8000e9e <__udivmoddi4+0x2a6>
 8000e6e:	428b      	cmp	r3, r1
 8000e70:	d915      	bls.n	8000e9e <__udivmoddi4+0x2a6>
 8000e72:	3802      	subs	r0, #2
 8000e74:	4429      	add	r1, r5
 8000e76:	1ac9      	subs	r1, r1, r3
 8000e78:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e7c:	e73b      	b.n	8000cf6 <__udivmoddi4+0xfe>
 8000e7e:	4637      	mov	r7, r6
 8000e80:	4630      	mov	r0, r6
 8000e82:	e709      	b.n	8000c98 <__udivmoddi4+0xa0>
 8000e84:	4607      	mov	r7, r0
 8000e86:	e6e7      	b.n	8000c58 <__udivmoddi4+0x60>
 8000e88:	4618      	mov	r0, r3
 8000e8a:	e6fb      	b.n	8000c84 <__udivmoddi4+0x8c>
 8000e8c:	4541      	cmp	r1, r8
 8000e8e:	d2ab      	bcs.n	8000de8 <__udivmoddi4+0x1f0>
 8000e90:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e94:	eb69 020e 	sbc.w	r2, r9, lr
 8000e98:	3801      	subs	r0, #1
 8000e9a:	4613      	mov	r3, r2
 8000e9c:	e7a4      	b.n	8000de8 <__udivmoddi4+0x1f0>
 8000e9e:	4660      	mov	r0, ip
 8000ea0:	e7e9      	b.n	8000e76 <__udivmoddi4+0x27e>
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	e795      	b.n	8000dd2 <__udivmoddi4+0x1da>
 8000ea6:	4667      	mov	r7, ip
 8000ea8:	e7d1      	b.n	8000e4e <__udivmoddi4+0x256>
 8000eaa:	4681      	mov	r9, r0
 8000eac:	e77c      	b.n	8000da8 <__udivmoddi4+0x1b0>
 8000eae:	3802      	subs	r0, #2
 8000eb0:	442c      	add	r4, r5
 8000eb2:	e747      	b.n	8000d44 <__udivmoddi4+0x14c>
 8000eb4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000eb8:	442b      	add	r3, r5
 8000eba:	e72f      	b.n	8000d1c <__udivmoddi4+0x124>
 8000ebc:	4638      	mov	r0, r7
 8000ebe:	e708      	b.n	8000cd2 <__udivmoddi4+0xda>
 8000ec0:	4637      	mov	r7, r6
 8000ec2:	e6e9      	b.n	8000c98 <__udivmoddi4+0xa0>

08000ec4 <__aeabi_idiv0>:
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop

08000ec8 <LCD_init>:
	  HAL_SPI_Transmit(hspi, &command, 1, 100);//send command
	  while(HAL_SPI_GetState(hspi) != HAL_SPI_STATE_READY);
	  HAL_GPIO_WritePin(GPIOE, CE_Pin, GPIO_PIN_SET);
}

void LCD_init(SPI_HandleTypeDef *hspi){
 8000ec8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000eca:	4604      	mov	r4, r0
	  HAL_GPIO_WritePin(GPIOE, RST_Pin, GPIO_PIN_SET);
 8000ecc:	481c      	ldr	r0, [pc, #112]	; (8000f40 <LCD_init+0x78>)
void LCD_init(SPI_HandleTypeDef *hspi){
 8000ece:	b083      	sub	sp, #12
	  HAL_GPIO_WritePin(GPIOE, DC_Pin, GPIO_PIN_RESET);//command mode
 8000ed0:	4606      	mov	r6, r0
	  HAL_GPIO_WritePin(GPIOE, RST_Pin, GPIO_PIN_SET);
 8000ed2:	2201      	movs	r2, #1
 8000ed4:	2108      	movs	r1, #8
 8000ed6:	f001 f969 	bl	80021ac <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOE, RST_Pin, GPIO_PIN_RESET);//reset lcd driver
 8000eda:	2200      	movs	r2, #0
 8000edc:	2108      	movs	r1, #8
 8000ede:	4630      	mov	r0, r6
 8000ee0:	f001 f964 	bl	80021ac <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOE, RST_Pin, GPIO_PIN_SET);
 8000ee4:	2108      	movs	r1, #8

	  uint8_t init[] ={0x21, 0xD0, 0b00100000, 0b00001100};//bytelar dikey yaziliyor
 8000ee6:	eb0d 0501 	add.w	r5, sp, r1
	  HAL_GPIO_WritePin(GPIOE, RST_Pin, GPIO_PIN_SET);
 8000eea:	2201      	movs	r2, #1
 8000eec:	4630      	mov	r0, r6
 8000eee:	f001 f95d 	bl	80021ac <HAL_GPIO_WritePin>
	  uint8_t init[] ={0x21, 0xD0, 0b00100000, 0b00001100};//bytelar dikey yaziliyor
 8000ef2:	4b14      	ldr	r3, [pc, #80]	; (8000f44 <LCD_init+0x7c>)
 8000ef4:	f845 3d04 	str.w	r3, [r5, #-4]!
 8000ef8:	af02      	add	r7, sp, #8
	  //chip active, horizontal addressing, complex instruction set, contrast, basic instructions,
	  for(unsigned int i = 0; i < sizeof(init)/sizeof(uint8_t); ++i){
		  LCD_write_command(hspi, init[i]);
 8000efa:	f815 3b01 	ldrb.w	r3, [r5], #1
 8000efe:	f88d 3003 	strb.w	r3, [sp, #3]
	  HAL_GPIO_WritePin(GPIOE, DC_Pin, GPIO_PIN_RESET);//command mode
 8000f02:	2200      	movs	r2, #0
 8000f04:	2110      	movs	r1, #16
 8000f06:	4630      	mov	r0, r6
 8000f08:	f001 f950 	bl	80021ac <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOE, CE_Pin, GPIO_PIN_RESET);
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	2120      	movs	r1, #32
 8000f10:	4630      	mov	r0, r6
 8000f12:	f001 f94b 	bl	80021ac <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit(hspi, &command, 1, 100);//send command
 8000f16:	2364      	movs	r3, #100	; 0x64
 8000f18:	2201      	movs	r2, #1
 8000f1a:	f10d 0103 	add.w	r1, sp, #3
 8000f1e:	4620      	mov	r0, r4
 8000f20:	f002 fa3e 	bl	80033a0 <HAL_SPI_Transmit>
	  while(HAL_SPI_GetState(hspi) != HAL_SPI_STATE_READY);
 8000f24:	4620      	mov	r0, r4
 8000f26:	f002 fc31 	bl	800378c <HAL_SPI_GetState>
 8000f2a:	2801      	cmp	r0, #1
 8000f2c:	d1fa      	bne.n	8000f24 <LCD_init+0x5c>
	  HAL_GPIO_WritePin(GPIOE, CE_Pin, GPIO_PIN_SET);
 8000f2e:	4602      	mov	r2, r0
 8000f30:	2120      	movs	r1, #32
 8000f32:	4630      	mov	r0, r6
 8000f34:	f001 f93a 	bl	80021ac <HAL_GPIO_WritePin>
	  for(unsigned int i = 0; i < sizeof(init)/sizeof(uint8_t); ++i){
 8000f38:	42bd      	cmp	r5, r7
 8000f3a:	d1de      	bne.n	8000efa <LCD_init+0x32>
	  }

}
 8000f3c:	b003      	add	sp, #12
 8000f3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f40:	40021000 	.word	0x40021000
 8000f44:	0c20d021 	.word	0x0c20d021

08000f48 <LCD_clear>:

void LCD_clear(SPI_HandleTypeDef *hspi){
 8000f48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f4a:	b083      	sub	sp, #12
	  //48hx84v 48/8=6 6*84=504, clear display
	  uint8_t clear = 0x00;
 8000f4c:	af02      	add	r7, sp, #8
 8000f4e:	2300      	movs	r3, #0
void LCD_clear(SPI_HandleTypeDef *hspi){
 8000f50:	4604      	mov	r4, r0
	  HAL_GPIO_WritePin(GPIOE, DC_Pin, GPIO_PIN_SET);//data mode
 8000f52:	2201      	movs	r2, #1
 8000f54:	2110      	movs	r1, #16
 8000f56:	4810      	ldr	r0, [pc, #64]	; (8000f98 <LCD_clear+0x50>)
	  uint8_t clear = 0x00;
 8000f58:	f807 3d01 	strb.w	r3, [r7, #-1]!
	  HAL_GPIO_WritePin(GPIOE, DC_Pin, GPIO_PIN_SET);//data mode
 8000f5c:	f001 f926 	bl	80021ac <HAL_GPIO_WritePin>

	  for(unsigned int i = 0; i < 504; ++i){
		HAL_GPIO_WritePin(GPIOE, CE_Pin, GPIO_PIN_RESET);
 8000f60:	4e0d      	ldr	r6, [pc, #52]	; (8000f98 <LCD_clear+0x50>)
	  HAL_GPIO_WritePin(GPIOE, DC_Pin, GPIO_PIN_SET);//data mode
 8000f62:	f44f 75fc 	mov.w	r5, #504	; 0x1f8
		HAL_GPIO_WritePin(GPIOE, CE_Pin, GPIO_PIN_RESET);
 8000f66:	2200      	movs	r2, #0
 8000f68:	2120      	movs	r1, #32
 8000f6a:	4630      	mov	r0, r6
 8000f6c:	f001 f91e 	bl	80021ac <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(hspi, &clear, 1, 100);//random data
 8000f70:	2364      	movs	r3, #100	; 0x64
 8000f72:	2201      	movs	r2, #1
 8000f74:	4639      	mov	r1, r7
 8000f76:	4620      	mov	r0, r4
 8000f78:	f002 fa12 	bl	80033a0 <HAL_SPI_Transmit>
		while(HAL_SPI_GetState(hspi) != HAL_SPI_STATE_READY);
 8000f7c:	4620      	mov	r0, r4
 8000f7e:	f002 fc05 	bl	800378c <HAL_SPI_GetState>
 8000f82:	2801      	cmp	r0, #1
 8000f84:	d1fa      	bne.n	8000f7c <LCD_clear+0x34>
		HAL_GPIO_WritePin(GPIOE, CE_Pin, GPIO_PIN_SET);//turn chip off after setup
 8000f86:	4602      	mov	r2, r0
 8000f88:	2120      	movs	r1, #32
 8000f8a:	4630      	mov	r0, r6
 8000f8c:	f001 f90e 	bl	80021ac <HAL_GPIO_WritePin>
	  for(unsigned int i = 0; i < 504; ++i){
 8000f90:	3d01      	subs	r5, #1
 8000f92:	d1e8      	bne.n	8000f66 <LCD_clear+0x1e>
	  }

}
 8000f94:	b003      	add	sp, #12
 8000f96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f98:	40021000 	.word	0x40021000

08000f9c <LCD_write_bitmap>:

void LCD_write_bitmap(SPI_HandleTypeDef *hspi, const uint8_t* data){
	  //LCD_write_command(hspi, 0b00100000);//make sure horizontal addressing is being used
	  	  //HAL_GPIO_WritePin(GPIOE, DC_Pin, GPIO_PIN_SET);//data mode

		  GPIOE->ODR |= DC_Pin;
 8000f9c:	4b0e      	ldr	r3, [pc, #56]	; (8000fd8 <LCD_write_bitmap+0x3c>)
		  GPIOE->ODR &= ~CE_Pin;//Ce low
		 //HAL_SPI_Transmit(hspi, data, 504, 100);//send data
		  //while(HAL_SPI_GetState(hspi) != HAL_SPI_STATE_READY);//sizeof(data)/sizeof(uint8_t)
		  for(uint16_t i = 0; i < 504; ++i){
			  hspi->Instance->DR = data[i];
 8000f9e:	6802      	ldr	r2, [r0, #0]
		  GPIOE->ODR |= DC_Pin;
 8000fa0:	6958      	ldr	r0, [r3, #20]
 8000fa2:	f040 0010 	orr.w	r0, r0, #16
 8000fa6:	6158      	str	r0, [r3, #20]
		  GPIOE->ODR &= ~CE_Pin;//Ce low
 8000fa8:	6958      	ldr	r0, [r3, #20]
 8000faa:	f020 0020 	bic.w	r0, r0, #32
 8000fae:	6158      	str	r0, [r3, #20]
 8000fb0:	1e48      	subs	r0, r1, #1
 8000fb2:	f201 11f7 	addw	r1, r1, #503	; 0x1f7
			  hspi->Instance->DR = data[i];
 8000fb6:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8000fba:	60d3      	str	r3, [r2, #12]
			  while(!(hspi->Instance->SR & SPI_SR_TXE));//wait until TXE=1
 8000fbc:	6893      	ldr	r3, [r2, #8]
 8000fbe:	079b      	lsls	r3, r3, #30
 8000fc0:	d5fc      	bpl.n	8000fbc <LCD_write_bitmap+0x20>
		  for(uint16_t i = 0; i < 504; ++i){
 8000fc2:	4288      	cmp	r0, r1
 8000fc4:	d1f7      	bne.n	8000fb6 <LCD_write_bitmap+0x1a>
		 }

		  while(hspi->Instance->SR & SPI_SR_BSY);//wait for transmission to end
 8000fc6:	6893      	ldr	r3, [r2, #8]
 8000fc8:	061b      	lsls	r3, r3, #24
 8000fca:	d4fc      	bmi.n	8000fc6 <LCD_write_bitmap+0x2a>
		  GPIOE->ODR |= CE_Pin;//Ce high
 8000fcc:	4a02      	ldr	r2, [pc, #8]	; (8000fd8 <LCD_write_bitmap+0x3c>)
 8000fce:	6953      	ldr	r3, [r2, #20]
 8000fd0:	f043 0320 	orr.w	r3, r3, #32
 8000fd4:	6153      	str	r3, [r2, #20]
}
 8000fd6:	4770      	bx	lr
 8000fd8:	40021000 	.word	0x40021000

08000fdc <LCD_write_BMP_array>:
		  }
		    f_close(&fil);//close file when done
		    LCD_write_bitmap(hspi, screendata);
}

void LCD_write_BMP_array(SPI_HandleTypeDef *hspi, const uint8_t * bmparray){
 8000fdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000fe0:	b0fe      	sub	sp, #504	; 0x1f8
	   uint8_t screendata[504] = {0};
 8000fe2:	466e      	mov	r6, sp
void LCD_write_BMP_array(SPI_HandleTypeDef *hspi, const uint8_t * bmparray){
 8000fe4:	4607      	mov	r7, r0
 8000fe6:	468a      	mov	sl, r1
	   uint8_t screendata[504] = {0};
 8000fe8:	4630      	mov	r0, r6
 8000fea:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8000fee:	2100      	movs	r1, #0
 8000ff0:	f007 f90c 	bl	800820c <memset>
	   		 	 			   }

	   		 	 			   unsigned int screenbyte = (col-1)*84+bytes*8+bit;
	   		 	 			   unsigned int bmpbyte = 96*abs(col-6) + row*12 + bytes;//index of current byte to be read from BMP
	   		 	 			   if(bmparray[bmpbyte] & (1<<abs(bit-7))){//check bit, set pixel if 1, bit 0 is msb
	   		 	 				 screendata[screenbyte] |= 1<<(7-row);
 8000ff4:	f04f 0901 	mov.w	r9, #1
 8000ff8:	f50d 7cfc 	add.w	ip, sp, #504	; 0x1f8
	   		 		   for(unsigned int bytes = 0; bytes < 12; ++bytes){//read row
 8000ffc:	46d0      	mov	r8, sl
 8000ffe:	f04f 0e07 	mov.w	lr, #7
	   		 	 				 screendata[screenbyte] |= 1<<(7-row);
 8001002:	fa09 f10e 	lsl.w	r1, r9, lr
 8001006:	b249      	sxtb	r1, r1
 8001008:	4663      	mov	r3, ip
 800100a:	4644      	mov	r4, r8
	   		 		   for(unsigned int bytes = 0; bytes < 12; ++bytes){//read row
 800100c:	2000      	movs	r0, #0
 800100e:	e01d      	b.n	800104c <LCD_write_BMP_array+0x70>
	   		 	 			   if(bmparray[bmpbyte] & (1<<abs(bit-7))){//check bit, set pixel if 1, bit 0 is msb
 8001010:	0710      	lsls	r0, r2, #28
 8001012:	d504      	bpl.n	800101e <LCD_write_BMP_array+0x42>
	   		 	 				 screendata[screenbyte] |= 1<<(7-row);
 8001014:	f813 0c50 	ldrb.w	r0, [r3, #-80]
 8001018:	4308      	orrs	r0, r1
 800101a:	f803 0c50 	strb.w	r0, [r3, #-80]
	   		 	 			   if(bmparray[bmpbyte] & (1<<abs(bit-7))){//check bit, set pixel if 1, bit 0 is msb
 800101e:	0750      	lsls	r0, r2, #29
 8001020:	d504      	bpl.n	800102c <LCD_write_BMP_array+0x50>
	   		 	 				 screendata[screenbyte] |= 1<<(7-row);
 8001022:	f813 0c4f 	ldrb.w	r0, [r3, #-79]
 8001026:	4308      	orrs	r0, r1
 8001028:	f803 0c4f 	strb.w	r0, [r3, #-79]
	   		 	 			   if(bmparray[bmpbyte] & (1<<abs(bit-7))){//check bit, set pixel if 1, bit 0 is msb
 800102c:	0790      	lsls	r0, r2, #30
 800102e:	d504      	bpl.n	800103a <LCD_write_BMP_array+0x5e>
	   		 	 				 screendata[screenbyte] |= 1<<(7-row);
 8001030:	f813 0c4e 	ldrb.w	r0, [r3, #-78]
 8001034:	4308      	orrs	r0, r1
 8001036:	f803 0c4e 	strb.w	r0, [r3, #-78]
	   		 	 			   if(bmparray[bmpbyte] & (1<<abs(bit-7))){//check bit, set pixel if 1, bit 0 is msb
 800103a:	07d2      	lsls	r2, r2, #31
 800103c:	d504      	bpl.n	8001048 <LCD_write_BMP_array+0x6c>
	   		 	 				 screendata[screenbyte] |= 1<<(7-row);
 800103e:	f813 2c4d 	ldrb.w	r2, [r3, #-77]
 8001042:	430a      	orrs	r2, r1
 8001044:	f803 2c4d 	strb.w	r2, [r3, #-77]
 8001048:	3308      	adds	r3, #8
 800104a:	4628      	mov	r0, r5
	   		 	 			   if(bmparray[bmpbyte] & (1<<abs(bit-7))){//check bit, set pixel if 1, bit 0 is msb
 800104c:	f814 2b01 	ldrb.w	r2, [r4], #1
 8001050:	09d5      	lsrs	r5, r2, #7
 8001052:	d004      	beq.n	800105e <LCD_write_BMP_array+0x82>
	   		 	 				 screendata[screenbyte] |= 1<<(7-row);
 8001054:	f813 5c54 	ldrb.w	r5, [r3, #-84]
 8001058:	430d      	orrs	r5, r1
 800105a:	f803 5c54 	strb.w	r5, [r3, #-84]
	   		 	 			   if(bmparray[bmpbyte] & (1<<abs(bit-7))){//check bit, set pixel if 1, bit 0 is msb
 800105e:	0655      	lsls	r5, r2, #25
 8001060:	d504      	bpl.n	800106c <LCD_write_BMP_array+0x90>
	   		 	 				 screendata[screenbyte] |= 1<<(7-row);
 8001062:	f813 5c53 	ldrb.w	r5, [r3, #-83]
 8001066:	430d      	orrs	r5, r1
 8001068:	f803 5c53 	strb.w	r5, [r3, #-83]
	   		 	 			   if(bmparray[bmpbyte] & (1<<abs(bit-7))){//check bit, set pixel if 1, bit 0 is msb
 800106c:	0695      	lsls	r5, r2, #26
 800106e:	d504      	bpl.n	800107a <LCD_write_BMP_array+0x9e>
	   		 	 				 screendata[screenbyte] |= 1<<(7-row);
 8001070:	f813 5c52 	ldrb.w	r5, [r3, #-82]
 8001074:	430d      	orrs	r5, r1
 8001076:	f803 5c52 	strb.w	r5, [r3, #-82]
	   		 	 			   if(bmparray[bmpbyte] & (1<<abs(bit-7))){//check bit, set pixel if 1, bit 0 is msb
 800107a:	06d5      	lsls	r5, r2, #27
 800107c:	d504      	bpl.n	8001088 <LCD_write_BMP_array+0xac>
	   		 	 				 screendata[screenbyte] |= 1<<(7-row);
 800107e:	f813 5c51 	ldrb.w	r5, [r3, #-81]
 8001082:	430d      	orrs	r5, r1
 8001084:	f803 5c51 	strb.w	r5, [r3, #-81]
	   		 	 			   if(bytes > 10 || (bytes == 10 && bit >= 4)){
 8001088:	280a      	cmp	r0, #10
 800108a:	f100 0501 	add.w	r5, r0, #1
 800108e:	d1bf      	bne.n	8001010 <LCD_write_BMP_array+0x34>
 8001090:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
	   			   for(unsigned int row = 0; row < 8; ++row){//have to read 8*12 bytes to complete a column
 8001094:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 8001098:	f108 080c 	add.w	r8, r8, #12
 800109c:	d1b1      	bne.n	8001002 <LCD_write_BMP_array+0x26>
 800109e:	f1ac 0354 	sub.w	r3, ip, #84	; 0x54
	   for(unsigned int col = 6; col > 0; --col){//iterate 6 columns
 80010a2:	429e      	cmp	r6, r3
 80010a4:	f10a 0a60 	add.w	sl, sl, #96	; 0x60
 80010a8:	d001      	beq.n	80010ae <LCD_write_BMP_array+0xd2>
 80010aa:	469c      	mov	ip, r3
 80010ac:	e7a6      	b.n	8000ffc <LCD_write_BMP_array+0x20>
		  GPIOE->ODR |= DC_Pin;
 80010ae:	4b10      	ldr	r3, [pc, #64]	; (80010f0 <LCD_write_BMP_array+0x114>)
			  hspi->Instance->DR = data[i];
 80010b0:	683a      	ldr	r2, [r7, #0]
		  GPIOE->ODR |= DC_Pin;
 80010b2:	6959      	ldr	r1, [r3, #20]
 80010b4:	f041 0110 	orr.w	r1, r1, #16
 80010b8:	6159      	str	r1, [r3, #20]
		  GPIOE->ODR &= ~CE_Pin;//Ce low
 80010ba:	6959      	ldr	r1, [r3, #20]
 80010bc:	f021 0120 	bic.w	r1, r1, #32
 80010c0:	6159      	str	r1, [r3, #20]
 80010c2:	f20c 1ca3 	addw	ip, ip, #419	; 0x1a3
 80010c6:	f10d 31ff 	add.w	r1, sp, #4294967295	; 0xffffffff
			  hspi->Instance->DR = data[i];
 80010ca:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80010ce:	60d3      	str	r3, [r2, #12]
			  while(!(hspi->Instance->SR & SPI_SR_TXE));//wait until TXE=1
 80010d0:	6893      	ldr	r3, [r2, #8]
 80010d2:	079f      	lsls	r7, r3, #30
 80010d4:	d5fc      	bpl.n	80010d0 <LCD_write_BMP_array+0xf4>
		  for(uint16_t i = 0; i < 504; ++i){
 80010d6:	4561      	cmp	r1, ip
 80010d8:	d1f7      	bne.n	80010ca <LCD_write_BMP_array+0xee>
		  while(hspi->Instance->SR & SPI_SR_BSY);//wait for transmission to end
 80010da:	6893      	ldr	r3, [r2, #8]
 80010dc:	061e      	lsls	r6, r3, #24
 80010de:	d4fc      	bmi.n	80010da <LCD_write_BMP_array+0xfe>
		  GPIOE->ODR |= CE_Pin;//Ce high
 80010e0:	4a03      	ldr	r2, [pc, #12]	; (80010f0 <LCD_write_BMP_array+0x114>)
 80010e2:	6953      	ldr	r3, [r2, #20]
 80010e4:	f043 0320 	orr.w	r3, r3, #32
 80010e8:	6153      	str	r3, [r2, #20]
	   		 		   }
	   			   }
	   		  }
	    LCD_write_bitmap(hspi, screendata);

}
 80010ea:	b07e      	add	sp, #504	; 0x1f8
 80010ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010f0:	40021000 	.word	0x40021000

080010f4 <HAL_TIM_PeriodElapsedCallback>:
//volatile uint8_t  audbuffer[1024*20] ={0};
//volatile uint16_t audiocounter = 0;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
	if(htim == &htim2){
 80010f4:	4b09      	ldr	r3, [pc, #36]	; (800111c <HAL_TIM_PeriodElapsedCallback+0x28>)
 80010f6:	4283      	cmp	r3, r0
 80010f8:	d10f      	bne.n	800111a <HAL_TIM_PeriodElapsedCallback+0x26>
		if(audiocounter >= buffersize){
 80010fa:	4b09      	ldr	r3, [pc, #36]	; (8001120 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80010fc:	4909      	ldr	r1, [pc, #36]	; (8001124 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80010fe:	681a      	ldr	r2, [r3, #0]
 8001100:	8809      	ldrh	r1, [r1, #0]
 8001102:	4291      	cmp	r1, r2
			audiocounter = 0;
 8001104:	bf9c      	itt	ls
 8001106:	2200      	movls	r2, #0
 8001108:	601a      	strls	r2, [r3, #0]
		}
		  //GPIOB->ODR ^= 1<<14;
		  DAC1->DHR8R1 = audbuffer[audiocounter];
 800110a:	681a      	ldr	r2, [r3, #0]
 800110c:	4906      	ldr	r1, [pc, #24]	; (8001128 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800110e:	441a      	add	r2, r3
 8001110:	7912      	ldrb	r2, [r2, #4]
 8001112:	610a      	str	r2, [r1, #16]
		  audiocounter++;
 8001114:	681a      	ldr	r2, [r3, #0]
 8001116:	3201      	adds	r2, #1
 8001118:	601a      	str	r2, [r3, #0]
	}
}
 800111a:	4770      	bx	lr
 800111c:	200005b0 	.word	0x200005b0
 8001120:	10000000 	.word	0x10000000
 8001124:	20000000 	.word	0x20000000
 8001128:	40007400 	.word	0x40007400

0800112c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800112c:	b530      	push	{r4, r5, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800112e:	2300      	movs	r3, #0
{
 8001130:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001132:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
 8001136:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800113a:	e9cd 3304 	strd	r3, r3, [sp, #16]
 800113e:	e9cd 3306 	strd	r3, r3, [sp, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001142:	4921      	ldr	r1, [pc, #132]	; (80011c8 <SystemClock_Config+0x9c>)
 8001144:	9301      	str	r3, [sp, #4]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001146:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001148:	9303      	str	r3, [sp, #12]
  __HAL_RCC_PWR_CLK_ENABLE();
 800114a:	6c08      	ldr	r0, [r1, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800114c:	4a1f      	ldr	r2, [pc, #124]	; (80011cc <SystemClock_Config+0xa0>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800114e:	f040 5080 	orr.w	r0, r0, #268435456	; 0x10000000
 8001152:	6408      	str	r0, [r1, #64]	; 0x40
 8001154:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001156:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
 800115a:	9101      	str	r1, [sp, #4]
 800115c:	9901      	ldr	r1, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800115e:	9302      	str	r3, [sp, #8]
 8001160:	6811      	ldr	r1, [r2, #0]
 8001162:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 8001166:	6011      	str	r1, [r2, #0]
 8001168:	6812      	ldr	r2, [r2, #0]
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800116a:	930f      	str	r3, [sp, #60]	; 0x3c
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800116c:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001170:	2001      	movs	r0, #1
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001172:	2402      	movs	r4, #2
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001174:	9202      	str	r2, [sp, #8]
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001176:	2308      	movs	r3, #8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001178:	2110      	movs	r1, #16
  RCC_OscInitStruct.PLL.PLLN = 180;
 800117a:	22b4      	movs	r2, #180	; 0xb4
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800117c:	900b      	str	r0, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 8;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800117e:	a808      	add	r0, sp, #32
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001180:	9d02      	ldr	r5, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001182:	9408      	str	r4, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001184:	940e      	str	r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001186:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001188:	910c      	str	r1, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLM = 8;
 800118a:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLQ = 8;
 800118c:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 180;
 800118e:	9211      	str	r2, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001190:	f001 f84e 	bl	8002230 <HAL_RCC_OscConfig>
 8001194:	b108      	cbz	r0, 800119a <SystemClock_Config+0x6e>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001196:	b672      	cpsid	i
 8001198:	e7fe      	b.n	8001198 <SystemClock_Config+0x6c>
  {
    Error_Handler();
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800119a:	f001 f80b 	bl	80021b4 <HAL_PWREx_EnableOverDrive>
 800119e:	4602      	mov	r2, r0
 80011a0:	b108      	cbz	r0, 80011a6 <SystemClock_Config+0x7a>
 80011a2:	b672      	cpsid	i
 80011a4:	e7fe      	b.n	80011a4 <SystemClock_Config+0x78>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011a6:	250f      	movs	r5, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 80011a8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV8;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80011ac:	a803      	add	r0, sp, #12
 80011ae:	2105      	movs	r1, #5
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011b0:	e9cd 4204 	strd	r4, r2, [sp, #16]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011b4:	9503      	str	r5, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV8;
 80011b6:	e9cd 3306 	strd	r3, r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80011ba:	f001 fa4d 	bl	8002658 <HAL_RCC_ClockConfig>
 80011be:	b108      	cbz	r0, 80011c4 <SystemClock_Config+0x98>
 80011c0:	b672      	cpsid	i
 80011c2:	e7fe      	b.n	80011c2 <SystemClock_Config+0x96>
  {
    Error_Handler();
  }
}
 80011c4:	b015      	add	sp, #84	; 0x54
 80011c6:	bd30      	pop	{r4, r5, pc}
 80011c8:	40023800 	.word	0x40023800
 80011cc:	40007000 	.word	0x40007000

080011d0 <main>:
{
 80011d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80011d4:	f2ad 6dcc 	subw	sp, sp, #1740	; 0x6cc
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d8:	2400      	movs	r4, #0
  HAL_Init();
 80011da:	f000 fd99 	bl	8001d10 <HAL_Init>
  SystemClock_Config();
 80011de:	f7ff ffa5 	bl	800112c <SystemClock_Config>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80011e2:	4bbf      	ldr	r3, [pc, #764]	; (80014e0 <main+0x310>)
 80011e4:	9405      	str	r4, [sp, #20]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e6:	f8cd 4490 	str.w	r4, [sp, #1168]	; 0x490
 80011ea:	f8cd 4494 	str.w	r4, [sp, #1172]	; 0x494
 80011ee:	f8cd 4498 	str.w	r4, [sp, #1176]	; 0x498
 80011f2:	f8cd 449c 	str.w	r4, [sp, #1180]	; 0x49c
 80011f6:	f8cd 44a0 	str.w	r4, [sp, #1184]	; 0x4a0
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80011fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOG_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, RST_Pin|CE_Pin, GPIO_PIN_SET);
 80011fc:	48b9      	ldr	r0, [pc, #740]	; (80014e4 <main+0x314>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80011fe:	f042 0210 	orr.w	r2, r2, #16
 8001202:	631a      	str	r2, [r3, #48]	; 0x30
 8001204:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001206:	f002 0210 	and.w	r2, r2, #16
 800120a:	9205      	str	r2, [sp, #20]
 800120c:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800120e:	9406      	str	r4, [sp, #24]
 8001210:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001212:	f042 0204 	orr.w	r2, r2, #4
 8001216:	631a      	str	r2, [r3, #48]	; 0x30
 8001218:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800121a:	f002 0204 	and.w	r2, r2, #4
 800121e:	9206      	str	r2, [sp, #24]
 8001220:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001222:	9407      	str	r4, [sp, #28]
 8001224:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001226:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800122a:	631a      	str	r2, [r3, #48]	; 0x30
 800122c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800122e:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8001232:	9207      	str	r2, [sp, #28]
 8001234:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001236:	9408      	str	r4, [sp, #32]
 8001238:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800123a:	f042 0201 	orr.w	r2, r2, #1
 800123e:	631a      	str	r2, [r3, #48]	; 0x30
 8001240:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001242:	f002 0201 	and.w	r2, r2, #1
 8001246:	9208      	str	r2, [sp, #32]
 8001248:	9a08      	ldr	r2, [sp, #32]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800124a:	9409      	str	r4, [sp, #36]	; 0x24
 800124c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800124e:	f042 0202 	orr.w	r2, r2, #2
 8001252:	631a      	str	r2, [r3, #48]	; 0x30
 8001254:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001256:	f002 0202 	and.w	r2, r2, #2
 800125a:	9209      	str	r2, [sp, #36]	; 0x24
 800125c:	9a09      	ldr	r2, [sp, #36]	; 0x24
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800125e:	940a      	str	r4, [sp, #40]	; 0x28
 8001260:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001262:	f042 0208 	orr.w	r2, r2, #8
 8001266:	631a      	str	r2, [r3, #48]	; 0x30
 8001268:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800126a:	f002 0208 	and.w	r2, r2, #8
 800126e:	920a      	str	r2, [sp, #40]	; 0x28
 8001270:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001272:	940b      	str	r4, [sp, #44]	; 0x2c
 8001274:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001276:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800127a:	631a      	str	r2, [r3, #48]	; 0x30
 800127c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001282:	930b      	str	r3, [sp, #44]	; 0x2c
  HAL_GPIO_WritePin(GPIOE, RST_Pin|CE_Pin, GPIO_PIN_SET);
 8001284:	2201      	movs	r2, #1
 8001286:	2128      	movs	r1, #40	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001288:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  HAL_GPIO_WritePin(GPIOE, RST_Pin|CE_Pin, GPIO_PIN_SET);
 800128a:	f000 ff8f 	bl	80021ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_RESET);
 800128e:	4622      	mov	r2, r4
 8001290:	2110      	movs	r1, #16
 8001292:	4894      	ldr	r0, [pc, #592]	; (80014e4 <main+0x314>)
 8001294:	f000 ff8a 	bl	80021ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001298:	4622      	mov	r2, r4
 800129a:	f244 0181 	movw	r1, #16513	; 0x4081
 800129e:	4892      	ldr	r0, [pc, #584]	; (80014e8 <main+0x318>)
 80012a0:	f000 ff84 	bl	80021ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 80012a4:	4622      	mov	r2, r4
 80012a6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80012aa:	4890      	ldr	r0, [pc, #576]	; (80014ec <main+0x31c>)
 80012ac:	f000 ff7e 	bl	80021ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80012b0:	4622      	mov	r2, r4
 80012b2:	2140      	movs	r1, #64	; 0x40
 80012b4:	488e      	ldr	r0, [pc, #568]	; (80014f0 <main+0x320>)
 80012b6:	f000 ff79 	bl	80021ac <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RST_Pin DC_Pin CE_Pin */
  GPIO_InitStruct.Pin = RST_Pin|DC_Pin|CE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ba:	f04f 0801 	mov.w	r8, #1
  GPIO_InitStruct.Pin = RST_Pin|DC_Pin|CE_Pin;
 80012be:	2338      	movs	r3, #56	; 0x38
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012c0:	f50d 6192 	add.w	r1, sp, #1168	; 0x490
 80012c4:	4887      	ldr	r0, [pc, #540]	; (80014e4 <main+0x314>)
  GPIO_InitStruct.Pin = RST_Pin|DC_Pin|CE_Pin;
 80012c6:	f8cd 3490 	str.w	r3, [sp, #1168]	; 0x490
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ca:	f8cd 8494 	str.w	r8, [sp, #1172]	; 0x494

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80012ce:	f44f 5a00 	mov.w	sl, #8192	; 0x2000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d2:	f8cd 4498 	str.w	r4, [sp, #1176]	; 0x498
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d6:	f8cd 449c 	str.w	r4, [sp, #1180]	; 0x49c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012da:	f000 fe45 	bl	8001f68 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012de:	4b85      	ldr	r3, [pc, #532]	; (80014f4 <main+0x324>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80012e0:	4885      	ldr	r0, [pc, #532]	; (80014f8 <main+0x328>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012e2:	f8cd 3494 	str.w	r3, [sp, #1172]	; 0x494
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80012e6:	f50d 6192 	add.w	r1, sp, #1168	; 0x490

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012ea:	2503      	movs	r5, #3
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ec:	2602      	movs	r6, #2
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80012ee:	270b      	movs	r7, #11
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f0:	f8cd 4498 	str.w	r4, [sp, #1176]	; 0x498
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80012f4:	f8cd a490 	str.w	sl, [sp, #1168]	; 0x490
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80012f8:	f000 fe36 	bl	8001f68 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80012fc:	2332      	movs	r3, #50	; 0x32
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012fe:	f50d 6192 	add.w	r1, sp, #1168	; 0x490
 8001302:	487d      	ldr	r0, [pc, #500]	; (80014f8 <main+0x328>)
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001304:	f8cd 3490 	str.w	r3, [sp, #1168]	; 0x490
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001308:	f8cd 549c 	str.w	r5, [sp, #1180]	; 0x49c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130c:	f8cd 4498 	str.w	r4, [sp, #1176]	; 0x498
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001310:	f8cd 6494 	str.w	r6, [sp, #1172]	; 0x494
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001314:	f8cd 74a0 	str.w	r7, [sp, #1184]	; 0x4a0
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001318:	f000 fe26 	bl	8001f68 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin;
 800131c:	2306      	movs	r3, #6
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800131e:	f50d 6192 	add.w	r1, sp, #1168	; 0x490
 8001322:	4876      	ldr	r0, [pc, #472]	; (80014fc <main+0x32c>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001324:	f8cd 549c 	str.w	r5, [sp, #1180]	; 0x49c

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001328:	f04f 0980 	mov.w	r9, #128	; 0x80
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin;
 800132c:	f8cd 3490 	str.w	r3, [sp, #1168]	; 0x490
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001330:	f8cd 6494 	str.w	r6, [sp, #1172]	; 0x494
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001334:	f8cd 4498 	str.w	r4, [sp, #1176]	; 0x498
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001338:	f8cd 74a0 	str.w	r7, [sp, #1184]	; 0x4a0
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800133c:	f000 fe14 	bl	8001f68 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001340:	2305      	movs	r3, #5
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001342:	f50d 6192 	add.w	r1, sp, #1168	; 0x490
 8001346:	486d      	ldr	r0, [pc, #436]	; (80014fc <main+0x32c>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001348:	f8cd 549c 	str.w	r5, [sp, #1180]	; 0x49c
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800134c:	f8cd 34a0 	str.w	r3, [sp, #1184]	; 0x4a0
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001350:	f8cd 9490 	str.w	r9, [sp, #1168]	; 0x490
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001354:	f8cd 6494 	str.w	r6, [sp, #1172]	; 0x494
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001358:	f8cd 4498 	str.w	r4, [sp, #1176]	; 0x498
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800135c:	f000 fe04 	bl	8001f68 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001360:	f244 0381 	movw	r3, #16513	; 0x4081
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001364:	f50d 6192 	add.w	r1, sp, #1168	; 0x490
 8001368:	485f      	ldr	r0, [pc, #380]	; (80014e8 <main+0x318>)
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800136a:	f8cd 3490 	str.w	r3, [sp, #1168]	; 0x490
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800136e:	f8cd 8494 	str.w	r8, [sp, #1172]	; 0x494
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001372:	f8cd 4498 	str.w	r4, [sp, #1176]	; 0x498
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001376:	f8cd 449c 	str.w	r4, [sp, #1180]	; 0x49c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800137a:	f000 fdf5 	bl	8001f68 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800137e:	f50d 6192 	add.w	r1, sp, #1168	; 0x490
 8001382:	4859      	ldr	r0, [pc, #356]	; (80014e8 <main+0x318>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001384:	f8cd 549c 	str.w	r5, [sp, #1180]	; 0x49c
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001388:	f8cd a490 	str.w	sl, [sp, #1168]	; 0x490
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800138c:	f8cd 6494 	str.w	r6, [sp, #1172]	; 0x494
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001390:	f8cd 4498 	str.w	r4, [sp, #1176]	; 0x498
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001394:	f8cd 74a0 	str.w	r7, [sp, #1184]	; 0x4a0
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001398:	f000 fde6 	bl	8001f68 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 800139c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 80013a0:	f50d 6192 	add.w	r1, sp, #1168	; 0x490
 80013a4:	4851      	ldr	r0, [pc, #324]	; (80014ec <main+0x31c>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013a6:	f8cd 8494 	str.w	r8, [sp, #1172]	; 0x494
  GPIO_InitStruct.Pin = SD_CS_Pin;
 80013aa:	f8cd 3490 	str.w	r3, [sp, #1168]	; 0x490
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ae:	f8cd 4498 	str.w	r4, [sp, #1176]	; 0x498
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b2:	f8cd 449c 	str.w	r4, [sp, #1180]	; 0x49c
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 80013b6:	f000 fdd7 	bl	8001f68 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80013ba:	2340      	movs	r3, #64	; 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80013bc:	f50d 6192 	add.w	r1, sp, #1168	; 0x490
 80013c0:	484b      	ldr	r0, [pc, #300]	; (80014f0 <main+0x320>)
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80013c2:	f8cd 3490 	str.w	r3, [sp, #1168]	; 0x490
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013c6:	f8cd 8494 	str.w	r8, [sp, #1172]	; 0x494
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ca:	f8cd 4498 	str.w	r4, [sp, #1176]	; 0x498
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ce:	f8cd 449c 	str.w	r4, [sp, #1180]	; 0x49c
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80013d2:	f000 fdc9 	bl	8001f68 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80013d6:	f50d 6192 	add.w	r1, sp, #1168	; 0x490
 80013da:	4845      	ldr	r0, [pc, #276]	; (80014f0 <main+0x320>)
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80013dc:	f8cd 9490 	str.w	r9, [sp, #1168]	; 0x490
  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80013e0:	f04f 080a 	mov.w	r8, #10
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013e4:	f8cd 4494 	str.w	r4, [sp, #1172]	; 0x494
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e8:	f8cd 4498 	str.w	r4, [sp, #1176]	; 0x498
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80013ec:	f000 fdbc 	bl	8001f68 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80013f0:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013f4:	f50d 6192 	add.w	r1, sp, #1168	; 0x490
 80013f8:	4840      	ldr	r0, [pc, #256]	; (80014fc <main+0x32c>)
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80013fa:	f8cd 3490 	str.w	r3, [sp, #1168]	; 0x490
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013fe:	f8cd 549c 	str.w	r5, [sp, #1180]	; 0x49c

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001402:	f44f 7900 	mov.w	r9, #512	; 0x200
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001406:	f8cd 6494 	str.w	r6, [sp, #1172]	; 0x494
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140a:	f8cd 4498 	str.w	r4, [sp, #1176]	; 0x498
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800140e:	f8cd 84a0 	str.w	r8, [sp, #1184]	; 0x4a0
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001412:	f000 fda9 	bl	8001f68 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001416:	f50d 6192 	add.w	r1, sp, #1168	; 0x490
 800141a:	4838      	ldr	r0, [pc, #224]	; (80014fc <main+0x32c>)
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800141c:	f8cd 4494 	str.w	r4, [sp, #1172]	; 0x494
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001420:	f8cd 4498 	str.w	r4, [sp, #1176]	; 0x498
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001424:	f8cd 9490 	str.w	r9, [sp, #1168]	; 0x490
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001428:	f000 fd9e 	bl	8001f68 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800142c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001430:	f50d 6192 	add.w	r1, sp, #1168	; 0x490
 8001434:	482e      	ldr	r0, [pc, #184]	; (80014f0 <main+0x320>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001436:	f8cd 549c 	str.w	r5, [sp, #1180]	; 0x49c
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800143a:	f8cd 3490 	str.w	r3, [sp, #1168]	; 0x490
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800143e:	f8cd 6494 	str.w	r6, [sp, #1172]	; 0x494
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001442:	f8cd 4498 	str.w	r4, [sp, #1176]	; 0x498
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001446:	f8cd 74a0 	str.w	r7, [sp, #1184]	; 0x4a0
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800144a:	f000 fd8d 	bl	8001f68 <HAL_GPIO_Init>
  hspi4.Instance = SPI4;
 800144e:	4b2c      	ldr	r3, [pc, #176]	; (8001500 <main+0x330>)
 8001450:	4d2c      	ldr	r5, [pc, #176]	; (8001504 <main+0x334>)
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8001452:	f8c3 9018 	str.w	r9, [r3, #24]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8001456:	f44f 7182 	mov.w	r1, #260	; 0x104
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800145a:	2208      	movs	r2, #8
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 800145c:	4618      	mov	r0, r3
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 800145e:	e9c3 4402 	strd	r4, r4, [r3, #8]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001462:	e9c3 4404 	strd	r4, r4, [r3, #16]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8001466:	e9c3 4408 	strd	r4, r4, [r3, #32]
  hspi4.Init.CRCPolynomial = 10;
 800146a:	e9c3 480a 	strd	r4, r8, [r3, #40]	; 0x28
  hspi4.Init.Mode = SPI_MODE_MASTER;
 800146e:	e9c3 5100 	strd	r5, r1, [r3]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001472:	61da      	str	r2, [r3, #28]
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8001474:	f001 ff54 	bl	8003320 <HAL_SPI_Init>
 8001478:	b108      	cbz	r0, 800147e <main+0x2ae>
 800147a:	b672      	cpsid	i
 800147c:	e7fe      	b.n	800147c <main+0x2ac>
  huart3.Instance = USART3;
 800147e:	4b22      	ldr	r3, [pc, #136]	; (8001508 <main+0x338>)
 8001480:	4c22      	ldr	r4, [pc, #136]	; (800150c <main+0x33c>)
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001482:	6098      	str	r0, [r3, #8]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001484:	e9c3 0003 	strd	r0, r0, [r3, #12]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001488:	e9c3 0006 	strd	r0, r0, [r3, #24]
  huart3.Init.BaudRate = 115200;
 800148c:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001490:	220c      	movs	r2, #12
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001492:	4618      	mov	r0, r3
  huart3.Init.BaudRate = 115200;
 8001494:	e9c3 4100 	strd	r4, r1, [r3]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001498:	615a      	str	r2, [r3, #20]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800149a:	f002 fbc3 	bl	8003c24 <HAL_UART_Init>
 800149e:	4603      	mov	r3, r0
 80014a0:	b108      	cbz	r0, 80014a6 <main+0x2d6>
 80014a2:	b672      	cpsid	i
 80014a4:	e7fe      	b.n	80014a4 <main+0x2d4>
  hdac.Instance = DAC;
 80014a6:	4c1a      	ldr	r4, [pc, #104]	; (8001510 <main+0x340>)
 80014a8:	4a1a      	ldr	r2, [pc, #104]	; (8001514 <main+0x344>)
  DAC_ChannelConfTypeDef sConfig = {0};
 80014aa:	f8cd 0490 	str.w	r0, [sp, #1168]	; 0x490
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80014ae:	4620      	mov	r0, r4
  DAC_ChannelConfTypeDef sConfig = {0};
 80014b0:	f8cd 3494 	str.w	r3, [sp, #1172]	; 0x494
  hdac.Instance = DAC;
 80014b4:	6022      	str	r2, [r4, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80014b6:	f000 fcd9 	bl	8001e6c <HAL_DAC_Init>
 80014ba:	4603      	mov	r3, r0
 80014bc:	b108      	cbz	r0, 80014c2 <main+0x2f2>
 80014be:	b672      	cpsid	i
 80014c0:	e7fe      	b.n	80014c0 <main+0x2f0>
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80014c2:	461a      	mov	r2, r3
 80014c4:	4620      	mov	r0, r4
 80014c6:	f50d 6192 	add.w	r1, sp, #1168	; 0x490
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80014ca:	f8cd 3490 	str.w	r3, [sp, #1168]	; 0x490
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80014ce:	f8cd 3494 	str.w	r3, [sp, #1172]	; 0x494
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80014d2:	f000 fd13 	bl	8001efc <HAL_DAC_ConfigChannel>
 80014d6:	4603      	mov	r3, r0
 80014d8:	b1f0      	cbz	r0, 8001518 <main+0x348>
 80014da:	b672      	cpsid	i
 80014dc:	e7fe      	b.n	80014dc <main+0x30c>
 80014de:	bf00      	nop
 80014e0:	40023800 	.word	0x40023800
 80014e4:	40021000 	.word	0x40021000
 80014e8:	40020400 	.word	0x40020400
 80014ec:	40020c00 	.word	0x40020c00
 80014f0:	40021800 	.word	0x40021800
 80014f4:	10110000 	.word	0x10110000
 80014f8:	40020800 	.word	0x40020800
 80014fc:	40020000 	.word	0x40020000
 8001500:	200004d4 	.word	0x200004d4
 8001504:	40013400 	.word	0x40013400
 8001508:	20000440 	.word	0x20000440
 800150c:	40004800 	.word	0x40004800
 8001510:	200004c0 	.word	0x200004c0
 8001514:	40007400 	.word	0x40007400
  htim2.Instance = TIM2;
 8001518:	4dae      	ldr	r5, [pc, #696]	; (80017d4 <main+0x604>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800151a:	f8cd 0490 	str.w	r0, [sp, #1168]	; 0x490
  htim2.Instance = TIM2;
 800151e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  htim2.Init.Prescaler = 19;
 8001522:	2113      	movs	r1, #19
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001524:	f8cd 0494 	str.w	r0, [sp, #1172]	; 0x494
 8001528:	f8cd 0498 	str.w	r0, [sp, #1176]	; 0x498
 800152c:	f8cd 049c 	str.w	r0, [sp, #1180]	; 0x49c
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001530:	60a8      	str	r0, [r5, #8]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001532:	6128      	str	r0, [r5, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001534:	61a8      	str	r0, [r5, #24]
  htim2.Instance = TIM2;
 8001536:	602a      	str	r2, [r5, #0]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001538:	4628      	mov	r0, r5
  htim2.Init.Period = 99;
 800153a:	2263      	movs	r2, #99	; 0x63
  htim2.Init.Prescaler = 19;
 800153c:	6069      	str	r1, [r5, #4]
  htim2.Init.Period = 99;
 800153e:	60ea      	str	r2, [r5, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001540:	9398      	str	r3, [sp, #608]	; 0x260
 8001542:	9399      	str	r3, [sp, #612]	; 0x264
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001544:	f002 f926 	bl	8003794 <HAL_TIM_Base_Init>
 8001548:	b108      	cbz	r0, 800154e <main+0x37e>
 800154a:	b672      	cpsid	i
 800154c:	e7fe      	b.n	800154c <main+0x37c>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800154e:	f44f 5680 	mov.w	r6, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001552:	f50d 6192 	add.w	r1, sp, #1168	; 0x490
 8001556:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001558:	f8cd 6490 	str.w	r6, [sp, #1168]	; 0x490
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800155c:	f002 f9c0 	bl	80038e0 <HAL_TIM_ConfigClockSource>
 8001560:	4603      	mov	r3, r0
 8001562:	b108      	cbz	r0, 8001568 <main+0x398>
 8001564:	b672      	cpsid	i
 8001566:	e7fe      	b.n	8001566 <main+0x396>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001568:	a998      	add	r1, sp, #608	; 0x260
 800156a:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800156c:	9398      	str	r3, [sp, #608]	; 0x260
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800156e:	9399      	str	r3, [sp, #612]	; 0x264
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001570:	f002 fb0e 	bl	8003b90 <HAL_TIMEx_MasterConfigSynchronization>
 8001574:	4604      	mov	r4, r0
 8001576:	b108      	cbz	r0, 800157c <main+0x3ac>
 8001578:	b672      	cpsid	i
 800157a:	e7fe      	b.n	800157a <main+0x3aa>
  __HAL_TIM_CLEAR_FLAG(&htim2, TIM_IT_UPDATE);
 800157c:	682b      	ldr	r3, [r5, #0]
  htim5.Instance = TIM5;
 800157e:	4d96      	ldr	r5, [pc, #600]	; (80017d8 <main+0x608>)
  __HAL_TIM_CLEAR_FLAG(&htim2, TIM_IT_UPDATE);
 8001580:	f06f 0201 	mvn.w	r2, #1
 8001584:	611a      	str	r2, [r3, #16]
  MX_FATFS_Init();
 8001586:	f003 f95b 	bl	8004840 <MX_FATFS_Init>
  htim5.Instance = TIM5;
 800158a:	4994      	ldr	r1, [pc, #592]	; (80017dc <main+0x60c>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800158c:	f8cd 4490 	str.w	r4, [sp, #1168]	; 0x490
  htim5.Init.Prescaler = 44;
 8001590:	222c      	movs	r2, #44	; 0x2c
  htim5.Init.Period = 4294967295;
 8001592:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001596:	4628      	mov	r0, r5
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001598:	f8cd 4494 	str.w	r4, [sp, #1172]	; 0x494
 800159c:	f8cd 4498 	str.w	r4, [sp, #1176]	; 0x498
 80015a0:	f8cd 449c 	str.w	r4, [sp, #1180]	; 0x49c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015a4:	9498      	str	r4, [sp, #608]	; 0x260
 80015a6:	9499      	str	r4, [sp, #612]	; 0x264
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015a8:	60ac      	str	r4, [r5, #8]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015aa:	612c      	str	r4, [r5, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015ac:	61ac      	str	r4, [r5, #24]
  htim5.Instance = TIM5;
 80015ae:	6029      	str	r1, [r5, #0]
  htim5.Init.Prescaler = 44;
 80015b0:	606a      	str	r2, [r5, #4]
  htim5.Init.Period = 4294967295;
 80015b2:	60eb      	str	r3, [r5, #12]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80015b4:	f002 f8ee 	bl	8003794 <HAL_TIM_Base_Init>
 80015b8:	b108      	cbz	r0, 80015be <main+0x3ee>
 80015ba:	b672      	cpsid	i
 80015bc:	e7fe      	b.n	80015bc <main+0x3ec>
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80015be:	f50d 6192 	add.w	r1, sp, #1168	; 0x490
 80015c2:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015c4:	f8cd 6490 	str.w	r6, [sp, #1168]	; 0x490
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80015c8:	f002 f98a 	bl	80038e0 <HAL_TIM_ConfigClockSource>
 80015cc:	4603      	mov	r3, r0
 80015ce:	b108      	cbz	r0, 80015d4 <main+0x404>
 80015d0:	b672      	cpsid	i
 80015d2:	e7fe      	b.n	80015d2 <main+0x402>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80015d4:	4628      	mov	r0, r5
 80015d6:	a998      	add	r1, sp, #608	; 0x260
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015d8:	9398      	str	r3, [sp, #608]	; 0x260
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015da:	9399      	str	r3, [sp, #612]	; 0x264
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80015dc:	f002 fad8 	bl	8003b90 <HAL_TIMEx_MasterConfigSynchronization>
 80015e0:	b108      	cbz	r0, 80015e6 <main+0x416>
 80015e2:	b672      	cpsid	i
 80015e4:	e7fe      	b.n	80015e4 <main+0x414>
  hsd.Instance = SDIO;
 80015e6:	4b7e      	ldr	r3, [pc, #504]	; (80017e0 <main+0x610>)
 80015e8:	4a7e      	ldr	r2, [pc, #504]	; (80017e4 <main+0x614>)
 80015ea:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80015ec:	2400      	movs	r4, #0
  HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80015ee:	4622      	mov	r2, r4
 80015f0:	4621      	mov	r1, r4
 80015f2:	201c      	movs	r0, #28
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80015f4:	e9c3 4401 	strd	r4, r4, [r3, #4]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80015f8:	e9c3 4403 	strd	r4, r4, [r3, #12]
  hsd.Init.ClockDiv = 0;
 80015fc:	e9c3 4405 	strd	r4, r4, [r3, #20]
  HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001600:	f000 fbd6 	bl	8001db0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001604:	201c      	movs	r0, #28
 8001606:	f000 fc09 	bl	8001e1c <HAL_NVIC_EnableIRQ>
  HAL_DAC_Start(&hdac, DAC1_CHANNEL_1);
 800160a:	4621      	mov	r1, r4
 800160c:	4876      	ldr	r0, [pc, #472]	; (80017e8 <main+0x618>)
 800160e:	f000 fc43 	bl	8001e98 <HAL_DAC_Start>
  HAL_TIM_Base_Start(&htim5);//use timer 5 for microseconds
 8001612:	4871      	ldr	r0, [pc, #452]	; (80017d8 <main+0x608>)
 8001614:	f002 f942 	bl	800389c <HAL_TIM_Base_Start>
  LCD_init(&hspi4);
 8001618:	4874      	ldr	r0, [pc, #464]	; (80017ec <main+0x61c>)
 800161a:	f7ff fc55 	bl	8000ec8 <LCD_init>
  LCD_clear(&hspi4);
 800161e:	4873      	ldr	r0, [pc, #460]	; (80017ec <main+0x61c>)
 8001620:	f7ff fc92 	bl	8000f48 <LCD_clear>
  LCD_write_bitmap(&hspi4, run1);
 8001624:	4972      	ldr	r1, [pc, #456]	; (80017f0 <main+0x620>)
 8001626:	4871      	ldr	r0, [pc, #452]	; (80017ec <main+0x61c>)
 8001628:	f7ff fcb8 	bl	8000f9c <LCD_write_bitmap>
   HAL_Delay(500); //a short delay is important to let the SD card settle
 800162c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001630:	f000 fb9a 	bl	8001d68 <HAL_Delay>
   printf("Starting\n\r");
 8001634:	486f      	ldr	r0, [pc, #444]	; (80017f4 <main+0x624>)
 8001636:	f007 fa4d 	bl	8008ad4 <iprintf>
   fres = f_mount(&FatFs, "", 1); //1=mount now
 800163a:	496f      	ldr	r1, [pc, #444]	; (80017f8 <main+0x628>)
 800163c:	f50d 6092 	add.w	r0, sp, #1168	; 0x490
 8001640:	2201      	movs	r2, #1
 8001642:	f006 f91b 	bl	800787c <f_mount>
   if (fres != FR_OK) {
 8001646:	4601      	mov	r1, r0
 8001648:	b118      	cbz	r0, 8001652 <main+0x482>
 	printf("f_mount error (%i)\r\n", fres);
 800164a:	486c      	ldr	r0, [pc, #432]	; (80017fc <main+0x62c>)
 800164c:	f007 fa42 	bl	8008ad4 <iprintf>
 8001650:	e7fe      	b.n	8001650 <main+0x480>
   printf("SD card mounted.\r\n");
 8001652:	486b      	ldr	r0, [pc, #428]	; (8001800 <main+0x630>)
 8001654:	f007 fab2 	bl	8008bbc <puts>
   fres = f_open(&fil, "combined.bin", FA_READ);//open video
 8001658:	496a      	ldr	r1, [pc, #424]	; (8001804 <main+0x634>)
 800165a:	a80c      	add	r0, sp, #48	; 0x30
 800165c:	2201      	movs	r2, #1
 800165e:	f006 f955 	bl	800790c <f_open>
   if (fres != FR_OK) {
 8001662:	4601      	mov	r1, r0
 8001664:	b118      	cbz	r0, 800166e <main+0x49e>
	   printf("f_open error (%i), couldn't open file\r\n", fres);
 8001666:	4868      	ldr	r0, [pc, #416]	; (8001808 <main+0x638>)
 8001668:	f007 fa34 	bl	8008ad4 <iprintf>
 800166c:	e7fe      	b.n	800166c <main+0x49c>
   printf("Opened bin file\r\n");
 800166e:	4867      	ldr	r0, [pc, #412]	; (800180c <main+0x63c>)
 8001670:	f007 faa4 	bl	8008bbc <puts>
   fresa = f_open(&fila, "unsigned.raw", FA_READ);//open audio
 8001674:	2201      	movs	r2, #1
 8001676:	4966      	ldr	r1, [pc, #408]	; (8001810 <main+0x640>)
 8001678:	a898      	add	r0, sp, #608	; 0x260
 800167a:	f006 f947 	bl	800790c <f_open>
   if (fresa != FR_OK) {
 800167e:	4607      	mov	r7, r0
 8001680:	b120      	cbz	r0, 800168c <main+0x4bc>
	   printf("f_open error (%i), couldn't open audio file\r\n", fresa);
 8001682:	4601      	mov	r1, r0
 8001684:	4863      	ldr	r0, [pc, #396]	; (8001814 <main+0x644>)
 8001686:	f007 fa25 	bl	8008ad4 <iprintf>
 800168a:	e7fe      	b.n	800168a <main+0x4ba>
   f_read(&fila, audbuffer, buffersize, &bra);//read 1000 samples initially
 800168c:	4d62      	ldr	r5, [pc, #392]	; (8001818 <main+0x648>)
 800168e:	4e63      	ldr	r6, [pc, #396]	; (800181c <main+0x64c>)
   printf("Opened audio file\r\n");
 8001690:	4863      	ldr	r0, [pc, #396]	; (8001820 <main+0x650>)
 8001692:	f8df b19c 	ldr.w	fp, [pc, #412]	; 8001830 <main+0x660>
 8001696:	f007 fa91 	bl	8008bbc <puts>
   f_read(&fila, audbuffer, buffersize, &bra);//read 1000 samples initially
 800169a:	882a      	ldrh	r2, [r5, #0]
 800169c:	ab04      	add	r3, sp, #16
 800169e:	4631      	mov	r1, r6
 80016a0:	a898      	add	r0, sp, #608	; 0x260
 80016a2:	f006 fb27 	bl	8007cf4 <f_read>
   printf("Read inital %u samples.\r\n", (unsigned int)buffersize);
 80016a6:	8829      	ldrh	r1, [r5, #0]
 80016a8:	485e      	ldr	r0, [pc, #376]	; (8001824 <main+0x654>)
 80016aa:	f007 fa13 	bl	8008ad4 <iprintf>
   HAL_TIM_Base_Start_IT(&htim2);//start timer after we have samples in the buffer
 80016ae:	4849      	ldr	r0, [pc, #292]	; (80017d4 <main+0x604>)
 80016b0:	f002 f906 	bl	80038c0 <HAL_TIM_Base_Start_IT>
   unsigned int frames = f_size(&fil)/706;//filesie / frame size
 80016b4:	f240 23c2 	movw	r3, #706	; 0x2c2
 80016b8:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   printf("%u frames \r\n", frames);
 80016ba:	485b      	ldr	r0, [pc, #364]	; (8001828 <main+0x658>)
   unsigned int frames = f_size(&fil)/706;//filesie / frame size
 80016bc:	fbb4 f4f3 	udiv	r4, r4, r3
   printf("%u frames \r\n", frames);
 80016c0:	4621      	mov	r1, r4
 80016c2:	f007 fa07 	bl	8008ad4 <iprintf>
   DAC1->DHR8R1 = 0;
 80016c6:	4b59      	ldr	r3, [pc, #356]	; (800182c <main+0x65c>)
 80016c8:	1c62      	adds	r2, r4, #1
 80016ca:	9201      	str	r2, [sp, #4]
 80016cc:	f1a6 0904 	sub.w	r9, r6, #4
 80016d0:	611f      	str	r7, [r3, #16]
	  uint32_t prev = 0;//frame time counter
 80016d2:	f04f 0800 	mov.w	r8, #0
	  unsigned int frame = 1;//frame counter
 80016d6:	2701      	movs	r7, #1
		  if(frame % 10 == 1 && flag == 0){//read more frames from file if first frame is being read or after 10 frames have been read
 80016d8:	230a      	movs	r3, #10
 80016da:	fbb7 f4f3 	udiv	r4, r7, r3
 80016de:	fb03 7414 	mls	r4, r3, r4, r7
 80016e2:	9b01      	ldr	r3, [sp, #4]
 80016e4:	429f      	cmp	r7, r3
 80016e6:	d2f4      	bcs.n	80016d2 <main+0x502>
 80016e8:	2c01      	cmp	r4, #1
 80016ea:	d10a      	bne.n	8001702 <main+0x532>
 80016ec:	e016      	b.n	800171c <main+0x54c>
		  if(audiocounter == buffersize){//second half played, update like before
 80016ee:	f8d9 2000 	ldr.w	r2, [r9]
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d05a      	beq.n	80017ac <main+0x5dc>
		  if(HAL_GetTick() - prev >= delay){//frame update routine
 80016f6:	f000 fb31 	bl	8001d5c <HAL_GetTick>
 80016fa:	eba0 0008 	sub.w	r0, r0, r8
 80016fe:	2831      	cmp	r0, #49	; 0x31
 8001700:	d860      	bhi.n	80017c4 <main+0x5f4>
		  if(audiocounter == buffersize/2){//first half played, update first half of the buffer
 8001702:	882b      	ldrh	r3, [r5, #0]
 8001704:	f8d9 1000 	ldr.w	r1, [r9]
 8001708:	085a      	lsrs	r2, r3, #1
 800170a:	428a      	cmp	r2, r1
 800170c:	d1ef      	bne.n	80016ee <main+0x51e>
		  			  f_read(&fila, audbuffer, buffersize/2, &bra);
 800170e:	ab04      	add	r3, sp, #16
 8001710:	4631      	mov	r1, r6
 8001712:	a898      	add	r0, sp, #608	; 0x260
 8001714:	f006 faee 	bl	8007cf4 <f_read>
 8001718:	882b      	ldrh	r3, [r5, #0]
 800171a:	e7e8      	b.n	80016ee <main+0x51e>
		  if(audiocounter == buffersize/2){//first half played, update first half of the buffer
 800171c:	882b      	ldrh	r3, [r5, #0]
 800171e:	f8d9 1000 	ldr.w	r1, [r9]
 8001722:	085a      	lsrs	r2, r3, #1
 8001724:	428a      	cmp	r2, r1
		  if(frame % 10 == 1 && flag == 0){//read more frames from file if first frame is being read or after 10 frames have been read
 8001726:	f04f 0a00 	mov.w	sl, #0
		  if(audiocounter == buffersize/2){//first half played, update first half of the buffer
 800172a:	d014      	beq.n	8001756 <main+0x586>
		  if(audiocounter == buffersize){//second half played, update like before
 800172c:	f8d9 2000 	ldr.w	r2, [r9]
 8001730:	4293      	cmp	r3, r2
 8001732:	d017      	beq.n	8001764 <main+0x594>
		  if(frame % 10 == 1 && flag == 0){//read more frames from file if first frame is being read or after 10 frames have been read
 8001734:	f1ba 0f00 	cmp.w	sl, #0
 8001738:	d01d      	beq.n	8001776 <main+0x5a6>
		  if(HAL_GetTick() - prev >= delay){//frame update routine
 800173a:	f000 fb0f 	bl	8001d5c <HAL_GetTick>
 800173e:	eba0 0008 	sub.w	r0, r0, r8
 8001742:	2831      	cmp	r0, #49	; 0x31
 8001744:	d824      	bhi.n	8001790 <main+0x5c0>
		  if(audiocounter == buffersize/2){//first half played, update first half of the buffer
 8001746:	882b      	ldrh	r3, [r5, #0]
 8001748:	f8d9 1000 	ldr.w	r1, [r9]
 800174c:	085a      	lsrs	r2, r3, #1
 800174e:	428a      	cmp	r2, r1
 8001750:	f04f 0a01 	mov.w	sl, #1
 8001754:	d1ea      	bne.n	800172c <main+0x55c>
		  			  f_read(&fila, audbuffer, buffersize/2, &bra);
 8001756:	ab04      	add	r3, sp, #16
 8001758:	4631      	mov	r1, r6
 800175a:	a898      	add	r0, sp, #608	; 0x260
 800175c:	f006 faca 	bl	8007cf4 <f_read>
 8001760:	882b      	ldrh	r3, [r5, #0]
 8001762:	e7e3      	b.n	800172c <main+0x55c>
		  			  f_read(&fila, &audbuffer[buffersize/2], buffersize/2, &bra);
 8001764:	085a      	lsrs	r2, r3, #1
 8001766:	18b1      	adds	r1, r6, r2
 8001768:	ab04      	add	r3, sp, #16
 800176a:	a898      	add	r0, sp, #608	; 0x260
 800176c:	f006 fac2 	bl	8007cf4 <f_read>
		  if(frame % 10 == 1 && flag == 0){//read more frames from file if first frame is being read or after 10 frames have been read
 8001770:	f1ba 0f00 	cmp.w	sl, #0
 8001774:	d1e1      	bne.n	800173a <main+0x56a>
			  f_read(&fil, &buffer, 10*706, &br);
 8001776:	ab03      	add	r3, sp, #12
 8001778:	f641 3294 	movw	r2, #7060	; 0x1b94
 800177c:	492c      	ldr	r1, [pc, #176]	; (8001830 <main+0x660>)
 800177e:	a80c      	add	r0, sp, #48	; 0x30
 8001780:	f006 fab8 	bl	8007cf4 <f_read>
		  if(HAL_GetTick() - prev >= delay){//frame update routine
 8001784:	f000 faea 	bl	8001d5c <HAL_GetTick>
 8001788:	eba0 0008 	sub.w	r0, r0, r8
 800178c:	2831      	cmp	r0, #49	; 0x31
 800178e:	d9da      	bls.n	8001746 <main+0x576>
				  LCD_write_BMP_array(&hspi4, &buffer[0x82+(706*(frame%10-1))]);
 8001790:	f240 21c2 	movw	r1, #706	; 0x2c2
 8001794:	fb01 b104 	mla	r1, r1, r4, fp
 8001798:	f5a1 7110 	sub.w	r1, r1, #576	; 0x240
 800179c:	4813      	ldr	r0, [pc, #76]	; (80017ec <main+0x61c>)
 800179e:	f7ff fc1d 	bl	8000fdc <LCD_write_BMP_array>
			  prev = HAL_GetTick();
 80017a2:	f000 fadb 	bl	8001d5c <HAL_GetTick>
			  ++frame;
 80017a6:	3701      	adds	r7, #1
			  prev = HAL_GetTick();
 80017a8:	4680      	mov	r8, r0
 80017aa:	e795      	b.n	80016d8 <main+0x508>
		  			  f_read(&fila, &audbuffer[buffersize/2], buffersize/2, &bra);
 80017ac:	085a      	lsrs	r2, r3, #1
 80017ae:	18b1      	adds	r1, r6, r2
 80017b0:	ab04      	add	r3, sp, #16
 80017b2:	a898      	add	r0, sp, #608	; 0x260
 80017b4:	f006 fa9e 	bl	8007cf4 <f_read>
		  if(HAL_GetTick() - prev >= delay){//frame update routine
 80017b8:	f000 fad0 	bl	8001d5c <HAL_GetTick>
 80017bc:	eba0 0008 	sub.w	r0, r0, r8
 80017c0:	2831      	cmp	r0, #49	; 0x31
 80017c2:	d99e      	bls.n	8001702 <main+0x532>
			  if(frame%10 == 0){//10th frame
 80017c4:	2c00      	cmp	r4, #0
 80017c6:	d1e3      	bne.n	8001790 <main+0x5c0>
				  LCD_write_BMP_array(&hspi4, &buffer[0x82+(706*9)]);
 80017c8:	491a      	ldr	r1, [pc, #104]	; (8001834 <main+0x664>)
 80017ca:	4808      	ldr	r0, [pc, #32]	; (80017ec <main+0x61c>)
 80017cc:	f7ff fc06 	bl	8000fdc <LCD_write_BMP_array>
 80017d0:	e7e7      	b.n	80017a2 <main+0x5d2>
 80017d2:	bf00      	nop
 80017d4:	200005b0 	.word	0x200005b0
 80017d8:	20000480 	.word	0x20000480
 80017dc:	40000c00 	.word	0x40000c00
 80017e0:	2000052c 	.word	0x2000052c
 80017e4:	40012c00 	.word	0x40012c00
 80017e8:	200004c0 	.word	0x200004c0
 80017ec:	200004d4 	.word	0x200004d4
 80017f0:	0800aa54 	.word	0x0800aa54
 80017f4:	0800a950 	.word	0x0800a950
 80017f8:	0800aa50 	.word	0x0800aa50
 80017fc:	0800a95c 	.word	0x0800a95c
 8001800:	0800a974 	.word	0x0800a974
 8001804:	0800a988 	.word	0x0800a988
 8001808:	0800a998 	.word	0x0800a998
 800180c:	0800a9c0 	.word	0x0800a9c0
 8001810:	0800a9d4 	.word	0x0800a9d4
 8001814:	0800a9e4 	.word	0x0800a9e4
 8001818:	20000000 	.word	0x20000000
 800181c:	10000004 	.word	0x10000004
 8001820:	0800aa14 	.word	0x0800aa14
 8001824:	0800aa28 	.word	0x0800aa28
 8001828:	0800aa44 	.word	0x0800aa44
 800182c:	40007400 	.word	0x40007400
 8001830:	10000804 	.word	0x10000804
 8001834:	10002158 	.word	0x10002158

08001838 <__io_putchar>:

}

/* USER CODE BEGIN 4 */
PUTCHAR_PROTOTYPE
{
 8001838:	b500      	push	{lr}
 800183a:	b083      	sub	sp, #12
 800183c:	a902      	add	r1, sp, #8
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 1000);
 800183e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
{
 8001842:	f841 0d04 	str.w	r0, [r1, #-4]!
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 1000);
 8001846:	2201      	movs	r2, #1
 8001848:	4803      	ldr	r0, [pc, #12]	; (8001858 <__io_putchar+0x20>)
 800184a:	f002 fa8d 	bl	8003d68 <HAL_UART_Transmit>
  return ch;
}
 800184e:	9801      	ldr	r0, [sp, #4]
 8001850:	b003      	add	sp, #12
 8001852:	f85d fb04 	ldr.w	pc, [sp], #4
 8001856:	bf00      	nop
 8001858:	20000440 	.word	0x20000440

0800185c <__io_getchar>:

GETCHAR_PROTOTYPE
{
 800185c:	b530      	push	{r4, r5, lr}
 800185e:	b083      	sub	sp, #12
  int ch = 0;
 8001860:	ac02      	add	r4, sp, #8
 8001862:	2300      	movs	r3, #0
 8001864:	f844 3d04 	str.w	r3, [r4, #-4]!
  HAL_UART_Receive(&huart3, (uint8_t *)&ch, 1, 1000);
 8001868:	4d08      	ldr	r5, [pc, #32]	; (800188c <__io_getchar+0x30>)
 800186a:	4621      	mov	r1, r4
 800186c:	4628      	mov	r0, r5
 800186e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001872:	2201      	movs	r2, #1
 8001874:	f002 fb06 	bl	8003e84 <HAL_UART_Receive>
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 1000);
 8001878:	4621      	mov	r1, r4
 800187a:	4628      	mov	r0, r5
 800187c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001880:	2201      	movs	r2, #1
 8001882:	f002 fa71 	bl	8003d68 <HAL_UART_Transmit>
  return ch;
}
 8001886:	9801      	ldr	r0, [sp, #4]
 8001888:	b003      	add	sp, #12
 800188a:	bd30      	pop	{r4, r5, pc}
 800188c:	20000440 	.word	0x20000440

08001890 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001890:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001892:	4b0c      	ldr	r3, [pc, #48]	; (80018c4 <HAL_MspInit+0x34>)
 8001894:	2100      	movs	r1, #0
 8001896:	9100      	str	r1, [sp, #0]
 8001898:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800189a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800189e:	645a      	str	r2, [r3, #68]	; 0x44
 80018a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80018a2:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80018a6:	9200      	str	r2, [sp, #0]
 80018a8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018aa:	9101      	str	r1, [sp, #4]
 80018ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80018ae:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80018b2:	641a      	str	r2, [r3, #64]	; 0x40
 80018b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ba:	9301      	str	r3, [sp, #4]
 80018bc:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018be:	b002      	add	sp, #8
 80018c0:	4770      	bx	lr
 80018c2:	bf00      	nop
 80018c4:	40023800 	.word	0x40023800

080018c8 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80018c8:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hdac->Instance==DAC)
 80018ca:	6801      	ldr	r1, [r0, #0]
 80018cc:	4a15      	ldr	r2, [pc, #84]	; (8001924 <HAL_DAC_MspInit+0x5c>)
{
 80018ce:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018d0:	2300      	movs	r3, #0
  if(hdac->Instance==DAC)
 80018d2:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018d4:	e9cd 3303 	strd	r3, r3, [sp, #12]
 80018d8:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80018dc:	9307      	str	r3, [sp, #28]
  if(hdac->Instance==DAC)
 80018de:	d001      	beq.n	80018e4 <HAL_DAC_MspInit+0x1c>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 80018e0:	b008      	add	sp, #32
 80018e2:	bd10      	pop	{r4, pc}
    __HAL_RCC_DAC_CLK_ENABLE();
 80018e4:	f502 32e2 	add.w	r2, r2, #115712	; 0x1c400
 80018e8:	9301      	str	r3, [sp, #4]
 80018ea:	6c11      	ldr	r1, [r2, #64]	; 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ec:	480e      	ldr	r0, [pc, #56]	; (8001928 <HAL_DAC_MspInit+0x60>)
    __HAL_RCC_DAC_CLK_ENABLE();
 80018ee:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 80018f2:	6411      	str	r1, [r2, #64]	; 0x40
 80018f4:	6c11      	ldr	r1, [r2, #64]	; 0x40
 80018f6:	f001 5100 	and.w	r1, r1, #536870912	; 0x20000000
 80018fa:	9101      	str	r1, [sp, #4]
 80018fc:	9901      	ldr	r1, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018fe:	9302      	str	r3, [sp, #8]
 8001900:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001902:	f043 0301 	orr.w	r3, r3, #1
 8001906:	6313      	str	r3, [r2, #48]	; 0x30
 8001908:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800190a:	f003 0301 	and.w	r3, r3, #1
 800190e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001910:	2210      	movs	r2, #16
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001912:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001914:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001916:	9c02      	ldr	r4, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001918:	e9cd 2303 	strd	r2, r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800191c:	f000 fb24 	bl	8001f68 <HAL_GPIO_Init>
}
 8001920:	b008      	add	sp, #32
 8001922:	bd10      	pop	{r4, pc}
 8001924:	40007400 	.word	0x40007400
 8001928:	40020000 	.word	0x40020000

0800192c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800192c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hsd->Instance==SDIO)
 8001930:	6802      	ldr	r2, [r0, #0]
 8001932:	4b2a      	ldr	r3, [pc, #168]	; (80019dc <HAL_SD_MspInit+0xb0>)
{
 8001934:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001936:	2400      	movs	r4, #0
  if(hsd->Instance==SDIO)
 8001938:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800193a:	e9cd 4403 	strd	r4, r4, [sp, #12]
 800193e:	e9cd 4405 	strd	r4, r4, [sp, #20]
 8001942:	9407      	str	r4, [sp, #28]
  if(hsd->Instance==SDIO)
 8001944:	d002      	beq.n	800194c <HAL_SD_MspInit+0x20>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8001946:	b008      	add	sp, #32
 8001948:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_SDIO_CLK_ENABLE();
 800194c:	f503 3386 	add.w	r3, r3, #68608	; 0x10c00
 8001950:	9400      	str	r4, [sp, #0]
 8001952:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001954:	4822      	ldr	r0, [pc, #136]	; (80019e0 <HAL_SD_MspInit+0xb4>)
    __HAL_RCC_SDIO_CLK_ENABLE();
 8001956:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800195a:	645a      	str	r2, [r3, #68]	; 0x44
 800195c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800195e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001962:	9200      	str	r2, [sp, #0]
 8001964:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001966:	9401      	str	r4, [sp, #4]
 8001968:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800196a:	f042 0204 	orr.w	r2, r2, #4
 800196e:	631a      	str	r2, [r3, #48]	; 0x30
 8001970:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001972:	f002 0204 	and.w	r2, r2, #4
 8001976:	9201      	str	r2, [sp, #4]
 8001978:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800197a:	9402      	str	r4, [sp, #8]
 800197c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800197e:	f042 0208 	orr.w	r2, r2, #8
 8001982:	631a      	str	r2, [r3, #48]	; 0x30
 8001984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001986:	250c      	movs	r5, #12
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001988:	f003 0308 	and.w	r3, r3, #8
 800198c:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800198e:	f04f 0802 	mov.w	r8, #2
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 8001992:	f44f 5388 	mov.w	r3, #4352	; 0x1100
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001996:	2701      	movs	r7, #1
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001998:	2603      	movs	r6, #3
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800199a:	eb0d 0105 	add.w	r1, sp, r5
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800199e:	9a02      	ldr	r2, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80019a0:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019a2:	e9cd 3803 	strd	r3, r8, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019a6:	e9cd 7605 	strd	r7, r6, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019aa:	f000 fadd 	bl	8001f68 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80019ae:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019b0:	eb0d 0105 	add.w	r1, sp, r5
 80019b4:	480b      	ldr	r0, [pc, #44]	; (80019e4 <HAL_SD_MspInit+0xb8>)
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80019b6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019b8:	e9cd 8704 	strd	r8, r7, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80019bc:	e9cd 6506 	strd	r6, r5, [sp, #24]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019c0:	f000 fad2 	bl	8001f68 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 80019c4:	4622      	mov	r2, r4
 80019c6:	4621      	mov	r1, r4
 80019c8:	2031      	movs	r0, #49	; 0x31
 80019ca:	f000 f9f1 	bl	8001db0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 80019ce:	2031      	movs	r0, #49	; 0x31
 80019d0:	f000 fa24 	bl	8001e1c <HAL_NVIC_EnableIRQ>
}
 80019d4:	b008      	add	sp, #32
 80019d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80019da:	bf00      	nop
 80019dc:	40012c00 	.word	0x40012c00
 80019e0:	40020800 	.word	0x40020800
 80019e4:	40020c00 	.word	0x40020c00

080019e8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80019e8:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hspi->Instance==SPI4)
 80019ea:	6802      	ldr	r2, [r0, #0]
 80019ec:	4b1b      	ldr	r3, [pc, #108]	; (8001a5c <HAL_SPI_MspInit+0x74>)
{
 80019ee:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019f0:	2400      	movs	r4, #0
  if(hspi->Instance==SPI4)
 80019f2:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019f4:	e9cd 4403 	strd	r4, r4, [sp, #12]
 80019f8:	e9cd 4405 	strd	r4, r4, [sp, #20]
 80019fc:	9407      	str	r4, [sp, #28]
  if(hspi->Instance==SPI4)
 80019fe:	d001      	beq.n	8001a04 <HAL_SPI_MspInit+0x1c>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 8001a00:	b008      	add	sp, #32
 8001a02:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_SPI4_CLK_ENABLE();
 8001a04:	f503 3382 	add.w	r3, r3, #66560	; 0x10400
 8001a08:	9401      	str	r4, [sp, #4]
 8001a0a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a0c:	4814      	ldr	r0, [pc, #80]	; (8001a60 <HAL_SPI_MspInit+0x78>)
    __HAL_RCC_SPI4_CLK_ENABLE();
 8001a0e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001a12:	645a      	str	r2, [r3, #68]	; 0x44
 8001a14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001a16:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001a1a:	9201      	str	r2, [sp, #4]
 8001a1c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a1e:	9402      	str	r4, [sp, #8]
 8001a20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a22:	f042 0210 	orr.w	r2, r2, #16
 8001a26:	631a      	str	r2, [r3, #48]	; 0x30
 8001a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a2a:	f003 0310 	and.w	r3, r3, #16
 8001a2e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_6;
 8001a30:	2344      	movs	r3, #68	; 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a32:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a34:	2203      	movs	r2, #3
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_6;
 8001a36:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a38:	2502      	movs	r5, #2
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001a3a:	2305      	movs	r3, #5
 8001a3c:	e9cd 2306 	strd	r2, r3, [sp, #24]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a40:	9e02      	ldr	r6, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a42:	9504      	str	r5, [sp, #16]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a44:	f000 fa90 	bl	8001f68 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI4_IRQn, 0, 0);
 8001a48:	4622      	mov	r2, r4
 8001a4a:	4621      	mov	r1, r4
 8001a4c:	2054      	movs	r0, #84	; 0x54
 8001a4e:	f000 f9af 	bl	8001db0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 8001a52:	2054      	movs	r0, #84	; 0x54
 8001a54:	f000 f9e2 	bl	8001e1c <HAL_NVIC_EnableIRQ>
}
 8001a58:	b008      	add	sp, #32
 8001a5a:	bd70      	pop	{r4, r5, r6, pc}
 8001a5c:	40013400 	.word	0x40013400
 8001a60:	40021000 	.word	0x40021000

08001a64 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM2)
 8001a64:	6803      	ldr	r3, [r0, #0]
 8001a66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
{
 8001a6a:	b082      	sub	sp, #8
  if(htim_base->Instance==TIM2)
 8001a6c:	d012      	beq.n	8001a94 <HAL_TIM_Base_MspInit+0x30>
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_base->Instance==TIM5)
 8001a6e:	4a11      	ldr	r2, [pc, #68]	; (8001ab4 <HAL_TIM_Base_MspInit+0x50>)
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d001      	beq.n	8001a78 <HAL_TIM_Base_MspInit+0x14>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001a74:	b002      	add	sp, #8
 8001a76:	4770      	bx	lr
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001a78:	4b0f      	ldr	r3, [pc, #60]	; (8001ab8 <HAL_TIM_Base_MspInit+0x54>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	9201      	str	r2, [sp, #4]
 8001a7e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a80:	f042 0208 	orr.w	r2, r2, #8
 8001a84:	641a      	str	r2, [r3, #64]	; 0x40
 8001a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a88:	f003 0308 	and.w	r3, r3, #8
 8001a8c:	9301      	str	r3, [sp, #4]
 8001a8e:	9b01      	ldr	r3, [sp, #4]
}
 8001a90:	b002      	add	sp, #8
 8001a92:	4770      	bx	lr
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a94:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 8001a98:	2200      	movs	r2, #0
 8001a9a:	9200      	str	r2, [sp, #0]
 8001a9c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a9e:	f042 0201 	orr.w	r2, r2, #1
 8001aa2:	641a      	str	r2, [r3, #64]	; 0x40
 8001aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa6:	f003 0301 	and.w	r3, r3, #1
 8001aaa:	9300      	str	r3, [sp, #0]
 8001aac:	9b00      	ldr	r3, [sp, #0]
}
 8001aae:	b002      	add	sp, #8
 8001ab0:	4770      	bx	lr
 8001ab2:	bf00      	nop
 8001ab4:	40000c00 	.word	0x40000c00
 8001ab8:	40023800 	.word	0x40023800

08001abc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001abc:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(huart->Instance==USART3)
 8001abe:	6801      	ldr	r1, [r0, #0]
 8001ac0:	4a18      	ldr	r2, [pc, #96]	; (8001b24 <HAL_UART_MspInit+0x68>)
{
 8001ac2:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ac4:	2300      	movs	r3, #0
  if(huart->Instance==USART3)
 8001ac6:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ac8:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8001acc:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8001ad0:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART3)
 8001ad2:	d001      	beq.n	8001ad8 <HAL_UART_MspInit+0x1c>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001ad4:	b008      	add	sp, #32
 8001ad6:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_USART3_CLK_ENABLE();
 8001ad8:	f502 32f8 	add.w	r2, r2, #126976	; 0x1f000
 8001adc:	9301      	str	r3, [sp, #4]
 8001ade:	6c11      	ldr	r1, [r2, #64]	; 0x40
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ae0:	4811      	ldr	r0, [pc, #68]	; (8001b28 <HAL_UART_MspInit+0x6c>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8001ae2:	f441 2180 	orr.w	r1, r1, #262144	; 0x40000
 8001ae6:	6411      	str	r1, [r2, #64]	; 0x40
 8001ae8:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8001aea:	f401 2180 	and.w	r1, r1, #262144	; 0x40000
 8001aee:	9101      	str	r1, [sp, #4]
 8001af0:	9901      	ldr	r1, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001af2:	9302      	str	r3, [sp, #8]
 8001af4:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001af6:	f043 0308 	orr.w	r3, r3, #8
 8001afa:	6313      	str	r3, [r2, #48]	; 0x30
 8001afc:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001afe:	f003 0308 	and.w	r3, r3, #8
 8001b02:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b04:	2203      	movs	r2, #3
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001b06:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b08:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001b0a:	f44f 7540 	mov.w	r5, #768	; 0x300
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b0e:	2402      	movs	r4, #2
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b10:	9e02      	ldr	r6, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b12:	e9cd 5403 	strd	r5, r4, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001b16:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b1a:	f000 fa25 	bl	8001f68 <HAL_GPIO_Init>
}
 8001b1e:	b008      	add	sp, #32
 8001b20:	bd70      	pop	{r4, r5, r6, pc}
 8001b22:	bf00      	nop
 8001b24:	40004800 	.word	0x40004800
 8001b28:	40020c00 	.word	0x40020c00

08001b2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b2c:	e7fe      	b.n	8001b2c <NMI_Handler>
 8001b2e:	bf00      	nop

08001b30 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b30:	e7fe      	b.n	8001b30 <HardFault_Handler>
 8001b32:	bf00      	nop

08001b34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b34:	e7fe      	b.n	8001b34 <MemManage_Handler>
 8001b36:	bf00      	nop

08001b38 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b38:	e7fe      	b.n	8001b38 <BusFault_Handler>
 8001b3a:	bf00      	nop

08001b3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b3c:	e7fe      	b.n	8001b3c <UsageFault_Handler>
 8001b3e:	bf00      	nop

08001b40 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b40:	4770      	bx	lr
 8001b42:	bf00      	nop

08001b44 <DebugMon_Handler>:
 8001b44:	4770      	bx	lr
 8001b46:	bf00      	nop

08001b48 <PendSV_Handler>:
 8001b48:	4770      	bx	lr
 8001b4a:	bf00      	nop

08001b4c <SysTick_Handler>:
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */
	  if (TIM2->SR & TIM_SR_UIF) {
 8001b4c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001b50:	691a      	ldr	r2, [r3, #16]
 8001b52:	07d2      	lsls	r2, r2, #31
 8001b54:	d401      	bmi.n	8001b5a <SysTick_Handler+0xe>
	    TIM2->SR = ~TIM_SR_UIF;
	    HAL_TIM_PeriodElapsedCallback(&htim2);
	    return;
	  }
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b56:	f000 b8f5 	b.w	8001d44 <HAL_IncTick>
	    TIM2->SR = ~TIM_SR_UIF;
 8001b5a:	f06f 0201 	mvn.w	r2, #1
 8001b5e:	611a      	str	r2, [r3, #16]
	    HAL_TIM_PeriodElapsedCallback(&htim2);
 8001b60:	4801      	ldr	r0, [pc, #4]	; (8001b68 <SysTick_Handler+0x1c>)
 8001b62:	f7ff bac7 	b.w	80010f4 <HAL_TIM_PeriodElapsedCallback>
 8001b66:	bf00      	nop
 8001b68:	200005b0 	.word	0x200005b0

08001b6c <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001b6c:	4801      	ldr	r0, [pc, #4]	; (8001b74 <TIM2_IRQHandler+0x8>)
 8001b6e:	f001 bf65 	b.w	8003a3c <HAL_TIM_IRQHandler>
 8001b72:	bf00      	nop
 8001b74:	200005b0 	.word	0x200005b0

08001b78 <SDIO_IRQHandler>:
void SDIO_IRQHandler(void)
{
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8001b78:	4801      	ldr	r0, [pc, #4]	; (8001b80 <SDIO_IRQHandler+0x8>)
 8001b7a:	f001 b86f 	b.w	8002c5c <HAL_SD_IRQHandler>
 8001b7e:	bf00      	nop
 8001b80:	2000052c 	.word	0x2000052c

08001b84 <SPI4_IRQHandler>:
void SPI4_IRQHandler(void)
{
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 8001b84:	4801      	ldr	r0, [pc, #4]	; (8001b8c <SPI4_IRQHandler+0x8>)
 8001b86:	f001 bd55 	b.w	8003634 <HAL_SPI_IRQHandler>
 8001b8a:	bf00      	nop
 8001b8c:	200004d4 	.word	0x200004d4

08001b90 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b90:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b92:	1e16      	subs	r6, r2, #0
 8001b94:	dd07      	ble.n	8001ba6 <_read+0x16>
 8001b96:	460c      	mov	r4, r1
 8001b98:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 8001b9a:	f7ff fe5f 	bl	800185c <__io_getchar>
 8001b9e:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ba2:	42a5      	cmp	r5, r4
 8001ba4:	d1f9      	bne.n	8001b9a <_read+0xa>
	}

return len;
}
 8001ba6:	4630      	mov	r0, r6
 8001ba8:	bd70      	pop	{r4, r5, r6, pc}
 8001baa:	bf00      	nop

08001bac <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001bac:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bae:	1e16      	subs	r6, r2, #0
 8001bb0:	dd07      	ble.n	8001bc2 <_write+0x16>
 8001bb2:	460c      	mov	r4, r1
 8001bb4:	198d      	adds	r5, r1, r6
	{
		__io_putchar(*ptr++);
 8001bb6:	f814 0b01 	ldrb.w	r0, [r4], #1
 8001bba:	f7ff fe3d 	bl	8001838 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bbe:	42ac      	cmp	r4, r5
 8001bc0:	d1f9      	bne.n	8001bb6 <_write+0xa>
	}
	return len;
}
 8001bc2:	4630      	mov	r0, r6
 8001bc4:	bd70      	pop	{r4, r5, r6, pc}
 8001bc6:	bf00      	nop

08001bc8 <_close>:

int _close(int file)
{
	return -1;
}
 8001bc8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001bcc:	4770      	bx	lr
 8001bce:	bf00      	nop

08001bd0 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8001bd0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001bd4:	604b      	str	r3, [r1, #4]
	return 0;
}
 8001bd6:	2000      	movs	r0, #0
 8001bd8:	4770      	bx	lr
 8001bda:	bf00      	nop

08001bdc <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8001bdc:	2001      	movs	r0, #1
 8001bde:	4770      	bx	lr

08001be0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8001be0:	2000      	movs	r0, #0
 8001be2:	4770      	bx	lr

08001be4 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001be4:	490c      	ldr	r1, [pc, #48]	; (8001c18 <_sbrk+0x34>)
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001be6:	4a0d      	ldr	r2, [pc, #52]	; (8001c1c <_sbrk+0x38>)
  if (NULL == __sbrk_heap_end)
 8001be8:	680b      	ldr	r3, [r1, #0]
{
 8001bea:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001bec:	4c0c      	ldr	r4, [pc, #48]	; (8001c20 <_sbrk+0x3c>)
 8001bee:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 8001bf0:	b12b      	cbz	r3, 8001bfe <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001bf2:	4418      	add	r0, r3
 8001bf4:	4290      	cmp	r0, r2
 8001bf6:	d807      	bhi.n	8001c08 <_sbrk+0x24>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8001bf8:	6008      	str	r0, [r1, #0]

  return (void *)prev_heap_end;
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8001bfe:	4b09      	ldr	r3, [pc, #36]	; (8001c24 <_sbrk+0x40>)
 8001c00:	600b      	str	r3, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 8001c02:	4418      	add	r0, r3
 8001c04:	4290      	cmp	r0, r2
 8001c06:	d9f7      	bls.n	8001bf8 <_sbrk+0x14>
    errno = ENOMEM;
 8001c08:	f006 fad6 	bl	80081b8 <__errno>
 8001c0c:	230c      	movs	r3, #12
 8001c0e:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001c10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	bd10      	pop	{r4, pc}
 8001c18:	20000200 	.word	0x20000200
 8001c1c:	20030000 	.word	0x20030000
 8001c20:	00000400 	.word	0x00000400
 8001c24:	20000a68 	.word	0x20000a68

08001c28 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c28:	4b05      	ldr	r3, [pc, #20]	; (8001c40 <SystemInit+0x18>)
 8001c2a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001c2e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c32:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8001c36:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001c3a:	6099      	str	r1, [r3, #8]
#endif
}
 8001c3c:	4770      	bx	lr
 8001c3e:	bf00      	nop
 8001c40:	e000ed00 	.word	0xe000ed00

08001c44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001c44:	f8df d05c 	ldr.w	sp, [pc, #92]	; 8001ca4 <LoopFillZerobss+0x16>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001c48:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001c4a:	e003      	b.n	8001c54 <LoopCopyDataInit>

08001c4c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001c4c:	4b16      	ldr	r3, [pc, #88]	; (8001ca8 <LoopFillZerobss+0x1a>)
  ldr  r3, [r3, r1]
 8001c4e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001c50:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001c52:	3104      	adds	r1, #4

08001c54 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001c54:	4815      	ldr	r0, [pc, #84]	; (8001cac <LoopFillZerobss+0x1e>)
  ldr  r3, =_edata
 8001c56:	4b16      	ldr	r3, [pc, #88]	; (8001cb0 <LoopFillZerobss+0x22>)
  adds  r2, r0, r1
 8001c58:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001c5a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001c5c:	d3f6      	bcc.n	8001c4c <CopyDataInit>
  ldr  r2, =_sbss
 8001c5e:	4a15      	ldr	r2, [pc, #84]	; (8001cb4 <LoopFillZerobss+0x26>)
  b  LoopFillZerobss
 8001c60:	e015      	b.n	8001c8e <LoopFillZerobss>

//ccmram shit
ldr	r2, =_sccmram
 8001c62:	4a15      	ldr	r2, [pc, #84]	; (8001cb8 <LoopFillZerobss+0x2a>)
	b	 LoopFillZeroCcm
 8001c64:	e002      	b.n	8001c6c <LoopFillZeroCcm>

08001c66 <FillZeroCcm>:
/* Zero fill the ccmram segment. */
FillZeroCcm:
	movs r3, #0
 8001c66:	2300      	movs	r3, #0
 	str  r3, [r2]
 8001c68:	6013      	str	r3, [r2, #0]
	adds r2, r2, #4
 8001c6a:	3204      	adds	r2, #4

08001c6c <LoopFillZeroCcm>:

LoopFillZeroCcm:
	ldr	r3, = _eccmram
 8001c6c:	4b13      	ldr	r3, [pc, #76]	; (8001cbc <LoopFillZerobss+0x2e>)
	cmp	r2, r3
 8001c6e:	429a      	cmp	r2, r3
	bcc	FillZeroCcm
 8001c70:	d3f9      	bcc.n	8001c66 <FillZeroCcm>

/* Copy the ccm segment initializers from flash to SRAM */
  movs	r1, #0
 8001c72:	2100      	movs	r1, #0
  b	LoopCopyCcmInit
 8001c74:	e003      	b.n	8001c7e <LoopCopyCcmInit>

08001c76 <CopyCcmInit>:

CopyCcmInit:
	ldr	r3, =_sccmram
 8001c76:	4b10      	ldr	r3, [pc, #64]	; (8001cb8 <LoopFillZerobss+0x2a>)
	ldr	r3, [r3, r1]
 8001c78:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001c7a:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001c7c:	3104      	adds	r1, #4

08001c7e <LoopCopyCcmInit>:

LoopCopyCcmInit:
	ldr	r0, =_sccmram
 8001c7e:	480e      	ldr	r0, [pc, #56]	; (8001cb8 <LoopFillZerobss+0x2a>)
	ldr	r3, =_eccmram
 8001c80:	4b0e      	ldr	r3, [pc, #56]	; (8001cbc <LoopFillZerobss+0x2e>)
	adds	r2, r0, r1
 8001c82:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001c84:	429a      	cmp	r2, r3
	bcc	CopyCcmInit
 8001c86:	d3f6      	bcc.n	8001c76 <CopyCcmInit>

08001c88 <FillZerobss>:

/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001c88:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001c8a:	f842 3b04 	str.w	r3, [r2], #4

08001c8e <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001c8e:	4b0c      	ldr	r3, [pc, #48]	; (8001cc0 <LoopFillZerobss+0x32>)
  cmp  r2, r3
 8001c90:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001c92:	d3f9      	bcc.n	8001c88 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001c94:	f7ff ffc8 	bl	8001c28 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c98:	f006 fa94 	bl	80081c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c9c:	f7ff fa98 	bl	80011d0 <main>
  bx  lr    
 8001ca0:	4770      	bx	lr
 8001ca2:	0000      	.short	0x0000
  ldr   sp, =_estack       /* set stack pointer */
 8001ca4:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8001ca8:	0800b3a0 	.word	0x0800b3a0
  ldr  r0, =_sdata
 8001cac:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001cb0:	200001e4 	.word	0x200001e4
  ldr  r2, =_sbss
 8001cb4:	200001e4 	.word	0x200001e4
ldr	r2, =_sccmram
 8001cb8:	10000000 	.word	0x10000000
	ldr	r3, = _eccmram
 8001cbc:	10002398 	.word	0x10002398
  ldr  r3, = _ebss
 8001cc0:	20000a68 	.word	0x20000a68

08001cc4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001cc4:	e7fe      	b.n	8001cc4 <ADC_IRQHandler>
	...

08001cc8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cc8:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001cca:	4a0e      	ldr	r2, [pc, #56]	; (8001d04 <HAL_InitTick+0x3c>)
 8001ccc:	4b0e      	ldr	r3, [pc, #56]	; (8001d08 <HAL_InitTick+0x40>)
 8001cce:	7812      	ldrb	r2, [r2, #0]
 8001cd0:	681b      	ldr	r3, [r3, #0]
{
 8001cd2:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001cd4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001cd8:	fbb0 f0f2 	udiv	r0, r0, r2
 8001cdc:	fbb3 f0f0 	udiv	r0, r3, r0
 8001ce0:	f000 f8aa 	bl	8001e38 <HAL_SYSTICK_Config>
 8001ce4:	b908      	cbnz	r0, 8001cea <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ce6:	2d0f      	cmp	r5, #15
 8001ce8:	d901      	bls.n	8001cee <HAL_InitTick+0x26>
    return HAL_ERROR;
 8001cea:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8001cec:	bd38      	pop	{r3, r4, r5, pc}
 8001cee:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	4629      	mov	r1, r5
 8001cf4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001cf8:	f000 f85a 	bl	8001db0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001cfc:	4b03      	ldr	r3, [pc, #12]	; (8001d0c <HAL_InitTick+0x44>)
 8001cfe:	4620      	mov	r0, r4
 8001d00:	601d      	str	r5, [r3, #0]
}
 8001d02:	bd38      	pop	{r3, r4, r5, pc}
 8001d04:	20000008 	.word	0x20000008
 8001d08:	20000004 	.word	0x20000004
 8001d0c:	2000000c 	.word	0x2000000c

08001d10 <HAL_Init>:
{
 8001d10:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d12:	4b0b      	ldr	r3, [pc, #44]	; (8001d40 <HAL_Init+0x30>)
 8001d14:	681a      	ldr	r2, [r3, #0]
 8001d16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d1a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d1c:	681a      	ldr	r2, [r3, #0]
 8001d1e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001d22:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d24:	681a      	ldr	r2, [r3, #0]
 8001d26:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d2a:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d2c:	2003      	movs	r0, #3
 8001d2e:	f000 f82d 	bl	8001d8c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d32:	2000      	movs	r0, #0
 8001d34:	f7ff ffc8 	bl	8001cc8 <HAL_InitTick>
  HAL_MspInit();
 8001d38:	f7ff fdaa 	bl	8001890 <HAL_MspInit>
}
 8001d3c:	2000      	movs	r0, #0
 8001d3e:	bd08      	pop	{r3, pc}
 8001d40:	40023c00 	.word	0x40023c00

08001d44 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001d44:	4a03      	ldr	r2, [pc, #12]	; (8001d54 <HAL_IncTick+0x10>)
 8001d46:	4b04      	ldr	r3, [pc, #16]	; (8001d58 <HAL_IncTick+0x14>)
 8001d48:	6811      	ldr	r1, [r2, #0]
 8001d4a:	781b      	ldrb	r3, [r3, #0]
 8001d4c:	440b      	add	r3, r1
 8001d4e:	6013      	str	r3, [r2, #0]
}
 8001d50:	4770      	bx	lr
 8001d52:	bf00      	nop
 8001d54:	200005f0 	.word	0x200005f0
 8001d58:	20000008 	.word	0x20000008

08001d5c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001d5c:	4b01      	ldr	r3, [pc, #4]	; (8001d64 <HAL_GetTick+0x8>)
 8001d5e:	6818      	ldr	r0, [r3, #0]
}
 8001d60:	4770      	bx	lr
 8001d62:	bf00      	nop
 8001d64:	200005f0 	.word	0x200005f0

08001d68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d68:	b538      	push	{r3, r4, r5, lr}
 8001d6a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001d6c:	f7ff fff6 	bl	8001d5c <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d70:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8001d72:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8001d74:	d002      	beq.n	8001d7c <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d76:	4b04      	ldr	r3, [pc, #16]	; (8001d88 <HAL_Delay+0x20>)
 8001d78:	781b      	ldrb	r3, [r3, #0]
 8001d7a:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001d7c:	f7ff ffee 	bl	8001d5c <HAL_GetTick>
 8001d80:	1b40      	subs	r0, r0, r5
 8001d82:	42a0      	cmp	r0, r4
 8001d84:	d3fa      	bcc.n	8001d7c <HAL_Delay+0x14>
  {
  }
}
 8001d86:	bd38      	pop	{r3, r4, r5, pc}
 8001d88:	20000008 	.word	0x20000008

08001d8c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d8c:	4a07      	ldr	r2, [pc, #28]	; (8001dac <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001d8e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d90:	f64f 01ff 	movw	r1, #63743	; 0xf8ff
 8001d94:	400b      	ands	r3, r1
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d96:	0200      	lsls	r0, r0, #8
 8001d98:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d9c:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 8001da0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8001da4:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8001da6:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001da8:	4770      	bx	lr
 8001daa:	bf00      	nop
 8001dac:	e000ed00 	.word	0xe000ed00

08001db0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001db0:	4b18      	ldr	r3, [pc, #96]	; (8001e14 <HAL_NVIC_SetPriority+0x64>)
 8001db2:	68db      	ldr	r3, [r3, #12]
 8001db4:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001db8:	b430      	push	{r4, r5}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001dba:	f1c3 0507 	rsb	r5, r3, #7
 8001dbe:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dc0:	f103 0404 	add.w	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001dc4:	bf28      	it	cs
 8001dc6:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dc8:	2c06      	cmp	r4, #6
 8001dca:	d919      	bls.n	8001e00 <HAL_NVIC_SetPriority+0x50>
 8001dcc:	3b03      	subs	r3, #3
 8001dce:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8001dd2:	409c      	lsls	r4, r3
 8001dd4:	ea22 0404 	bic.w	r4, r2, r4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dd8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001ddc:	40aa      	lsls	r2, r5
 8001dde:	ea21 0102 	bic.w	r1, r1, r2
 8001de2:	fa01 f203 	lsl.w	r2, r1, r3
 8001de6:	4322      	orrs	r2, r4
 8001de8:	0112      	lsls	r2, r2, #4
  if ((int32_t)(IRQn) >= 0)
 8001dea:	2800      	cmp	r0, #0
 8001dec:	b2d2      	uxtb	r2, r2
 8001dee:	db0a      	blt.n	8001e06 <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001df0:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8001df4:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8001df8:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001dfc:	bc30      	pop	{r4, r5}
 8001dfe:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e00:	2400      	movs	r4, #0
 8001e02:	4623      	mov	r3, r4
 8001e04:	e7e8      	b.n	8001dd8 <HAL_NVIC_SetPriority+0x28>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e06:	4b04      	ldr	r3, [pc, #16]	; (8001e18 <HAL_NVIC_SetPriority+0x68>)
 8001e08:	f000 000f 	and.w	r0, r0, #15
 8001e0c:	4403      	add	r3, r0
 8001e0e:	761a      	strb	r2, [r3, #24]
 8001e10:	bc30      	pop	{r4, r5}
 8001e12:	4770      	bx	lr
 8001e14:	e000ed00 	.word	0xe000ed00
 8001e18:	e000ecfc 	.word	0xe000ecfc

08001e1c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001e1c:	2800      	cmp	r0, #0
 8001e1e:	db07      	blt.n	8001e30 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e20:	f000 011f 	and.w	r1, r0, #31
 8001e24:	2301      	movs	r3, #1
 8001e26:	0940      	lsrs	r0, r0, #5
 8001e28:	4a02      	ldr	r2, [pc, #8]	; (8001e34 <HAL_NVIC_EnableIRQ+0x18>)
 8001e2a:	408b      	lsls	r3, r1
 8001e2c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001e30:	4770      	bx	lr
 8001e32:	bf00      	nop
 8001e34:	e000e100 	.word	0xe000e100

08001e38 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e38:	3801      	subs	r0, #1
 8001e3a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001e3e:	d20e      	bcs.n	8001e5e <HAL_SYSTICK_Config+0x26>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e40:	4b08      	ldr	r3, [pc, #32]	; (8001e64 <HAL_SYSTICK_Config+0x2c>)
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e42:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e44:	4c08      	ldr	r4, [pc, #32]	; (8001e68 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e46:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e48:	20f0      	movs	r0, #240	; 0xf0
 8001e4a:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e4e:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e50:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e52:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e56:	6019      	str	r1, [r3, #0]
   return SysTick_Config(TicksNumb);
}
 8001e58:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001e5c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001e5e:	2001      	movs	r0, #1
 8001e60:	4770      	bx	lr
 8001e62:	bf00      	nop
 8001e64:	e000e010 	.word	0xe000e010
 8001e68:	e000ed00 	.word	0xe000ed00

08001e6c <HAL_DAC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
  /* Check DAC handle */
  if(hdac == NULL)
 8001e6c:	b188      	cbz	r0, 8001e92 <HAL_DAC_Init+0x26>
     return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8001e6e:	7903      	ldrb	r3, [r0, #4]
{ 
 8001e70:	b510      	push	{r4, lr}
  if(hdac->State == HAL_DAC_STATE_RESET)
 8001e72:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001e76:	4604      	mov	r4, r0
 8001e78:	b13b      	cbz	r3, 8001e8a <HAL_DAC_Init+0x1e>
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001e7a:	2300      	movs	r3, #0
  hdac->State = HAL_DAC_STATE_BUSY;
 8001e7c:	2102      	movs	r1, #2
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001e7e:	2201      	movs	r2, #1
  hdac->State = HAL_DAC_STATE_BUSY;
 8001e80:	7121      	strb	r1, [r4, #4]
  
  /* Return function status */
  return HAL_OK;
 8001e82:	4618      	mov	r0, r3
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001e84:	6123      	str	r3, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 8001e86:	7122      	strb	r2, [r4, #4]
}
 8001e88:	bd10      	pop	{r4, pc}
    hdac->Lock = HAL_UNLOCKED;
 8001e8a:	7142      	strb	r2, [r0, #5]
    HAL_DAC_MspInit(hdac);
 8001e8c:	f7ff fd1c 	bl	80018c8 <HAL_DAC_MspInit>
 8001e90:	e7f3      	b.n	8001e7a <HAL_DAC_Init+0xe>
     return HAL_ERROR;
 8001e92:	2001      	movs	r0, #1
}
 8001e94:	4770      	bx	lr
 8001e96:	bf00      	nop

08001e98 <HAL_DAC_Start>:
  
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8001e98:	7943      	ldrb	r3, [r0, #5]
 8001e9a:	2b01      	cmp	r3, #1
 8001e9c:	d02c      	beq.n	8001ef8 <HAL_DAC_Start+0x60>
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001e9e:	2202      	movs	r2, #2
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8001ea0:	6803      	ldr	r3, [r0, #0]
{
 8001ea2:	b430      	push	{r4, r5}
  hdac->State = HAL_DAC_STATE_BUSY;
 8001ea4:	7102      	strb	r2, [r0, #4]
  __HAL_DAC_ENABLE(hdac, Channel);
 8001ea6:	681d      	ldr	r5, [r3, #0]
  __HAL_LOCK(hdac);
 8001ea8:	2401      	movs	r4, #1
  __HAL_DAC_ENABLE(hdac, Channel);
 8001eaa:	fa04 f201 	lsl.w	r2, r4, r1
 8001eae:	432a      	orrs	r2, r5
  __HAL_LOCK(hdac);
 8001eb0:	7144      	strb	r4, [r0, #5]
  __HAL_DAC_ENABLE(hdac, Channel);
 8001eb2:	601a      	str	r2, [r3, #0]
  
  if(Channel == DAC_CHANNEL_1)
 8001eb4:	b971      	cbnz	r1, 8001ed4 <HAL_DAC_Start+0x3c>
  {
    tmp1 = hdac->Instance->CR & DAC_CR_TEN1;
 8001eb6:	6819      	ldr	r1, [r3, #0]
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL1;
 8001eb8:	681a      	ldr	r2, [r3, #0]
    /* Check if software trigger enabled */
    if((tmp1 ==  DAC_CR_TEN1) && (tmp2 ==  DAC_CR_TSEL1))
 8001eba:	074d      	lsls	r5, r1, #29
 8001ebc:	d503      	bpl.n	8001ec6 <HAL_DAC_Start+0x2e>
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL1;
 8001ebe:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if((tmp1 ==  DAC_CR_TEN1) && (tmp2 ==  DAC_CR_TSEL1))
 8001ec2:	2a38      	cmp	r2, #56	; 0x38
 8001ec4:	d014      	beq.n	8001ef0 <HAL_DAC_Start+0x58>
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001ec6:	2300      	movs	r3, #0
  hdac->State = HAL_DAC_STATE_READY;
 8001ec8:	2201      	movs	r2, #1
 8001eca:	7102      	strb	r2, [r0, #4]
  __HAL_UNLOCK(hdac);
 8001ecc:	7143      	strb	r3, [r0, #5]
    
  /* Return function status */
  return HAL_OK;
}
 8001ece:	bc30      	pop	{r4, r5}
  return HAL_OK;
 8001ed0:	4618      	mov	r0, r3
}
 8001ed2:	4770      	bx	lr
    tmp1 = hdac->Instance->CR & DAC_CR_TEN2;
 8001ed4:	6819      	ldr	r1, [r3, #0]
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL2;    
 8001ed6:	681a      	ldr	r2, [r3, #0]
    if((tmp1 == DAC_CR_TEN2) && (tmp2 == DAC_CR_TSEL2))
 8001ed8:	0349      	lsls	r1, r1, #13
 8001eda:	d5f4      	bpl.n	8001ec6 <HAL_DAC_Start+0x2e>
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL2;    
 8001edc:	f402 1260 	and.w	r2, r2, #3670016	; 0x380000
    if((tmp1 == DAC_CR_TEN2) && (tmp2 == DAC_CR_TSEL2))
 8001ee0:	f5b2 1f60 	cmp.w	r2, #3670016	; 0x380000
 8001ee4:	d1ef      	bne.n	8001ec6 <HAL_DAC_Start+0x2e>
      hdac->Instance->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG2;
 8001ee6:	685a      	ldr	r2, [r3, #4]
 8001ee8:	f042 0202 	orr.w	r2, r2, #2
 8001eec:	605a      	str	r2, [r3, #4]
 8001eee:	e7ea      	b.n	8001ec6 <HAL_DAC_Start+0x2e>
      hdac->Instance->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG1;
 8001ef0:	685a      	ldr	r2, [r3, #4]
 8001ef2:	4322      	orrs	r2, r4
 8001ef4:	605a      	str	r2, [r3, #4]
 8001ef6:	e7e6      	b.n	8001ec6 <HAL_DAC_Start+0x2e>
  __HAL_LOCK(hdac);
 8001ef8:	2002      	movs	r0, #2
}
 8001efa:	4770      	bx	lr

08001efc <HAL_DAC_ConfigChannel>:
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8001efc:	7943      	ldrb	r3, [r0, #5]
 8001efe:	2b01      	cmp	r3, #1
 8001f00:	d01d      	beq.n	8001f3e <HAL_DAC_ConfigChannel+0x42>
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001f02:	2302      	movs	r3, #2
{
 8001f04:	b470      	push	{r4, r5, r6}
  hdac->State = HAL_DAC_STATE_BUSY;
 8001f06:	7103      	strb	r3, [r0, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001f08:	6804      	ldr	r4, [r0, #0]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8001f0a:	e9d1 3600 	ldrd	r3, r6, [r1]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8001f0e:	f640 75fe 	movw	r5, #4094	; 0xffe
  tmpreg1 = hdac->Instance->CR;
 8001f12:	6821      	ldr	r1, [r4, #0]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8001f14:	4095      	lsls	r5, r2
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8001f16:	4333      	orrs	r3, r6
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8001f18:	ea21 0105 	bic.w	r1, r1, r5
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8001f1c:	4093      	lsls	r3, r2
 8001f1e:	430b      	orrs	r3, r1
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001f20:	6023      	str	r3, [r4, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8001f22:	6823      	ldr	r3, [r4, #0]
 8001f24:	21c0      	movs	r1, #192	; 0xc0
 8001f26:	fa01 f202 	lsl.w	r2, r1, r2
 8001f2a:	ea23 0202 	bic.w	r2, r3, r2
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001f2e:	2101      	movs	r1, #1
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001f30:	2300      	movs	r3, #0
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8001f32:	6022      	str	r2, [r4, #0]
  hdac->State = HAL_DAC_STATE_READY;
 8001f34:	7101      	strb	r1, [r0, #4]
  __HAL_UNLOCK(hdac);
 8001f36:	7143      	strb	r3, [r0, #5]
  
  /* Return function status */
  return HAL_OK;
}
 8001f38:	bc70      	pop	{r4, r5, r6}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	4770      	bx	lr
  __HAL_LOCK(hdac);
 8001f3e:	2202      	movs	r2, #2
}
 8001f40:	4610      	mov	r0, r2
 8001f42:	4770      	bx	lr

08001f44 <HAL_DMA_Abort_IT>:
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f44:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8001f48:	2b02      	cmp	r3, #2
 8001f4a:	d003      	beq.n	8001f54 <HAL_DMA_Abort_IT+0x10>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f4c:	2380      	movs	r3, #128	; 0x80
 8001f4e:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8001f50:	2001      	movs	r0, #1
 8001f52:	4770      	bx	lr
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f54:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 8001f56:	2305      	movs	r3, #5
 8001f58:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8001f5c:	6813      	ldr	r3, [r2, #0]
 8001f5e:	f023 0301 	bic.w	r3, r3, #1
 8001f62:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8001f64:	2000      	movs	r0, #0
}
 8001f66:	4770      	bx	lr

08001f68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f6c:	f8d1 8000 	ldr.w	r8, [r1]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f70:	f8df e228 	ldr.w	lr, [pc, #552]	; 800219c <HAL_GPIO_Init+0x234>
{
 8001f74:	b083      	sub	sp, #12
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f76:	2400      	movs	r4, #0
 8001f78:	e003      	b.n	8001f82 <HAL_GPIO_Init+0x1a>
 8001f7a:	3401      	adds	r4, #1
 8001f7c:	2c10      	cmp	r4, #16
 8001f7e:	f000 809b 	beq.w	80020b8 <HAL_GPIO_Init+0x150>
    ioposition = 0x01U << position;
 8001f82:	2301      	movs	r3, #1
 8001f84:	40a3      	lsls	r3, r4
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f86:	ea08 0203 	and.w	r2, r8, r3
    if(iocurrent == ioposition)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d1f5      	bne.n	8001f7a <HAL_GPIO_Init+0x12>
 8001f8e:	e9d1 6501 	ldrd	r6, r5, [r1, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f92:	f026 0910 	bic.w	r9, r6, #16
 8001f96:	ea4f 0c44 	mov.w	ip, r4, lsl #1
 8001f9a:	2303      	movs	r3, #3
 8001f9c:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 8001fa0:	fa03 f30c 	lsl.w	r3, r3, ip
 8001fa4:	2f01      	cmp	r7, #1
 8001fa6:	ea6f 0303 	mvn.w	r3, r3
 8001faa:	fa05 f50c 	lsl.w	r5, r5, ip
 8001fae:	f240 8086 	bls.w	80020be <HAL_GPIO_Init+0x156>
      temp = GPIOx->PUPDR;
 8001fb2:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001fb4:	401f      	ands	r7, r3
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001fb6:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8001fb8:	60c5      	str	r5, [r0, #12]
      temp = GPIOx->MODER;
 8001fba:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001fbc:	f006 0503 	and.w	r5, r6, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001fc0:	401f      	ands	r7, r3
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001fc2:	fa05 f30c 	lsl.w	r3, r5, ip
 8001fc6:	433b      	orrs	r3, r7
      GPIOx->MODER = temp;
 8001fc8:	6003      	str	r3, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001fca:	00f3      	lsls	r3, r6, #3
 8001fcc:	d5d5      	bpl.n	8001f7a <HAL_GPIO_Init+0x12>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fce:	4d6c      	ldr	r5, [pc, #432]	; (8002180 <HAL_GPIO_Init+0x218>)
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	9301      	str	r3, [sp, #4]
 8001fd4:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8001fd6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fda:	646b      	str	r3, [r5, #68]	; 0x44
 8001fdc:	6c6d      	ldr	r5, [r5, #68]	; 0x44
 8001fde:	f024 0303 	bic.w	r3, r4, #3
 8001fe2:	f405 4580 	and.w	r5, r5, #16384	; 0x4000
 8001fe6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001fea:	9501      	str	r5, [sp, #4]
 8001fec:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ff0:	f004 0503 	and.w	r5, r4, #3
 8001ff4:	ea4f 0985 	mov.w	r9, r5, lsl #2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ff8:	4d62      	ldr	r5, [pc, #392]	; (8002184 <HAL_GPIO_Init+0x21c>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ffa:	9f01      	ldr	r7, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8001ffc:	f8d3 c008 	ldr.w	ip, [r3, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002000:	270f      	movs	r7, #15
 8002002:	fa07 f709 	lsl.w	r7, r7, r9
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002006:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002008:	ea2c 0707 	bic.w	r7, ip, r7
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800200c:	d02d      	beq.n	800206a <HAL_GPIO_Init+0x102>
 800200e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002012:	42a8      	cmp	r0, r5
 8002014:	f000 8084 	beq.w	8002120 <HAL_GPIO_Init+0x1b8>
 8002018:	4d5b      	ldr	r5, [pc, #364]	; (8002188 <HAL_GPIO_Init+0x220>)
 800201a:	42a8      	cmp	r0, r5
 800201c:	f000 8086 	beq.w	800212c <HAL_GPIO_Init+0x1c4>
 8002020:	4d5a      	ldr	r5, [pc, #360]	; (800218c <HAL_GPIO_Init+0x224>)
 8002022:	42a8      	cmp	r0, r5
 8002024:	f000 8088 	beq.w	8002138 <HAL_GPIO_Init+0x1d0>
 8002028:	4d59      	ldr	r5, [pc, #356]	; (8002190 <HAL_GPIO_Init+0x228>)
 800202a:	42a8      	cmp	r0, r5
 800202c:	f000 808a 	beq.w	8002144 <HAL_GPIO_Init+0x1dc>
 8002030:	4d58      	ldr	r5, [pc, #352]	; (8002194 <HAL_GPIO_Init+0x22c>)
 8002032:	42a8      	cmp	r0, r5
 8002034:	f000 8092 	beq.w	800215c <HAL_GPIO_Init+0x1f4>
 8002038:	4d57      	ldr	r5, [pc, #348]	; (8002198 <HAL_GPIO_Init+0x230>)
 800203a:	42a8      	cmp	r0, r5
 800203c:	f000 8094 	beq.w	8002168 <HAL_GPIO_Init+0x200>
 8002040:	f8df c15c 	ldr.w	ip, [pc, #348]	; 80021a0 <HAL_GPIO_Init+0x238>
 8002044:	4560      	cmp	r0, ip
 8002046:	f000 8083 	beq.w	8002150 <HAL_GPIO_Init+0x1e8>
 800204a:	f8df c158 	ldr.w	ip, [pc, #344]	; 80021a4 <HAL_GPIO_Init+0x23c>
 800204e:	4560      	cmp	r0, ip
 8002050:	f000 8090 	beq.w	8002174 <HAL_GPIO_Init+0x20c>
 8002054:	f8df c150 	ldr.w	ip, [pc, #336]	; 80021a8 <HAL_GPIO_Init+0x240>
 8002058:	4560      	cmp	r0, ip
 800205a:	bf0c      	ite	eq
 800205c:	f04f 0c09 	moveq.w	ip, #9
 8002060:	f04f 0c0a 	movne.w	ip, #10
 8002064:	fa0c f509 	lsl.w	r5, ip, r9
 8002068:	432f      	orrs	r7, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 800206a:	609f      	str	r7, [r3, #8]
        temp = EXTI->IMR;
 800206c:	f8de 3000 	ldr.w	r3, [lr]
        temp &= ~((uint32_t)iocurrent);
 8002070:	43d5      	mvns	r5, r2
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002072:	03f7      	lsls	r7, r6, #15
        temp &= ~((uint32_t)iocurrent);
 8002074:	bf54      	ite	pl
 8002076:	402b      	andpl	r3, r5
        {
          temp |= iocurrent;
 8002078:	4313      	orrmi	r3, r2
        }
        EXTI->IMR = temp;
 800207a:	f8ce 3000 	str.w	r3, [lr]

        temp = EXTI->EMR;
 800207e:	f8de 3004 	ldr.w	r3, [lr, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002082:	03b7      	lsls	r7, r6, #14
        temp &= ~((uint32_t)iocurrent);
 8002084:	bf54      	ite	pl
 8002086:	402b      	andpl	r3, r5
        {
          temp |= iocurrent;
 8002088:	4313      	orrmi	r3, r2
        }
        EXTI->EMR = temp;
 800208a:	f8ce 3004 	str.w	r3, [lr, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800208e:	f8de 3008 	ldr.w	r3, [lr, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002092:	02f7      	lsls	r7, r6, #11
        temp &= ~((uint32_t)iocurrent);
 8002094:	bf54      	ite	pl
 8002096:	402b      	andpl	r3, r5
        {
          temp |= iocurrent;
 8002098:	4313      	orrmi	r3, r2
        }
        EXTI->RTSR = temp;
 800209a:	f8ce 3008 	str.w	r3, [lr, #8]

        temp = EXTI->FTSR;
 800209e:	f8de 300c 	ldr.w	r3, [lr, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80020a2:	02b6      	lsls	r6, r6, #10
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020a4:	f104 0401 	add.w	r4, r4, #1
        temp &= ~((uint32_t)iocurrent);
 80020a8:	bf54      	ite	pl
 80020aa:	402b      	andpl	r3, r5
        {
          temp |= iocurrent;
 80020ac:	4313      	orrmi	r3, r2
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020ae:	2c10      	cmp	r4, #16
        }
        EXTI->FTSR = temp;
 80020b0:	f8ce 300c 	str.w	r3, [lr, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020b4:	f47f af65 	bne.w	8001f82 <HAL_GPIO_Init+0x1a>
      }
    }
  }
}
 80020b8:	b003      	add	sp, #12
 80020ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR; 
 80020be:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80020c0:	ea07 0a03 	and.w	sl, r7, r3
        temp |= (GPIO_Init->Speed << (position * 2U));
 80020c4:	68cf      	ldr	r7, [r1, #12]
 80020c6:	fa07 f70c 	lsl.w	r7, r7, ip
 80020ca:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 80020ce:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80020d0:	f8d0 a004 	ldr.w	sl, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80020d4:	f3c6 1700 	ubfx	r7, r6, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020d8:	ea2a 0a02 	bic.w	sl, sl, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80020dc:	40a7      	lsls	r7, r4
 80020de:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OTYPER = temp;
 80020e2:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 80020e4:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80020e6:	401f      	ands	r7, r3
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020e8:	433d      	orrs	r5, r7
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80020ea:	f1b9 0f02 	cmp.w	r9, #2
      GPIOx->PUPDR = temp;
 80020ee:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80020f0:	f47f af63 	bne.w	8001fba <HAL_GPIO_Init+0x52>
        temp = GPIOx->AFR[position >> 3U];
 80020f4:	ea4f 09d4 	mov.w	r9, r4, lsr #3
 80020f8:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80020fc:	f004 0707 	and.w	r7, r4, #7
        temp = GPIOx->AFR[position >> 3U];
 8002100:	f8d9 5020 	ldr.w	r5, [r9, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002104:	00bf      	lsls	r7, r7, #2
 8002106:	f04f 0b0f 	mov.w	fp, #15
 800210a:	fa0b fb07 	lsl.w	fp, fp, r7
 800210e:	ea25 0a0b 	bic.w	sl, r5, fp
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002112:	690d      	ldr	r5, [r1, #16]
 8002114:	40bd      	lsls	r5, r7
 8002116:	ea45 050a 	orr.w	r5, r5, sl
        GPIOx->AFR[position >> 3U] = temp;
 800211a:	f8c9 5020 	str.w	r5, [r9, #32]
 800211e:	e74c      	b.n	8001fba <HAL_GPIO_Init+0x52>
 8002120:	f04f 0c01 	mov.w	ip, #1
 8002124:	fa0c f509 	lsl.w	r5, ip, r9
 8002128:	432f      	orrs	r7, r5
 800212a:	e79e      	b.n	800206a <HAL_GPIO_Init+0x102>
 800212c:	f04f 0c02 	mov.w	ip, #2
 8002130:	fa0c f509 	lsl.w	r5, ip, r9
 8002134:	432f      	orrs	r7, r5
 8002136:	e798      	b.n	800206a <HAL_GPIO_Init+0x102>
 8002138:	f04f 0c03 	mov.w	ip, #3
 800213c:	fa0c f509 	lsl.w	r5, ip, r9
 8002140:	432f      	orrs	r7, r5
 8002142:	e792      	b.n	800206a <HAL_GPIO_Init+0x102>
 8002144:	f04f 0c04 	mov.w	ip, #4
 8002148:	fa0c f509 	lsl.w	r5, ip, r9
 800214c:	432f      	orrs	r7, r5
 800214e:	e78c      	b.n	800206a <HAL_GPIO_Init+0x102>
 8002150:	f04f 0c07 	mov.w	ip, #7
 8002154:	fa0c f509 	lsl.w	r5, ip, r9
 8002158:	432f      	orrs	r7, r5
 800215a:	e786      	b.n	800206a <HAL_GPIO_Init+0x102>
 800215c:	f04f 0c05 	mov.w	ip, #5
 8002160:	fa0c f509 	lsl.w	r5, ip, r9
 8002164:	432f      	orrs	r7, r5
 8002166:	e780      	b.n	800206a <HAL_GPIO_Init+0x102>
 8002168:	f04f 0c06 	mov.w	ip, #6
 800216c:	fa0c f509 	lsl.w	r5, ip, r9
 8002170:	432f      	orrs	r7, r5
 8002172:	e77a      	b.n	800206a <HAL_GPIO_Init+0x102>
 8002174:	f04f 0c08 	mov.w	ip, #8
 8002178:	fa0c f509 	lsl.w	r5, ip, r9
 800217c:	432f      	orrs	r7, r5
 800217e:	e774      	b.n	800206a <HAL_GPIO_Init+0x102>
 8002180:	40023800 	.word	0x40023800
 8002184:	40020000 	.word	0x40020000
 8002188:	40020800 	.word	0x40020800
 800218c:	40020c00 	.word	0x40020c00
 8002190:	40021000 	.word	0x40021000
 8002194:	40021400 	.word	0x40021400
 8002198:	40021800 	.word	0x40021800
 800219c:	40013c00 	.word	0x40013c00
 80021a0:	40021c00 	.word	0x40021c00
 80021a4:	40022000 	.word	0x40022000
 80021a8:	40022400 	.word	0x40022400

080021ac <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021ac:	b902      	cbnz	r2, 80021b0 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80021ae:	0409      	lsls	r1, r1, #16
 80021b0:	6181      	str	r1, [r0, #24]
  }
}
 80021b2:	4770      	bx	lr

080021b4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80021b4:	b530      	push	{r4, r5, lr}
 80021b6:	b083      	sub	sp, #12
  uint32_t tickstart = 0U;

  __HAL_RCC_PWR_CLK_ENABLE();
 80021b8:	4b19      	ldr	r3, [pc, #100]	; (8002220 <HAL_PWREx_EnableOverDrive+0x6c>)
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80021ba:	491a      	ldr	r1, [pc, #104]	; (8002224 <HAL_PWREx_EnableOverDrive+0x70>)

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80021bc:	4c1a      	ldr	r4, [pc, #104]	; (8002228 <HAL_PWREx_EnableOverDrive+0x74>)
  __HAL_RCC_PWR_CLK_ENABLE();
 80021be:	2200      	movs	r2, #0
 80021c0:	9201      	str	r2, [sp, #4]
 80021c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80021c4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80021c8:	641a      	str	r2, [r3, #64]	; 0x40
 80021ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021d0:	9301      	str	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 80021d2:	2301      	movs	r3, #1
  __HAL_RCC_PWR_CLK_ENABLE();
 80021d4:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 80021d6:	600b      	str	r3, [r1, #0]
  tickstart = HAL_GetTick();
 80021d8:	f7ff fdc0 	bl	8001d5c <HAL_GetTick>
 80021dc:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80021de:	e005      	b.n	80021ec <HAL_PWREx_EnableOverDrive+0x38>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80021e0:	f7ff fdbc 	bl	8001d5c <HAL_GetTick>
 80021e4:	1b40      	subs	r0, r0, r5
 80021e6:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80021ea:	d816      	bhi.n	800221a <HAL_PWREx_EnableOverDrive+0x66>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80021ec:	6863      	ldr	r3, [r4, #4]
 80021ee:	03da      	lsls	r2, r3, #15
 80021f0:	d5f6      	bpl.n	80021e0 <HAL_PWREx_EnableOverDrive+0x2c>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80021f2:	4b0e      	ldr	r3, [pc, #56]	; (800222c <HAL_PWREx_EnableOverDrive+0x78>)

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80021f4:	4c0c      	ldr	r4, [pc, #48]	; (8002228 <HAL_PWREx_EnableOverDrive+0x74>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80021f6:	2201      	movs	r2, #1
 80021f8:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 80021fa:	f7ff fdaf 	bl	8001d5c <HAL_GetTick>
 80021fe:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002200:	e005      	b.n	800220e <HAL_PWREx_EnableOverDrive+0x5a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002202:	f7ff fdab 	bl	8001d5c <HAL_GetTick>
 8002206:	1b40      	subs	r0, r0, r5
 8002208:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800220c:	d805      	bhi.n	800221a <HAL_PWREx_EnableOverDrive+0x66>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800220e:	6863      	ldr	r3, [r4, #4]
 8002210:	039b      	lsls	r3, r3, #14
 8002212:	d5f6      	bpl.n	8002202 <HAL_PWREx_EnableOverDrive+0x4e>
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 8002214:	2000      	movs	r0, #0
}
 8002216:	b003      	add	sp, #12
 8002218:	bd30      	pop	{r4, r5, pc}
      return HAL_TIMEOUT;
 800221a:	2003      	movs	r0, #3
}
 800221c:	b003      	add	sp, #12
 800221e:	bd30      	pop	{r4, r5, pc}
 8002220:	40023800 	.word	0x40023800
 8002224:	420e0040 	.word	0x420e0040
 8002228:	40007000 	.word	0x40007000
 800222c:	420e0044 	.word	0x420e0044

08002230 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002230:	2800      	cmp	r0, #0
 8002232:	f000 8132 	beq.w	800249a <HAL_RCC_OscConfig+0x26a>
{
 8002236:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800223a:	6803      	ldr	r3, [r0, #0]
 800223c:	07dd      	lsls	r5, r3, #31
{
 800223e:	b082      	sub	sp, #8
 8002240:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002242:	d52f      	bpl.n	80022a4 <HAL_RCC_OscConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002244:	49ac      	ldr	r1, [pc, #688]	; (80024f8 <HAL_RCC_OscConfig+0x2c8>)
 8002246:	688a      	ldr	r2, [r1, #8]
 8002248:	f002 020c 	and.w	r2, r2, #12
 800224c:	2a04      	cmp	r2, #4
 800224e:	f000 80ea 	beq.w	8002426 <HAL_RCC_OscConfig+0x1f6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002252:	688a      	ldr	r2, [r1, #8]
 8002254:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002258:	2a08      	cmp	r2, #8
 800225a:	f000 80e0 	beq.w	800241e <HAL_RCC_OscConfig+0x1ee>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800225e:	6863      	ldr	r3, [r4, #4]
 8002260:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002264:	f000 80e9 	beq.w	800243a <HAL_RCC_OscConfig+0x20a>
 8002268:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800226c:	f000 8178 	beq.w	8002560 <HAL_RCC_OscConfig+0x330>
 8002270:	4da1      	ldr	r5, [pc, #644]	; (80024f8 <HAL_RCC_OscConfig+0x2c8>)
 8002272:	682a      	ldr	r2, [r5, #0]
 8002274:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002278:	602a      	str	r2, [r5, #0]
 800227a:	682a      	ldr	r2, [r5, #0]
 800227c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002280:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002282:	2b00      	cmp	r3, #0
 8002284:	f040 80de 	bne.w	8002444 <HAL_RCC_OscConfig+0x214>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002288:	f7ff fd68 	bl	8001d5c <HAL_GetTick>
 800228c:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800228e:	e005      	b.n	800229c <HAL_RCC_OscConfig+0x6c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002290:	f7ff fd64 	bl	8001d5c <HAL_GetTick>
 8002294:	1b80      	subs	r0, r0, r6
 8002296:	2864      	cmp	r0, #100	; 0x64
 8002298:	f200 80f2 	bhi.w	8002480 <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800229c:	682b      	ldr	r3, [r5, #0]
 800229e:	039b      	lsls	r3, r3, #14
 80022a0:	d4f6      	bmi.n	8002290 <HAL_RCC_OscConfig+0x60>
 80022a2:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022a4:	079f      	lsls	r7, r3, #30
 80022a6:	d475      	bmi.n	8002394 <HAL_RCC_OscConfig+0x164>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022a8:	071a      	lsls	r2, r3, #28
 80022aa:	d515      	bpl.n	80022d8 <HAL_RCC_OscConfig+0xa8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80022ac:	6963      	ldr	r3, [r4, #20]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	f000 80a5 	beq.w	80023fe <HAL_RCC_OscConfig+0x1ce>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022b4:	4b91      	ldr	r3, [pc, #580]	; (80024fc <HAL_RCC_OscConfig+0x2cc>)

      /* Get Start Tick*/
      tickstart = HAL_GetTick();

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022b6:	4d90      	ldr	r5, [pc, #576]	; (80024f8 <HAL_RCC_OscConfig+0x2c8>)
      __HAL_RCC_LSI_ENABLE();
 80022b8:	2201      	movs	r2, #1
 80022ba:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80022bc:	f7ff fd4e 	bl	8001d5c <HAL_GetTick>
 80022c0:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022c2:	e005      	b.n	80022d0 <HAL_RCC_OscConfig+0xa0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022c4:	f7ff fd4a 	bl	8001d5c <HAL_GetTick>
 80022c8:	1b80      	subs	r0, r0, r6
 80022ca:	2802      	cmp	r0, #2
 80022cc:	f200 80d8 	bhi.w	8002480 <HAL_RCC_OscConfig+0x250>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022d0:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80022d2:	079b      	lsls	r3, r3, #30
 80022d4:	d5f6      	bpl.n	80022c4 <HAL_RCC_OscConfig+0x94>
 80022d6:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022d8:	0758      	lsls	r0, r3, #29
 80022da:	d53b      	bpl.n	8002354 <HAL_RCC_OscConfig+0x124>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022dc:	4a86      	ldr	r2, [pc, #536]	; (80024f8 <HAL_RCC_OscConfig+0x2c8>)
 80022de:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80022e0:	f013 5380 	ands.w	r3, r3, #268435456	; 0x10000000
 80022e4:	f040 80db 	bne.w	800249e <HAL_RCC_OscConfig+0x26e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022e8:	9301      	str	r3, [sp, #4]
 80022ea:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80022ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022f0:	6413      	str	r3, [r2, #64]	; 0x40
 80022f2:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80022f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022f8:	9301      	str	r3, [sp, #4]
 80022fa:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80022fc:	2601      	movs	r6, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022fe:	4d80      	ldr	r5, [pc, #512]	; (8002500 <HAL_RCC_OscConfig+0x2d0>)
 8002300:	682a      	ldr	r2, [r5, #0]
 8002302:	05d1      	lsls	r1, r2, #23
 8002304:	f140 80ac 	bpl.w	8002460 <HAL_RCC_OscConfig+0x230>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002308:	68a3      	ldr	r3, [r4, #8]
 800230a:	2b01      	cmp	r3, #1
 800230c:	f000 80c9 	beq.w	80024a2 <HAL_RCC_OscConfig+0x272>
 8002310:	2b05      	cmp	r3, #5
 8002312:	f000 812f 	beq.w	8002574 <HAL_RCC_OscConfig+0x344>
 8002316:	4d78      	ldr	r5, [pc, #480]	; (80024f8 <HAL_RCC_OscConfig+0x2c8>)
 8002318:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 800231a:	f022 0201 	bic.w	r2, r2, #1
 800231e:	672a      	str	r2, [r5, #112]	; 0x70
 8002320:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8002322:	f022 0204 	bic.w	r2, r2, #4
 8002326:	672a      	str	r2, [r5, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002328:	2b00      	cmp	r3, #0
 800232a:	f040 80bf 	bne.w	80024ac <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800232e:	f7ff fd15 	bl	8001d5c <HAL_GetTick>

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002332:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8002336:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002338:	e006      	b.n	8002348 <HAL_RCC_OscConfig+0x118>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800233a:	f7ff fd0f 	bl	8001d5c <HAL_GetTick>
 800233e:	eba0 0008 	sub.w	r0, r0, r8
 8002342:	42b8      	cmp	r0, r7
 8002344:	f200 809c 	bhi.w	8002480 <HAL_RCC_OscConfig+0x250>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002348:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800234a:	0798      	lsls	r0, r3, #30
 800234c:	d4f5      	bmi.n	800233a <HAL_RCC_OscConfig+0x10a>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800234e:	2e00      	cmp	r6, #0
 8002350:	f040 80dc 	bne.w	800250c <HAL_RCC_OscConfig+0x2dc>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002354:	69a0      	ldr	r0, [r4, #24]
 8002356:	b1c8      	cbz	r0, 800238c <HAL_RCC_OscConfig+0x15c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002358:	4d67      	ldr	r5, [pc, #412]	; (80024f8 <HAL_RCC_OscConfig+0x2c8>)
 800235a:	68aa      	ldr	r2, [r5, #8]
 800235c:	f002 020c 	and.w	r2, r2, #12
 8002360:	2a08      	cmp	r2, #8
 8002362:	f000 80d9 	beq.w	8002518 <HAL_RCC_OscConfig+0x2e8>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002366:	4a67      	ldr	r2, [pc, #412]	; (8002504 <HAL_RCC_OscConfig+0x2d4>)
 8002368:	2100      	movs	r1, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800236a:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 800236c:	6011      	str	r1, [r2, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800236e:	f000 810b 	beq.w	8002588 <HAL_RCC_OscConfig+0x358>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002372:	f7ff fcf3 	bl	8001d5c <HAL_GetTick>

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002376:	462c      	mov	r4, r5
        tickstart = HAL_GetTick();
 8002378:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800237a:	e004      	b.n	8002386 <HAL_RCC_OscConfig+0x156>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800237c:	f7ff fcee 	bl	8001d5c <HAL_GetTick>
 8002380:	1b40      	subs	r0, r0, r5
 8002382:	2802      	cmp	r0, #2
 8002384:	d87c      	bhi.n	8002480 <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002386:	6823      	ldr	r3, [r4, #0]
 8002388:	019b      	lsls	r3, r3, #6
 800238a:	d4f7      	bmi.n	800237c <HAL_RCC_OscConfig+0x14c>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 800238c:	2000      	movs	r0, #0
}
 800238e:	b002      	add	sp, #8
 8002390:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002394:	4a58      	ldr	r2, [pc, #352]	; (80024f8 <HAL_RCC_OscConfig+0x2c8>)
 8002396:	6891      	ldr	r1, [r2, #8]
 8002398:	f011 0f0c 	tst.w	r1, #12
 800239c:	d024      	beq.n	80023e8 <HAL_RCC_OscConfig+0x1b8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800239e:	6891      	ldr	r1, [r2, #8]
 80023a0:	f001 010c 	and.w	r1, r1, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80023a4:	2908      	cmp	r1, #8
 80023a6:	d01c      	beq.n	80023e2 <HAL_RCC_OscConfig+0x1b2>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80023a8:	68e3      	ldr	r3, [r4, #12]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	f000 8092 	beq.w	80024d4 <HAL_RCC_OscConfig+0x2a4>
        __HAL_RCC_HSI_ENABLE();
 80023b0:	4b55      	ldr	r3, [pc, #340]	; (8002508 <HAL_RCC_OscConfig+0x2d8>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023b2:	4d51      	ldr	r5, [pc, #324]	; (80024f8 <HAL_RCC_OscConfig+0x2c8>)
        __HAL_RCC_HSI_ENABLE();
 80023b4:	2201      	movs	r2, #1
 80023b6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80023b8:	f7ff fcd0 	bl	8001d5c <HAL_GetTick>
 80023bc:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023be:	e004      	b.n	80023ca <HAL_RCC_OscConfig+0x19a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023c0:	f7ff fccc 	bl	8001d5c <HAL_GetTick>
 80023c4:	1b80      	subs	r0, r0, r6
 80023c6:	2802      	cmp	r0, #2
 80023c8:	d85a      	bhi.n	8002480 <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023ca:	682b      	ldr	r3, [r5, #0]
 80023cc:	0798      	lsls	r0, r3, #30
 80023ce:	d5f7      	bpl.n	80023c0 <HAL_RCC_OscConfig+0x190>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023d0:	682b      	ldr	r3, [r5, #0]
 80023d2:	6922      	ldr	r2, [r4, #16]
 80023d4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80023d8:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80023dc:	602b      	str	r3, [r5, #0]
 80023de:	6823      	ldr	r3, [r4, #0]
 80023e0:	e762      	b.n	80022a8 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023e2:	6852      	ldr	r2, [r2, #4]
 80023e4:	0256      	lsls	r6, r2, #9
 80023e6:	d4df      	bmi.n	80023a8 <HAL_RCC_OscConfig+0x178>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023e8:	4a43      	ldr	r2, [pc, #268]	; (80024f8 <HAL_RCC_OscConfig+0x2c8>)
 80023ea:	6812      	ldr	r2, [r2, #0]
 80023ec:	0795      	lsls	r5, r2, #30
 80023ee:	d54b      	bpl.n	8002488 <HAL_RCC_OscConfig+0x258>
 80023f0:	68e2      	ldr	r2, [r4, #12]
 80023f2:	2a01      	cmp	r2, #1
 80023f4:	d048      	beq.n	8002488 <HAL_RCC_OscConfig+0x258>
        return HAL_ERROR;
 80023f6:	2001      	movs	r0, #1
}
 80023f8:	b002      	add	sp, #8
 80023fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 80023fe:	4a3f      	ldr	r2, [pc, #252]	; (80024fc <HAL_RCC_OscConfig+0x2cc>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002400:	4d3d      	ldr	r5, [pc, #244]	; (80024f8 <HAL_RCC_OscConfig+0x2c8>)
      __HAL_RCC_LSI_DISABLE();
 8002402:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8002404:	f7ff fcaa 	bl	8001d5c <HAL_GetTick>
 8002408:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800240a:	e004      	b.n	8002416 <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800240c:	f7ff fca6 	bl	8001d5c <HAL_GetTick>
 8002410:	1b80      	subs	r0, r0, r6
 8002412:	2802      	cmp	r0, #2
 8002414:	d834      	bhi.n	8002480 <HAL_RCC_OscConfig+0x250>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002416:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8002418:	079f      	lsls	r7, r3, #30
 800241a:	d4f7      	bmi.n	800240c <HAL_RCC_OscConfig+0x1dc>
 800241c:	e75b      	b.n	80022d6 <HAL_RCC_OscConfig+0xa6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800241e:	684a      	ldr	r2, [r1, #4]
 8002420:	0250      	lsls	r0, r2, #9
 8002422:	f57f af1c 	bpl.w	800225e <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002426:	4a34      	ldr	r2, [pc, #208]	; (80024f8 <HAL_RCC_OscConfig+0x2c8>)
 8002428:	6812      	ldr	r2, [r2, #0]
 800242a:	0391      	lsls	r1, r2, #14
 800242c:	f57f af3a 	bpl.w	80022a4 <HAL_RCC_OscConfig+0x74>
 8002430:	6862      	ldr	r2, [r4, #4]
 8002432:	2a00      	cmp	r2, #0
 8002434:	f47f af36 	bne.w	80022a4 <HAL_RCC_OscConfig+0x74>
 8002438:	e7dd      	b.n	80023f6 <HAL_RCC_OscConfig+0x1c6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800243a:	4a2f      	ldr	r2, [pc, #188]	; (80024f8 <HAL_RCC_OscConfig+0x2c8>)
 800243c:	6813      	ldr	r3, [r2, #0]
 800243e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002442:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002444:	f7ff fc8a 	bl	8001d5c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002448:	4d2b      	ldr	r5, [pc, #172]	; (80024f8 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 800244a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800244c:	e004      	b.n	8002458 <HAL_RCC_OscConfig+0x228>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800244e:	f7ff fc85 	bl	8001d5c <HAL_GetTick>
 8002452:	1b80      	subs	r0, r0, r6
 8002454:	2864      	cmp	r0, #100	; 0x64
 8002456:	d813      	bhi.n	8002480 <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002458:	682b      	ldr	r3, [r5, #0]
 800245a:	039a      	lsls	r2, r3, #14
 800245c:	d5f7      	bpl.n	800244e <HAL_RCC_OscConfig+0x21e>
 800245e:	e720      	b.n	80022a2 <HAL_RCC_OscConfig+0x72>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002460:	682a      	ldr	r2, [r5, #0]
 8002462:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002466:	602a      	str	r2, [r5, #0]
      tickstart = HAL_GetTick();
 8002468:	f7ff fc78 	bl	8001d5c <HAL_GetTick>
 800246c:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800246e:	682b      	ldr	r3, [r5, #0]
 8002470:	05da      	lsls	r2, r3, #23
 8002472:	f53f af49 	bmi.w	8002308 <HAL_RCC_OscConfig+0xd8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002476:	f7ff fc71 	bl	8001d5c <HAL_GetTick>
 800247a:	1bc0      	subs	r0, r0, r7
 800247c:	2802      	cmp	r0, #2
 800247e:	d9f6      	bls.n	800246e <HAL_RCC_OscConfig+0x23e>
            return HAL_TIMEOUT;
 8002480:	2003      	movs	r0, #3
}
 8002482:	b002      	add	sp, #8
 8002484:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002488:	491b      	ldr	r1, [pc, #108]	; (80024f8 <HAL_RCC_OscConfig+0x2c8>)
 800248a:	6920      	ldr	r0, [r4, #16]
 800248c:	680a      	ldr	r2, [r1, #0]
 800248e:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8002492:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8002496:	600a      	str	r2, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002498:	e706      	b.n	80022a8 <HAL_RCC_OscConfig+0x78>
    return HAL_ERROR;
 800249a:	2001      	movs	r0, #1
}
 800249c:	4770      	bx	lr
    FlagStatus       pwrclkchanged = RESET;
 800249e:	2600      	movs	r6, #0
 80024a0:	e72d      	b.n	80022fe <HAL_RCC_OscConfig+0xce>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024a2:	4a15      	ldr	r2, [pc, #84]	; (80024f8 <HAL_RCC_OscConfig+0x2c8>)
 80024a4:	6f13      	ldr	r3, [r2, #112]	; 0x70
 80024a6:	f043 0301 	orr.w	r3, r3, #1
 80024aa:	6713      	str	r3, [r2, #112]	; 0x70
      tickstart = HAL_GetTick();
 80024ac:	f7ff fc56 	bl	8001d5c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024b0:	4d11      	ldr	r5, [pc, #68]	; (80024f8 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 80024b2:	4680      	mov	r8, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024b4:	f241 3788 	movw	r7, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024b8:	e005      	b.n	80024c6 <HAL_RCC_OscConfig+0x296>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024ba:	f7ff fc4f 	bl	8001d5c <HAL_GetTick>
 80024be:	eba0 0008 	sub.w	r0, r0, r8
 80024c2:	42b8      	cmp	r0, r7
 80024c4:	d8dc      	bhi.n	8002480 <HAL_RCC_OscConfig+0x250>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024c6:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80024c8:	079b      	lsls	r3, r3, #30
 80024ca:	d5f6      	bpl.n	80024ba <HAL_RCC_OscConfig+0x28a>
    if(pwrclkchanged == SET)
 80024cc:	2e00      	cmp	r6, #0
 80024ce:	f43f af41 	beq.w	8002354 <HAL_RCC_OscConfig+0x124>
 80024d2:	e01b      	b.n	800250c <HAL_RCC_OscConfig+0x2dc>
        __HAL_RCC_HSI_DISABLE();
 80024d4:	4a0c      	ldr	r2, [pc, #48]	; (8002508 <HAL_RCC_OscConfig+0x2d8>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024d6:	4d08      	ldr	r5, [pc, #32]	; (80024f8 <HAL_RCC_OscConfig+0x2c8>)
        __HAL_RCC_HSI_DISABLE();
 80024d8:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80024da:	f7ff fc3f 	bl	8001d5c <HAL_GetTick>
 80024de:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024e0:	e004      	b.n	80024ec <HAL_RCC_OscConfig+0x2bc>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024e2:	f7ff fc3b 	bl	8001d5c <HAL_GetTick>
 80024e6:	1b80      	subs	r0, r0, r6
 80024e8:	2802      	cmp	r0, #2
 80024ea:	d8c9      	bhi.n	8002480 <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024ec:	682b      	ldr	r3, [r5, #0]
 80024ee:	0799      	lsls	r1, r3, #30
 80024f0:	d4f7      	bmi.n	80024e2 <HAL_RCC_OscConfig+0x2b2>
 80024f2:	6823      	ldr	r3, [r4, #0]
 80024f4:	e6d8      	b.n	80022a8 <HAL_RCC_OscConfig+0x78>
 80024f6:	bf00      	nop
 80024f8:	40023800 	.word	0x40023800
 80024fc:	42470e80 	.word	0x42470e80
 8002500:	40007000 	.word	0x40007000
 8002504:	42470060 	.word	0x42470060
 8002508:	42470000 	.word	0x42470000
      __HAL_RCC_PWR_CLK_DISABLE();
 800250c:	4a35      	ldr	r2, [pc, #212]	; (80025e4 <HAL_RCC_OscConfig+0x3b4>)
 800250e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002510:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002514:	6413      	str	r3, [r2, #64]	; 0x40
 8002516:	e71d      	b.n	8002354 <HAL_RCC_OscConfig+0x124>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002518:	2801      	cmp	r0, #1
 800251a:	f43f af6d 	beq.w	80023f8 <HAL_RCC_OscConfig+0x1c8>
        pll_config = RCC->PLLCFGR;
 800251e:	686b      	ldr	r3, [r5, #4]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002520:	69e2      	ldr	r2, [r4, #28]
 8002522:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
 8002526:	4291      	cmp	r1, r2
 8002528:	f47f af65 	bne.w	80023f6 <HAL_RCC_OscConfig+0x1c6>
 800252c:	6a22      	ldr	r2, [r4, #32]
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800252e:	f003 013f 	and.w	r1, r3, #63	; 0x3f
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002532:	4291      	cmp	r1, r2
 8002534:	f47f af5f 	bne.w	80023f6 <HAL_RCC_OscConfig+0x1c6>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002538:	f647 72c0 	movw	r2, #32704	; 0x7fc0
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800253c:	6a61      	ldr	r1, [r4, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800253e:	401a      	ands	r2, r3
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002540:	428a      	cmp	r2, r1
 8002542:	f47f af58 	bne.w	80023f6 <HAL_RCC_OscConfig+0x1c6>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002546:	6aa2      	ldr	r2, [r4, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002548:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800254c:	4291      	cmp	r1, r2
 800254e:	f47f af52 	bne.w	80023f6 <HAL_RCC_OscConfig+0x1c6>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002552:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002554:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    return HAL_ERROR;
 8002558:	1a18      	subs	r0, r3, r0
 800255a:	bf18      	it	ne
 800255c:	2001      	movne	r0, #1
 800255e:	e74b      	b.n	80023f8 <HAL_RCC_OscConfig+0x1c8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002560:	4b20      	ldr	r3, [pc, #128]	; (80025e4 <HAL_RCC_OscConfig+0x3b4>)
 8002562:	681a      	ldr	r2, [r3, #0]
 8002564:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002568:	601a      	str	r2, [r3, #0]
 800256a:	681a      	ldr	r2, [r3, #0]
 800256c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002570:	601a      	str	r2, [r3, #0]
 8002572:	e767      	b.n	8002444 <HAL_RCC_OscConfig+0x214>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002574:	4b1b      	ldr	r3, [pc, #108]	; (80025e4 <HAL_RCC_OscConfig+0x3b4>)
 8002576:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002578:	f042 0204 	orr.w	r2, r2, #4
 800257c:	671a      	str	r2, [r3, #112]	; 0x70
 800257e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002580:	f042 0201 	orr.w	r2, r2, #1
 8002584:	671a      	str	r2, [r3, #112]	; 0x70
 8002586:	e791      	b.n	80024ac <HAL_RCC_OscConfig+0x27c>
        tickstart = HAL_GetTick();
 8002588:	f7ff fbe8 	bl	8001d5c <HAL_GetTick>
 800258c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800258e:	e005      	b.n	800259c <HAL_RCC_OscConfig+0x36c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002590:	f7ff fbe4 	bl	8001d5c <HAL_GetTick>
 8002594:	1b80      	subs	r0, r0, r6
 8002596:	2802      	cmp	r0, #2
 8002598:	f63f af72 	bhi.w	8002480 <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800259c:	682b      	ldr	r3, [r5, #0]
 800259e:	0199      	lsls	r1, r3, #6
 80025a0:	d4f6      	bmi.n	8002590 <HAL_RCC_OscConfig+0x360>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80025a2:	e9d4 3607 	ldrd	r3, r6, [r4, #28]
 80025a6:	e9d4 0209 	ldrd	r0, r2, [r4, #36]	; 0x24
 80025aa:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025ac:	4c0d      	ldr	r4, [pc, #52]	; (80025e4 <HAL_RCC_OscConfig+0x3b4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80025ae:	4333      	orrs	r3, r6
 80025b0:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80025b4:	0852      	lsrs	r2, r2, #1
 80025b6:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80025ba:	3a01      	subs	r2, #1
        __HAL_RCC_PLL_ENABLE();
 80025bc:	490a      	ldr	r1, [pc, #40]	; (80025e8 <HAL_RCC_OscConfig+0x3b8>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80025be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
        __HAL_RCC_PLL_ENABLE();
 80025c2:	2201      	movs	r2, #1
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80025c4:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80025c6:	600a      	str	r2, [r1, #0]
        tickstart = HAL_GetTick();
 80025c8:	f7ff fbc8 	bl	8001d5c <HAL_GetTick>
 80025cc:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025ce:	e005      	b.n	80025dc <HAL_RCC_OscConfig+0x3ac>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025d0:	f7ff fbc4 	bl	8001d5c <HAL_GetTick>
 80025d4:	1b40      	subs	r0, r0, r5
 80025d6:	2802      	cmp	r0, #2
 80025d8:	f63f af52 	bhi.w	8002480 <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025dc:	6823      	ldr	r3, [r4, #0]
 80025de:	019a      	lsls	r2, r3, #6
 80025e0:	d5f6      	bpl.n	80025d0 <HAL_RCC_OscConfig+0x3a0>
 80025e2:	e6d3      	b.n	800238c <HAL_RCC_OscConfig+0x15c>
 80025e4:	40023800 	.word	0x40023800
 80025e8:	42470060 	.word	0x42470060

080025ec <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80025ec:	4917      	ldr	r1, [pc, #92]	; (800264c <HAL_RCC_GetSysClockFreq+0x60>)
{
 80025ee:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80025f0:	688b      	ldr	r3, [r1, #8]
 80025f2:	f003 030c 	and.w	r3, r3, #12
 80025f6:	2b04      	cmp	r3, #4
 80025f8:	d01b      	beq.n	8002632 <HAL_RCC_GetSysClockFreq+0x46>
 80025fa:	2b08      	cmp	r3, #8
 80025fc:	d117      	bne.n	800262e <HAL_RCC_GetSysClockFreq+0x42>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80025fe:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002600:	684b      	ldr	r3, [r1, #4]
 8002602:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002606:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800260a:	d114      	bne.n	8002636 <HAL_RCC_GetSysClockFreq+0x4a>
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800260c:	6849      	ldr	r1, [r1, #4]
 800260e:	4810      	ldr	r0, [pc, #64]	; (8002650 <HAL_RCC_GetSysClockFreq+0x64>)
 8002610:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8002614:	fba1 0100 	umull	r0, r1, r1, r0
 8002618:	f7fe fad6 	bl	8000bc8 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800261c:	4b0b      	ldr	r3, [pc, #44]	; (800264c <HAL_RCC_GetSysClockFreq+0x60>)
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8002624:	3301      	adds	r3, #1
 8002626:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8002628:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800262c:	bd08      	pop	{r3, pc}
      sysclockfreq = HSI_VALUE;
 800262e:	4808      	ldr	r0, [pc, #32]	; (8002650 <HAL_RCC_GetSysClockFreq+0x64>)
}
 8002630:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8002632:	4808      	ldr	r0, [pc, #32]	; (8002654 <HAL_RCC_GetSysClockFreq+0x68>)
}
 8002634:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002636:	684b      	ldr	r3, [r1, #4]
 8002638:	4806      	ldr	r0, [pc, #24]	; (8002654 <HAL_RCC_GetSysClockFreq+0x68>)
 800263a:	f3c3 1388 	ubfx	r3, r3, #6, #9
 800263e:	fba3 0100 	umull	r0, r1, r3, r0
 8002642:	2300      	movs	r3, #0
 8002644:	f7fe fac0 	bl	8000bc8 <__aeabi_uldivmod>
 8002648:	e7e8      	b.n	800261c <HAL_RCC_GetSysClockFreq+0x30>
 800264a:	bf00      	nop
 800264c:	40023800 	.word	0x40023800
 8002650:	00f42400 	.word	0x00f42400
 8002654:	007a1200 	.word	0x007a1200

08002658 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8002658:	b160      	cbz	r0, 8002674 <HAL_RCC_ClockConfig+0x1c>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800265a:	4a49      	ldr	r2, [pc, #292]	; (8002780 <HAL_RCC_ClockConfig+0x128>)
 800265c:	6813      	ldr	r3, [r2, #0]
 800265e:	f003 030f 	and.w	r3, r3, #15
 8002662:	428b      	cmp	r3, r1
 8002664:	d208      	bcs.n	8002678 <HAL_RCC_ClockConfig+0x20>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002666:	b2cb      	uxtb	r3, r1
 8002668:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800266a:	6813      	ldr	r3, [r2, #0]
 800266c:	f003 030f 	and.w	r3, r3, #15
 8002670:	428b      	cmp	r3, r1
 8002672:	d001      	beq.n	8002678 <HAL_RCC_ClockConfig+0x20>
    return HAL_ERROR;
 8002674:	2001      	movs	r0, #1
}
 8002676:	4770      	bx	lr
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002678:	6803      	ldr	r3, [r0, #0]
{
 800267a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800267e:	079d      	lsls	r5, r3, #30
 8002680:	d514      	bpl.n	80026ac <HAL_RCC_ClockConfig+0x54>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002682:	075c      	lsls	r4, r3, #29
 8002684:	d504      	bpl.n	8002690 <HAL_RCC_ClockConfig+0x38>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002686:	4c3f      	ldr	r4, [pc, #252]	; (8002784 <HAL_RCC_ClockConfig+0x12c>)
 8002688:	68a2      	ldr	r2, [r4, #8]
 800268a:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 800268e:	60a2      	str	r2, [r4, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002690:	071a      	lsls	r2, r3, #28
 8002692:	d504      	bpl.n	800269e <HAL_RCC_ClockConfig+0x46>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002694:	4c3b      	ldr	r4, [pc, #236]	; (8002784 <HAL_RCC_ClockConfig+0x12c>)
 8002696:	68a2      	ldr	r2, [r4, #8]
 8002698:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 800269c:	60a2      	str	r2, [r4, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800269e:	4c39      	ldr	r4, [pc, #228]	; (8002784 <HAL_RCC_ClockConfig+0x12c>)
 80026a0:	6885      	ldr	r5, [r0, #8]
 80026a2:	68a2      	ldr	r2, [r4, #8]
 80026a4:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80026a8:	432a      	orrs	r2, r5
 80026aa:	60a2      	str	r2, [r4, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026ac:	07df      	lsls	r7, r3, #31
 80026ae:	4604      	mov	r4, r0
 80026b0:	460d      	mov	r5, r1
 80026b2:	d522      	bpl.n	80026fa <HAL_RCC_ClockConfig+0xa2>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026b4:	6842      	ldr	r2, [r0, #4]
 80026b6:	2a01      	cmp	r2, #1
 80026b8:	d057      	beq.n	800276a <HAL_RCC_ClockConfig+0x112>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026ba:	1e93      	subs	r3, r2, #2
 80026bc:	2b01      	cmp	r3, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026be:	4b31      	ldr	r3, [pc, #196]	; (8002784 <HAL_RCC_ClockConfig+0x12c>)
 80026c0:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026c2:	d959      	bls.n	8002778 <HAL_RCC_ClockConfig+0x120>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026c4:	0799      	lsls	r1, r3, #30
 80026c6:	d525      	bpl.n	8002714 <HAL_RCC_ClockConfig+0xbc>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026c8:	4e2e      	ldr	r6, [pc, #184]	; (8002784 <HAL_RCC_ClockConfig+0x12c>)
 80026ca:	68b3      	ldr	r3, [r6, #8]
 80026cc:	f023 0303 	bic.w	r3, r3, #3
 80026d0:	4313      	orrs	r3, r2
 80026d2:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 80026d4:	f7ff fb42 	bl	8001d5c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026d8:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80026dc:	4680      	mov	r8, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026de:	e005      	b.n	80026ec <HAL_RCC_ClockConfig+0x94>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026e0:	f7ff fb3c 	bl	8001d5c <HAL_GetTick>
 80026e4:	eba0 0008 	sub.w	r0, r0, r8
 80026e8:	42b8      	cmp	r0, r7
 80026ea:	d843      	bhi.n	8002774 <HAL_RCC_ClockConfig+0x11c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026ec:	68b3      	ldr	r3, [r6, #8]
 80026ee:	6862      	ldr	r2, [r4, #4]
 80026f0:	f003 030c 	and.w	r3, r3, #12
 80026f4:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80026f8:	d1f2      	bne.n	80026e0 <HAL_RCC_ClockConfig+0x88>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80026fa:	4a21      	ldr	r2, [pc, #132]	; (8002780 <HAL_RCC_ClockConfig+0x128>)
 80026fc:	6813      	ldr	r3, [r2, #0]
 80026fe:	f003 030f 	and.w	r3, r3, #15
 8002702:	42ab      	cmp	r3, r5
 8002704:	d909      	bls.n	800271a <HAL_RCC_ClockConfig+0xc2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002706:	b2eb      	uxtb	r3, r5
 8002708:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800270a:	6813      	ldr	r3, [r2, #0]
 800270c:	f003 030f 	and.w	r3, r3, #15
 8002710:	42ab      	cmp	r3, r5
 8002712:	d002      	beq.n	800271a <HAL_RCC_ClockConfig+0xc2>
    return HAL_ERROR;
 8002714:	2001      	movs	r0, #1
}
 8002716:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800271a:	6823      	ldr	r3, [r4, #0]
 800271c:	075a      	lsls	r2, r3, #29
 800271e:	d506      	bpl.n	800272e <HAL_RCC_ClockConfig+0xd6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002720:	4918      	ldr	r1, [pc, #96]	; (8002784 <HAL_RCC_ClockConfig+0x12c>)
 8002722:	68e0      	ldr	r0, [r4, #12]
 8002724:	688a      	ldr	r2, [r1, #8]
 8002726:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 800272a:	4302      	orrs	r2, r0
 800272c:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800272e:	071b      	lsls	r3, r3, #28
 8002730:	d412      	bmi.n	8002758 <HAL_RCC_ClockConfig+0x100>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002732:	f7ff ff5b 	bl	80025ec <HAL_RCC_GetSysClockFreq>
 8002736:	4b13      	ldr	r3, [pc, #76]	; (8002784 <HAL_RCC_ClockConfig+0x12c>)
 8002738:	4c13      	ldr	r4, [pc, #76]	; (8002788 <HAL_RCC_ClockConfig+0x130>)
 800273a:	689b      	ldr	r3, [r3, #8]
  HAL_InitTick (uwTickPrio);
 800273c:	4913      	ldr	r1, [pc, #76]	; (800278c <HAL_RCC_ClockConfig+0x134>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800273e:	4a14      	ldr	r2, [pc, #80]	; (8002790 <HAL_RCC_ClockConfig+0x138>)
 8002740:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002744:	5ce3      	ldrb	r3, [r4, r3]
 8002746:	fa20 f303 	lsr.w	r3, r0, r3
  HAL_InitTick (uwTickPrio);
 800274a:	6808      	ldr	r0, [r1, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800274c:	6013      	str	r3, [r2, #0]
  HAL_InitTick (uwTickPrio);
 800274e:	f7ff fabb 	bl	8001cc8 <HAL_InitTick>
  return HAL_OK;
 8002752:	2000      	movs	r0, #0
}
 8002754:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002758:	4a0a      	ldr	r2, [pc, #40]	; (8002784 <HAL_RCC_ClockConfig+0x12c>)
 800275a:	6921      	ldr	r1, [r4, #16]
 800275c:	6893      	ldr	r3, [r2, #8]
 800275e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8002762:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002766:	6093      	str	r3, [r2, #8]
 8002768:	e7e3      	b.n	8002732 <HAL_RCC_ClockConfig+0xda>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800276a:	4b06      	ldr	r3, [pc, #24]	; (8002784 <HAL_RCC_ClockConfig+0x12c>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	039e      	lsls	r6, r3, #14
 8002770:	d4aa      	bmi.n	80026c8 <HAL_RCC_ClockConfig+0x70>
 8002772:	e7cf      	b.n	8002714 <HAL_RCC_ClockConfig+0xbc>
        return HAL_TIMEOUT;
 8002774:	2003      	movs	r0, #3
 8002776:	e7ed      	b.n	8002754 <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002778:	0198      	lsls	r0, r3, #6
 800277a:	d4a5      	bmi.n	80026c8 <HAL_RCC_ClockConfig+0x70>
 800277c:	e7ca      	b.n	8002714 <HAL_RCC_ClockConfig+0xbc>
 800277e:	bf00      	nop
 8002780:	40023c00 	.word	0x40023c00
 8002784:	40023800 	.word	0x40023800
 8002788:	0800ac4c 	.word	0x0800ac4c
 800278c:	2000000c 	.word	0x2000000c
 8002790:	20000004 	.word	0x20000004

08002794 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002794:	4b04      	ldr	r3, [pc, #16]	; (80027a8 <HAL_RCC_GetPCLK1Freq+0x14>)
 8002796:	4a05      	ldr	r2, [pc, #20]	; (80027ac <HAL_RCC_GetPCLK1Freq+0x18>)
 8002798:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 800279a:	4905      	ldr	r1, [pc, #20]	; (80027b0 <HAL_RCC_GetPCLK1Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800279c:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80027a0:	6808      	ldr	r0, [r1, #0]
 80027a2:	5cd3      	ldrb	r3, [r2, r3]
}
 80027a4:	40d8      	lsrs	r0, r3
 80027a6:	4770      	bx	lr
 80027a8:	40023800 	.word	0x40023800
 80027ac:	0800ac5c 	.word	0x0800ac5c
 80027b0:	20000004 	.word	0x20000004

080027b4 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80027b4:	4b04      	ldr	r3, [pc, #16]	; (80027c8 <HAL_RCC_GetPCLK2Freq+0x14>)
 80027b6:	4a05      	ldr	r2, [pc, #20]	; (80027cc <HAL_RCC_GetPCLK2Freq+0x18>)
 80027b8:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 80027ba:	4905      	ldr	r1, [pc, #20]	; (80027d0 <HAL_RCC_GetPCLK2Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80027bc:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80027c0:	6808      	ldr	r0, [r1, #0]
 80027c2:	5cd3      	ldrb	r3, [r2, r3]
}
 80027c4:	40d8      	lsrs	r0, r3
 80027c6:	4770      	bx	lr
 80027c8:	40023800 	.word	0x40023800
 80027cc:	0800ac5c 	.word	0x0800ac5c
 80027d0:	20000004 	.word	0x20000004

080027d4 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80027d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80027d8:	460d      	mov	r5, r1
 80027da:	b087      	sub	sp, #28
 80027dc:	4604      	mov	r4, r0
 80027de:	4616      	mov	r6, r2
 80027e0:	461f      	mov	r7, r3
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80027e2:	f7ff fabb 	bl	8001d5c <HAL_GetTick>
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
  uint8_t *tempbuff = pData;

  if(NULL == pData)
 80027e6:	b365      	cbz	r5, 8002842 <HAL_SD_ReadBlocks+0x6e>
 80027e8:	4680      	mov	r8, r0
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
    return HAL_ERROR;
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80027ea:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
 80027ee:	b2c0      	uxtb	r0, r0
 80027f0:	2801      	cmp	r0, #1
 80027f2:	d007      	beq.n	8002804 <HAL_SD_ReadBlocks+0x30>

    return HAL_OK;
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80027f4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80027f6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80027fa:	63a3      	str	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 80027fc:	2001      	movs	r0, #1
  }
}
 80027fe:	b007      	add	sp, #28
 8002800:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8002804:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002806:	19f3      	adds	r3, r6, r7
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002808:	2100      	movs	r1, #0
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800280a:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800280c:	63a1      	str	r1, [r4, #56]	; 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800280e:	d820      	bhi.n	8002852 <HAL_SD_ReadBlocks+0x7e>
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8002810:	6c63      	ldr	r3, [r4, #68]	; 0x44
    hsd->Instance->DCTRL = 0U;
 8002812:	6820      	ldr	r0, [r4, #0]
    hsd->State = HAL_SD_STATE_BUSY;
 8002814:	2203      	movs	r2, #3
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8002816:	2b01      	cmp	r3, #1
    hsd->State = HAL_SD_STATE_BUSY;
 8002818:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    hsd->Instance->DCTRL = 0U;
 800281c:	62c1      	str	r1, [r0, #44]	; 0x2c
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800281e:	f44f 7100 	mov.w	r1, #512	; 0x200
      add *= 512U;
 8002822:	bf18      	it	ne
 8002824:	0276      	lslne	r6, r6, #9
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8002826:	f001 fc77 	bl	8004118 <SDMMC_CmdBlockLength>
    if(errorstate != HAL_SD_ERROR_NONE)
 800282a:	b1c8      	cbz	r0, 8002860 <HAL_SD_ReadBlocks+0x8c>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800282c:	6823      	ldr	r3, [r4, #0]
 800282e:	4a7a      	ldr	r2, [pc, #488]	; (8002a18 <HAL_SD_ReadBlocks+0x244>)
 8002830:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8002832:	6ba3      	ldr	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002834:	2201      	movs	r2, #1
      hsd->ErrorCode |= errorstate;
 8002836:	4318      	orrs	r0, r3
 8002838:	63a0      	str	r0, [r4, #56]	; 0x38
      return HAL_ERROR;
 800283a:	4610      	mov	r0, r2
      hsd->State = HAL_SD_STATE_READY;
 800283c:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
      return HAL_ERROR;
 8002840:	e7dd      	b.n	80027fe <HAL_SD_ReadBlocks+0x2a>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002842:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 8002844:	2001      	movs	r0, #1
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002846:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800284a:	63a3      	str	r3, [r4, #56]	; 0x38
}
 800284c:	b007      	add	sp, #28
 800284e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8002852:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002854:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002858:	63a3      	str	r3, [r4, #56]	; 0x38
}
 800285a:	b007      	add	sp, #28
 800285c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002860:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8002864:	027a      	lsls	r2, r7, #9
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8002866:	2390      	movs	r3, #144	; 0x90
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8002868:	9004      	str	r0, [sp, #16]
    config.DPSM          = SDIO_DPSM_ENABLE;
 800286a:	f04f 0a01 	mov.w	sl, #1
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800286e:	9100      	str	r1, [sp, #0]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8002870:	f04f 0902 	mov.w	r9, #2
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8002874:	4669      	mov	r1, sp
 8002876:	6820      	ldr	r0, [r4, #0]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8002878:	9201      	str	r2, [sp, #4]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800287a:	e9cd 3902 	strd	r3, r9, [sp, #8]
    config.DPSM          = SDIO_DPSM_ENABLE;
 800287e:	f8cd a014 	str.w	sl, [sp, #20]
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8002882:	f001 fc35 	bl	80040f0 <SDIO_ConfigData>
    if(NumberOfBlocks > 1U)
 8002886:	4557      	cmp	r7, sl
 8002888:	d944      	bls.n	8002914 <HAL_SD_ReadBlocks+0x140>
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800288a:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800288e:	4631      	mov	r1, r6
 8002890:	6820      	ldr	r0, [r4, #0]
 8002892:	f001 fcbb 	bl	800420c <SDMMC_CmdReadMultiBlock>
 8002896:	6823      	ldr	r3, [r4, #0]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002898:	bb80      	cbnz	r0, 80028fc <HAL_SD_ReadBlocks+0x128>
    dataremaining = config.DataLength;
 800289a:	f8dd a004 	ldr.w	sl, [sp, #4]
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800289e:	f240 3b2a 	movw	fp, #810	; 0x32a
 80028a2:	e007      	b.n	80028b4 <HAL_SD_ReadBlocks+0xe0>
      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80028a4:	f7ff fa5a 	bl	8001d5c <HAL_GetTick>
 80028a8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80028aa:	eba0 0008 	sub.w	r0, r0, r8
 80028ae:	4298      	cmp	r0, r3
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80028b0:	6823      	ldr	r3, [r4, #0]
      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80028b2:	d278      	bcs.n	80029a6 <HAL_SD_ReadBlocks+0x1d2>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80028b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028b6:	ea12 0f0b 	tst.w	r2, fp
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 80028ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80028bc:	d131      	bne.n	8002922 <HAL_SD_ReadBlocks+0x14e>
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 80028be:	0412      	lsls	r2, r2, #16
 80028c0:	d5f0      	bpl.n	80028a4 <HAL_SD_ReadBlocks+0xd0>
 80028c2:	f1ba 0f00 	cmp.w	sl, #0
 80028c6:	d0ed      	beq.n	80028a4 <HAL_SD_ReadBlocks+0xd0>
 80028c8:	1d2e      	adds	r6, r5, #4
 80028ca:	f105 0924 	add.w	r9, r5, #36	; 0x24
 80028ce:	e000      	b.n	80028d2 <HAL_SD_ReadBlocks+0xfe>
 80028d0:	6823      	ldr	r3, [r4, #0]
          data = SDIO_ReadFIFO(hsd->Instance);
 80028d2:	4618      	mov	r0, r3
 80028d4:	f001 fbf2 	bl	80040bc <SDIO_ReadFIFO>
          *tempbuff = (uint8_t)(data & 0xFFU);
 80028d8:	f806 0c04 	strb.w	r0, [r6, #-4]
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80028dc:	0a02      	lsrs	r2, r0, #8
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80028de:	0c03      	lsrs	r3, r0, #16
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80028e0:	0e00      	lsrs	r0, r0, #24
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80028e2:	f806 2c03 	strb.w	r2, [r6, #-3]
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80028e6:	f806 3c02 	strb.w	r3, [r6, #-2]
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80028ea:	f806 0c01 	strb.w	r0, [r6, #-1]
 80028ee:	3604      	adds	r6, #4
        for(count = 0U; count < 8U; count++)
 80028f0:	454e      	cmp	r6, r9
 80028f2:	d1ed      	bne.n	80028d0 <HAL_SD_ReadBlocks+0xfc>
 80028f4:	3520      	adds	r5, #32
 80028f6:	f1aa 0a20 	sub.w	sl, sl, #32
 80028fa:	e7d3      	b.n	80028a4 <HAL_SD_ReadBlocks+0xd0>
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80028fc:	4a46      	ldr	r2, [pc, #280]	; (8002a18 <HAL_SD_ReadBlocks+0x244>)
 80028fe:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8002900:	6ba3      	ldr	r3, [r4, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8002902:	2201      	movs	r2, #1
          hsd->ErrorCode |= errorstate;
 8002904:	4318      	orrs	r0, r3
          hsd->Context = SD_CONTEXT_NONE;
 8002906:	2300      	movs	r3, #0
          hsd->ErrorCode |= errorstate;
 8002908:	63a0      	str	r0, [r4, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800290a:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          return HAL_ERROR;
 800290e:	4610      	mov	r0, r2
          hsd->Context = SD_CONTEXT_NONE;
 8002910:	6323      	str	r3, [r4, #48]	; 0x30
          return HAL_ERROR;
 8002912:	e774      	b.n	80027fe <HAL_SD_ReadBlocks+0x2a>
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8002914:	f8c4 a030 	str.w	sl, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8002918:	4631      	mov	r1, r6
 800291a:	6820      	ldr	r0, [r4, #0]
 800291c:	f001 fc38 	bl	8004190 <SDMMC_CmdReadSingleBlock>
 8002920:	e7b9      	b.n	8002896 <HAL_SD_ReadBlocks+0xc2>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8002922:	05d6      	lsls	r6, r2, #23
 8002924:	d50a      	bpl.n	800293c <HAL_SD_ReadBlocks+0x168>
 8002926:	2f01      	cmp	r7, #1
 8002928:	d908      	bls.n	800293c <HAL_SD_ReadBlocks+0x168>
      if(hsd->SdCard.CardType != CARD_SECURED)
 800292a:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800292c:	2a03      	cmp	r2, #3
 800292e:	d005      	beq.n	800293c <HAL_SD_ReadBlocks+0x168>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8002930:	4618      	mov	r0, r3
 8002932:	f001 fd23 	bl	800437c <SDMMC_CmdStopTransfer>
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002936:	6823      	ldr	r3, [r4, #0]
        if(errorstate != HAL_SD_ERROR_NONE)
 8002938:	2800      	cmp	r0, #0
 800293a:	d1df      	bne.n	80028fc <HAL_SD_ReadBlocks+0x128>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800293c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800293e:	f012 0208 	ands.w	r2, r2, #8
 8002942:	d13d      	bne.n	80029c0 <HAL_SD_ReadBlocks+0x1ec>
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8002944:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002946:	f011 0102 	ands.w	r1, r1, #2
 800294a:	d146      	bne.n	80029da <HAL_SD_ReadBlocks+0x206>
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800294c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800294e:	0690      	lsls	r0, r2, #26
 8002950:	d44f      	bmi.n	80029f2 <HAL_SD_ReadBlocks+0x21e>
 8002952:	3504      	adds	r5, #4
 8002954:	e01b      	b.n	800298e <HAL_SD_ReadBlocks+0x1ba>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8002956:	f1ba 0f00 	cmp.w	sl, #0
 800295a:	d01c      	beq.n	8002996 <HAL_SD_ReadBlocks+0x1c2>
      data = SDIO_ReadFIFO(hsd->Instance);
 800295c:	f001 fbae 	bl	80040bc <SDIO_ReadFIFO>
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8002960:	0c03      	lsrs	r3, r0, #16
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8002962:	0a02      	lsrs	r2, r0, #8
      *tempbuff = (uint8_t)(data & 0xFFU);
 8002964:	f805 0c04 	strb.w	r0, [r5, #-4]
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8002968:	0e00      	lsrs	r0, r0, #24
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800296a:	f805 3c02 	strb.w	r3, [r5, #-2]
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800296e:	f805 2c03 	strb.w	r2, [r5, #-3]
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8002972:	f805 0c01 	strb.w	r0, [r5, #-1]
      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8002976:	f7ff f9f1 	bl	8001d5c <HAL_GetTick>
 800297a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800297c:	eba0 0008 	sub.w	r0, r0, r8
 8002980:	4298      	cmp	r0, r3
      dataremaining--;
 8002982:	f1aa 0a04 	sub.w	sl, sl, #4
 8002986:	f105 0504 	add.w	r5, r5, #4
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800298a:	6823      	ldr	r3, [r4, #0]
      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800298c:	d23d      	bcs.n	8002a0a <HAL_SD_ReadBlocks+0x236>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 800298e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002990:	0292      	lsls	r2, r2, #10
      data = SDIO_ReadFIFO(hsd->Instance);
 8002992:	4618      	mov	r0, r3
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8002994:	d4df      	bmi.n	8002956 <HAL_SD_ReadBlocks+0x182>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8002996:	f240 513a 	movw	r1, #1338	; 0x53a
    hsd->State = HAL_SD_STATE_READY;
 800299a:	2201      	movs	r2, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800299c:	6399      	str	r1, [r3, #56]	; 0x38
    return HAL_OK;
 800299e:	2000      	movs	r0, #0
    hsd->State = HAL_SD_STATE_READY;
 80029a0:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    return HAL_OK;
 80029a4:	e72b      	b.n	80027fe <HAL_SD_ReadBlocks+0x2a>
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80029a6:	4a1c      	ldr	r2, [pc, #112]	; (8002a18 <HAL_SD_ReadBlocks+0x244>)
 80029a8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80029aa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 80029ac:	2101      	movs	r1, #1
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80029ae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
        hsd->Context = SD_CONTEXT_NONE;
 80029b2:	2200      	movs	r2, #0
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80029b4:	63a3      	str	r3, [r4, #56]	; 0x38
        return HAL_TIMEOUT;
 80029b6:	2003      	movs	r0, #3
        hsd->State= HAL_SD_STATE_READY;
 80029b8:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80029bc:	6322      	str	r2, [r4, #48]	; 0x30
        return HAL_TIMEOUT;
 80029be:	e71e      	b.n	80027fe <HAL_SD_ReadBlocks+0x2a>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80029c0:	4a15      	ldr	r2, [pc, #84]	; (8002a18 <HAL_SD_ReadBlocks+0x244>)
 80029c2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80029c4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80029c6:	2201      	movs	r2, #1
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80029c8:	f043 0308 	orr.w	r3, r3, #8
        hsd->Context = SD_CONTEXT_NONE;
 80029cc:	2100      	movs	r1, #0
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80029ce:	63a3      	str	r3, [r4, #56]	; 0x38
        return HAL_ERROR;
 80029d0:	4610      	mov	r0, r2
        hsd->State= HAL_SD_STATE_READY;
 80029d2:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80029d6:	6321      	str	r1, [r4, #48]	; 0x30
        return HAL_ERROR;
 80029d8:	e711      	b.n	80027fe <HAL_SD_ReadBlocks+0x2a>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80029da:	490f      	ldr	r1, [pc, #60]	; (8002a18 <HAL_SD_ReadBlocks+0x244>)
 80029dc:	6399      	str	r1, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80029de:	6ba3      	ldr	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80029e0:	2101      	movs	r1, #1
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80029e2:	f043 0302 	orr.w	r3, r3, #2
 80029e6:	63a3      	str	r3, [r4, #56]	; 0x38
      return HAL_ERROR;
 80029e8:	4608      	mov	r0, r1
      hsd->State = HAL_SD_STATE_READY;
 80029ea:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80029ee:	6322      	str	r2, [r4, #48]	; 0x30
      return HAL_ERROR;
 80029f0:	e705      	b.n	80027fe <HAL_SD_ReadBlocks+0x2a>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80029f2:	4a09      	ldr	r2, [pc, #36]	; (8002a18 <HAL_SD_ReadBlocks+0x244>)
 80029f4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80029f6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80029f8:	2201      	movs	r2, #1
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80029fa:	f043 0320 	orr.w	r3, r3, #32
 80029fe:	63a3      	str	r3, [r4, #56]	; 0x38
      return HAL_ERROR;
 8002a00:	4610      	mov	r0, r2
      hsd->State = HAL_SD_STATE_READY;
 8002a02:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002a06:	6321      	str	r1, [r4, #48]	; 0x30
      return HAL_ERROR;
 8002a08:	e6f9      	b.n	80027fe <HAL_SD_ReadBlocks+0x2a>
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002a0a:	4a03      	ldr	r2, [pc, #12]	; (8002a18 <HAL_SD_ReadBlocks+0x244>)
 8002a0c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8002a0e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8002a10:	2201      	movs	r2, #1
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8002a12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002a16:	e7d9      	b.n	80029cc <HAL_SD_ReadBlocks+0x1f8>
 8002a18:	004005ff 	.word	0x004005ff

08002a1c <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8002a1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002a20:	460d      	mov	r5, r1
 8002a22:	b088      	sub	sp, #32
 8002a24:	4604      	mov	r4, r0
 8002a26:	4616      	mov	r6, r2
 8002a28:	461f      	mov	r7, r3
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8002a2a:	f7ff f997 	bl	8001d5c <HAL_GetTick>
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
  uint8_t *tempbuff = pData;

  if(NULL == pData)
 8002a2e:	b365      	cbz	r5, 8002a8a <HAL_SD_WriteBlocks+0x6e>
 8002a30:	4680      	mov	r8, r0
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
    return HAL_ERROR;
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8002a32:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
 8002a36:	b2c0      	uxtb	r0, r0
 8002a38:	2801      	cmp	r0, #1
 8002a3a:	d007      	beq.n	8002a4c <HAL_SD_WriteBlocks+0x30>

    return HAL_OK;
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8002a3c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002a3e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002a42:	63a3      	str	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 8002a44:	2001      	movs	r0, #1
  }
}
 8002a46:	b008      	add	sp, #32
 8002a48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8002a4c:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002a4e:	19f3      	adds	r3, r6, r7
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002a50:	2100      	movs	r1, #0
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8002a52:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002a54:	63a1      	str	r1, [r4, #56]	; 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8002a56:	d820      	bhi.n	8002a9a <HAL_SD_WriteBlocks+0x7e>
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8002a58:	6c63      	ldr	r3, [r4, #68]	; 0x44
    hsd->Instance->DCTRL = 0U;
 8002a5a:	6820      	ldr	r0, [r4, #0]
    hsd->State = HAL_SD_STATE_BUSY;
 8002a5c:	2203      	movs	r2, #3
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8002a5e:	2b01      	cmp	r3, #1
    hsd->State = HAL_SD_STATE_BUSY;
 8002a60:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    hsd->Instance->DCTRL = 0U;
 8002a64:	62c1      	str	r1, [r0, #44]	; 0x2c
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8002a66:	f44f 7100 	mov.w	r1, #512	; 0x200
      add *= 512U;
 8002a6a:	bf18      	it	ne
 8002a6c:	0276      	lslne	r6, r6, #9
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8002a6e:	f001 fb53 	bl	8004118 <SDMMC_CmdBlockLength>
    if(errorstate != HAL_SD_ERROR_NONE)
 8002a72:	b1c8      	cbz	r0, 8002aa8 <HAL_SD_WriteBlocks+0x8c>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002a74:	6823      	ldr	r3, [r4, #0]
 8002a76:	4a5e      	ldr	r2, [pc, #376]	; (8002bf0 <HAL_SD_WriteBlocks+0x1d4>)
 8002a78:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8002a7a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002a7c:	2201      	movs	r2, #1
      hsd->ErrorCode |= errorstate;
 8002a7e:	4318      	orrs	r0, r3
 8002a80:	63a0      	str	r0, [r4, #56]	; 0x38
      return HAL_ERROR;
 8002a82:	4610      	mov	r0, r2
      hsd->State = HAL_SD_STATE_READY;
 8002a84:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
      return HAL_ERROR;
 8002a88:	e7dd      	b.n	8002a46 <HAL_SD_WriteBlocks+0x2a>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002a8a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 8002a8c:	2001      	movs	r0, #1
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002a8e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002a92:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8002a94:	b008      	add	sp, #32
 8002a96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8002a9a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002a9c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002aa0:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8002aa2:	b008      	add	sp, #32
 8002aa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002aa8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8002aac:	0279      	lsls	r1, r7, #9
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8002aae:	e9cd 0005 	strd	r0, r0, [sp, #20]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8002ab2:	2290      	movs	r2, #144	; 0x90
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002ab4:	9302      	str	r3, [sp, #8]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8002ab6:	9103      	str	r1, [sp, #12]
    config.DPSM          = SDIO_DPSM_ENABLE;
 8002ab8:	2301      	movs	r3, #1
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8002aba:	a902      	add	r1, sp, #8
 8002abc:	6820      	ldr	r0, [r4, #0]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8002abe:	9204      	str	r2, [sp, #16]
    config.DPSM          = SDIO_DPSM_ENABLE;
 8002ac0:	9307      	str	r3, [sp, #28]
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8002ac2:	f001 fb15 	bl	80040f0 <SDIO_ConfigData>
    if(NumberOfBlocks > 1U)
 8002ac6:	2f01      	cmp	r7, #1
 8002ac8:	d93a      	bls.n	8002b40 <HAL_SD_WriteBlocks+0x124>
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8002aca:	2320      	movs	r3, #32
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8002acc:	4631      	mov	r1, r6
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8002ace:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8002ad0:	6820      	ldr	r0, [r4, #0]
 8002ad2:	f001 fc15 	bl	8004300 <SDMMC_CmdWriteMultiBlock>
 8002ad6:	6823      	ldr	r3, [r4, #0]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002ad8:	bb30      	cbnz	r0, 8002b28 <HAL_SD_WriteBlocks+0x10c>
    dataremaining = config.DataLength;
 8002ada:	f8dd a00c 	ldr.w	sl, [sp, #12]
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8002ade:	f240 391a 	movw	r9, #794	; 0x31a
 8002ae2:	e007      	b.n	8002af4 <HAL_SD_WriteBlocks+0xd8>
      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8002ae4:	f7ff f93a 	bl	8001d5c <HAL_GetTick>
 8002ae8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002aea:	eba0 0008 	sub.w	r0, r0, r8
 8002aee:	4298      	cmp	r0, r3
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002af0:	6823      	ldr	r3, [r4, #0]
      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8002af2:	d251      	bcs.n	8002b98 <HAL_SD_WriteBlocks+0x17c>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8002af4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002af6:	ea12 0f09 	tst.w	r2, r9
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8002afa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8002afc:	d127      	bne.n	8002b4e <HAL_SD_WriteBlocks+0x132>
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8002afe:	0451      	lsls	r1, r2, #17
 8002b00:	d5f0      	bpl.n	8002ae4 <HAL_SD_WriteBlocks+0xc8>
 8002b02:	f1ba 0f00 	cmp.w	sl, #0
 8002b06:	d0ed      	beq.n	8002ae4 <HAL_SD_WriteBlocks+0xc8>
 8002b08:	f105 0620 	add.w	r6, r5, #32
 8002b0c:	e000      	b.n	8002b10 <HAL_SD_WriteBlocks+0xf4>
 8002b0e:	6823      	ldr	r3, [r4, #0]
          data |= ((uint32_t)(*tempbuff) << 24U);
 8002b10:	f855 2b04 	ldr.w	r2, [r5], #4
 8002b14:	9201      	str	r2, [sp, #4]
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8002b16:	4618      	mov	r0, r3
 8002b18:	a901      	add	r1, sp, #4
 8002b1a:	f001 fad3 	bl	80040c4 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8002b1e:	42b5      	cmp	r5, r6
 8002b20:	d1f5      	bne.n	8002b0e <HAL_SD_WriteBlocks+0xf2>
 8002b22:	f1aa 0a20 	sub.w	sl, sl, #32
 8002b26:	e7dd      	b.n	8002ae4 <HAL_SD_WriteBlocks+0xc8>
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002b28:	4a31      	ldr	r2, [pc, #196]	; (8002bf0 <HAL_SD_WriteBlocks+0x1d4>)
 8002b2a:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8002b2c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8002b2e:	2201      	movs	r2, #1
          hsd->ErrorCode |= errorstate;
 8002b30:	4318      	orrs	r0, r3
          hsd->Context = SD_CONTEXT_NONE;
 8002b32:	2300      	movs	r3, #0
          hsd->ErrorCode |= errorstate;
 8002b34:	63a0      	str	r0, [r4, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8002b36:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          return HAL_ERROR;
 8002b3a:	4610      	mov	r0, r2
          hsd->Context = SD_CONTEXT_NONE;
 8002b3c:	6323      	str	r3, [r4, #48]	; 0x30
          return HAL_ERROR;
 8002b3e:	e782      	b.n	8002a46 <HAL_SD_WriteBlocks+0x2a>
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8002b40:	2310      	movs	r3, #16
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8002b42:	4631      	mov	r1, r6
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8002b44:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8002b46:	6820      	ldr	r0, [r4, #0]
 8002b48:	f001 fb9e 	bl	8004288 <SDMMC_CmdWriteSingleBlock>
 8002b4c:	e7c3      	b.n	8002ad6 <HAL_SD_WriteBlocks+0xba>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8002b4e:	05d2      	lsls	r2, r2, #23
 8002b50:	d50a      	bpl.n	8002b68 <HAL_SD_WriteBlocks+0x14c>
 8002b52:	2f01      	cmp	r7, #1
 8002b54:	d908      	bls.n	8002b68 <HAL_SD_WriteBlocks+0x14c>
      if(hsd->SdCard.CardType != CARD_SECURED)
 8002b56:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8002b58:	2a03      	cmp	r2, #3
 8002b5a:	d005      	beq.n	8002b68 <HAL_SD_WriteBlocks+0x14c>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f001 fc0d 	bl	800437c <SDMMC_CmdStopTransfer>
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002b62:	6823      	ldr	r3, [r4, #0]
        if(errorstate != HAL_SD_ERROR_NONE)
 8002b64:	2800      	cmp	r0, #0
 8002b66:	d1df      	bne.n	8002b28 <HAL_SD_WriteBlocks+0x10c>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8002b68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b6a:	f012 0208 	ands.w	r2, r2, #8
 8002b6e:	d11e      	bne.n	8002bae <HAL_SD_WriteBlocks+0x192>
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8002b70:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002b72:	f011 0102 	ands.w	r1, r1, #2
 8002b76:	d127      	bne.n	8002bc8 <HAL_SD_WriteBlocks+0x1ac>
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8002b78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b7a:	f012 0210 	ands.w	r2, r2, #16
 8002b7e:	d02f      	beq.n	8002be0 <HAL_SD_WriteBlocks+0x1c4>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002b80:	4a1b      	ldr	r2, [pc, #108]	; (8002bf0 <HAL_SD_WriteBlocks+0x1d4>)
 8002b82:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8002b84:	6ba3      	ldr	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002b86:	2201      	movs	r2, #1
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8002b88:	f043 0310 	orr.w	r3, r3, #16
 8002b8c:	63a3      	str	r3, [r4, #56]	; 0x38
      return HAL_ERROR;
 8002b8e:	4610      	mov	r0, r2
      hsd->State = HAL_SD_STATE_READY;
 8002b90:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002b94:	6321      	str	r1, [r4, #48]	; 0x30
      return HAL_ERROR;
 8002b96:	e756      	b.n	8002a46 <HAL_SD_WriteBlocks+0x2a>
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002b98:	4a15      	ldr	r2, [pc, #84]	; (8002bf0 <HAL_SD_WriteBlocks+0x1d4>)
 8002b9a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8002b9c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002b9e:	63a3      	str	r3, [r4, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8002ba0:	2201      	movs	r2, #1
        hsd->Context = SD_CONTEXT_NONE;
 8002ba2:	2300      	movs	r3, #0
        hsd->State = HAL_SD_STATE_READY;
 8002ba4:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        return HAL_TIMEOUT;
 8002ba8:	2003      	movs	r0, #3
        hsd->Context = SD_CONTEXT_NONE;
 8002baa:	6323      	str	r3, [r4, #48]	; 0x30
        return HAL_TIMEOUT;
 8002bac:	e74b      	b.n	8002a46 <HAL_SD_WriteBlocks+0x2a>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002bae:	4a10      	ldr	r2, [pc, #64]	; (8002bf0 <HAL_SD_WriteBlocks+0x1d4>)
 8002bb0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8002bb2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002bb4:	2201      	movs	r2, #1
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8002bb6:	f043 0308 	orr.w	r3, r3, #8
      hsd->Context = SD_CONTEXT_NONE;
 8002bba:	2100      	movs	r1, #0
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8002bbc:	63a3      	str	r3, [r4, #56]	; 0x38
      return HAL_ERROR;
 8002bbe:	4610      	mov	r0, r2
      hsd->State = HAL_SD_STATE_READY;
 8002bc0:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002bc4:	6321      	str	r1, [r4, #48]	; 0x30
      return HAL_ERROR;
 8002bc6:	e73e      	b.n	8002a46 <HAL_SD_WriteBlocks+0x2a>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002bc8:	4909      	ldr	r1, [pc, #36]	; (8002bf0 <HAL_SD_WriteBlocks+0x1d4>)
 8002bca:	6399      	str	r1, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8002bcc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002bce:	2101      	movs	r1, #1
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8002bd0:	f043 0302 	orr.w	r3, r3, #2
 8002bd4:	63a3      	str	r3, [r4, #56]	; 0x38
      return HAL_ERROR;
 8002bd6:	4608      	mov	r0, r1
      hsd->State = HAL_SD_STATE_READY;
 8002bd8:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002bdc:	6322      	str	r2, [r4, #48]	; 0x30
      return HAL_ERROR;
 8002bde:	e732      	b.n	8002a46 <HAL_SD_WriteBlocks+0x2a>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8002be0:	f240 553a 	movw	r5, #1338	; 0x53a
    hsd->State = HAL_SD_STATE_READY;
 8002be4:	2101      	movs	r1, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8002be6:	639d      	str	r5, [r3, #56]	; 0x38
    return HAL_OK;
 8002be8:	4610      	mov	r0, r2
    hsd->State = HAL_SD_STATE_READY;
 8002bea:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
    return HAL_OK;
 8002bee:	e72a      	b.n	8002a46 <HAL_SD_WriteBlocks+0x2a>
 8002bf0:	004005ff 	.word	0x004005ff

08002bf4 <HAL_SD_ErrorCallback>:
 8002bf4:	4770      	bx	lr
 8002bf6:	bf00      	nop

08002bf8 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8002bf8:	b538      	push	{r3, r4, r5, lr}
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8002bfa:	6b84      	ldr	r4, [r0, #56]	; 0x38
  {
    return HAL_SD_ERROR_PARAM;
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8002bfc:	6d21      	ldr	r1, [r4, #80]	; 0x50
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8002bfe:	6820      	ldr	r0, [r4, #0]
 8002c00:	f240 533a 	movw	r3, #1338	; 0x53a
 8002c04:	6383      	str	r3, [r0, #56]	; 0x38
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8002c06:	0409      	lsls	r1, r1, #16
 8002c08:	f001 fddc 	bl	80047c4 <SDMMC_CmdSendStatus>
  if(errorstate != HAL_SD_ERROR_NONE)
 8002c0c:	4605      	mov	r5, r0
 8002c0e:	b180      	cbz	r0, 8002c32 <SD_DMATxAbort+0x3a>
    hsd->ErrorCode |= errorstate;
 8002c10:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  hsd->State = HAL_SD_STATE_READY;
 8002c12:	2201      	movs	r2, #1
    hsd->ErrorCode |= errorstate;
 8002c14:	431d      	orrs	r5, r3
  hsd->Context = SD_CONTEXT_NONE;
 8002c16:	2300      	movs	r3, #0
    hsd->ErrorCode |= errorstate;
 8002c18:	63a5      	str	r5, [r4, #56]	; 0x38
  hsd->State = HAL_SD_STATE_READY;
 8002c1a:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8002c1e:	6323      	str	r3, [r4, #48]	; 0x30
  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8002c20:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    HAL_SD_AbortCallback(hsd);
 8002c22:	4620      	mov	r0, r4
  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8002c24:	b113      	cbz	r3, 8002c2c <SD_DMATxAbort+0x34>
    HAL_SD_ErrorCallback(hsd);
 8002c26:	f7ff ffe5 	bl	8002bf4 <HAL_SD_ErrorCallback>
}
 8002c2a:	bd38      	pop	{r3, r4, r5, pc}
    HAL_SD_AbortCallback(hsd);
 8002c2c:	f001 fe4e 	bl	80048cc <HAL_SD_AbortCallback>
}
 8002c30:	bd38      	pop	{r3, r4, r5, pc}
  {
    return errorstate;
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002c32:	4601      	mov	r1, r0
 8002c34:	6820      	ldr	r0, [r4, #0]
 8002c36:	f001 fa57 	bl	80040e8 <SDIO_GetResponse>
  cardstate = ((resp1 >> 9U) & 0x0FU);
 8002c3a:	f3c0 2043 	ubfx	r0, r0, #9, #4
  hsd->State = HAL_SD_STATE_READY;
 8002c3e:	2301      	movs	r3, #1
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8002c40:	3805      	subs	r0, #5
 8002c42:	4298      	cmp	r0, r3
  hsd->State = HAL_SD_STATE_READY;
 8002c44:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8002c48:	6325      	str	r5, [r4, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8002c4a:	d8e9      	bhi.n	8002c20 <SD_DMATxAbort+0x28>
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8002c4c:	6820      	ldr	r0, [r4, #0]
 8002c4e:	f001 fb95 	bl	800437c <SDMMC_CmdStopTransfer>
 8002c52:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002c54:	4318      	orrs	r0, r3
 8002c56:	63a0      	str	r0, [r4, #56]	; 0x38
 8002c58:	e7e2      	b.n	8002c20 <SD_DMATxAbort+0x28>
 8002c5a:	bf00      	nop

08002c5c <HAL_SD_IRQHandler>:
{
 8002c5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002c60:	4604      	mov	r4, r0
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8002c62:	6800      	ldr	r0, [r0, #0]
  uint32_t context = hsd->Context;
 8002c64:	6b25      	ldr	r5, [r4, #48]	; 0x30
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8002c66:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002c68:	041a      	lsls	r2, r3, #16
{
 8002c6a:	b082      	sub	sp, #8
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8002c6c:	d51d      	bpl.n	8002caa <HAL_SD_IRQHandler+0x4e>
 8002c6e:	072b      	lsls	r3, r5, #28
 8002c70:	f100 80be 	bmi.w	8002df0 <HAL_SD_IRQHandler+0x194>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8002c74:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002c76:	05db      	lsls	r3, r3, #23
 8002c78:	d56b      	bpl.n	8002d52 <HAL_SD_IRQHandler+0xf6>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8002c7a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c7e:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8002c80:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8002c82:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 8002c86:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8002c8a:	63c3      	str	r3, [r0, #60]	; 0x3c
    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8002c8c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002c8e:	f023 0301 	bic.w	r3, r3, #1
 8002c92:	62c3      	str	r3, [r0, #44]	; 0x2c
    else if((context & SD_CONTEXT_DMA) != 0U)
 8002c94:	0629      	lsls	r1, r5, #24
 8002c96:	d505      	bpl.n	8002ca4 <HAL_SD_IRQHandler+0x48>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8002c98:	06aa      	lsls	r2, r5, #26
 8002c9a:	f100 80f7 	bmi.w	8002e8c <HAL_SD_IRQHandler+0x230>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8002c9e:	07ab      	lsls	r3, r5, #30
 8002ca0:	f000 80c8 	beq.w	8002e34 <HAL_SD_IRQHandler+0x1d8>
}
 8002ca4:	b002      	add	sp, #8
 8002ca6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8002caa:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002cac:	05df      	lsls	r7, r3, #23
 8002cae:	d523      	bpl.n	8002cf8 <HAL_SD_IRQHandler+0x9c>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8002cb0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002cb4:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8002cb6:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8002cb8:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 8002cbc:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8002cc0:	63c3      	str	r3, [r0, #60]	; 0x3c
    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8002cc2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    if((context & SD_CONTEXT_IT) != 0U)
 8002cc4:	072e      	lsls	r6, r5, #28
    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8002cc6:	f023 0301 	bic.w	r3, r3, #1
 8002cca:	62c3      	str	r3, [r0, #44]	; 0x2c
    if((context & SD_CONTEXT_IT) != 0U)
 8002ccc:	d5e2      	bpl.n	8002c94 <HAL_SD_IRQHandler+0x38>
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8002cce:	f015 0f22 	tst.w	r5, #34	; 0x22
 8002cd2:	f040 80bd 	bne.w	8002e50 <HAL_SD_IRQHandler+0x1f4>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8002cd6:	f240 513a 	movw	r1, #1338	; 0x53a
      hsd->State = HAL_SD_STATE_READY;
 8002cda:	2201      	movs	r2, #1
      hsd->Context = SD_CONTEXT_NONE;
 8002cdc:	2300      	movs	r3, #0
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8002cde:	6381      	str	r1, [r0, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002ce0:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        HAL_SD_RxCpltCallback(hsd);
 8002ce4:	4620      	mov	r0, r4
      hsd->Context = SD_CONTEXT_NONE;
 8002ce6:	6323      	str	r3, [r4, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8002ce8:	07ac      	lsls	r4, r5, #30
 8002cea:	f000 80ac 	beq.w	8002e46 <HAL_SD_IRQHandler+0x1ea>
        HAL_SD_RxCpltCallback(hsd);
 8002cee:	f001 fdf9 	bl	80048e4 <HAL_SD_RxCpltCallback>
}
 8002cf2:	b002      	add	sp, #8
 8002cf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8002cf8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002cfa:	045f      	lsls	r7, r3, #17
 8002cfc:	d52a      	bpl.n	8002d54 <HAL_SD_IRQHandler+0xf8>
 8002cfe:	072e      	lsls	r6, r5, #28
 8002d00:	d528      	bpl.n	8002d54 <HAL_SD_IRQHandler+0xf8>
{
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
  dataremaining = hsd->TxXferSize;
 8002d02:	6a66      	ldr	r6, [r4, #36]	; 0x24

  if (dataremaining > 0U)
 8002d04:	2e00      	cmp	r6, #0
 8002d06:	d0cd      	beq.n	8002ca4 <HAL_SD_IRQHandler+0x48>
  tmp = hsd->pTxBuffPtr;
 8002d08:	6a27      	ldr	r7, [r4, #32]
 8002d0a:	f107 0804 	add.w	r8, r7, #4
 8002d0e:	f107 0524 	add.w	r5, r7, #36	; 0x24
 8002d12:	e000      	b.n	8002d16 <HAL_SD_IRQHandler+0xba>
 8002d14:	6820      	ldr	r0, [r4, #0]
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
    {
      data = (uint32_t)(*tmp);
 8002d16:	f818 3c04 	ldrb.w	r3, [r8, #-4]
 8002d1a:	9301      	str	r3, [sp, #4]
      tmp++;
      dataremaining--;
      data |= ((uint32_t)(*tmp) << 8U);
 8002d1c:	f818 2c03 	ldrb.w	r2, [r8, #-3]
 8002d20:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002d24:	9301      	str	r3, [sp, #4]
      tmp++;
      dataremaining--;
      data |= ((uint32_t)(*tmp) << 16U);
 8002d26:	f818 2c02 	ldrb.w	r2, [r8, #-2]
 8002d2a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002d2e:	9301      	str	r3, [sp, #4]
      tmp++;
      dataremaining--;
      data |= ((uint32_t)(*tmp) << 24U);
 8002d30:	f818 2c01 	ldrb.w	r2, [r8, #-1]
      tmp++;
      dataremaining--;
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8002d34:	a901      	add	r1, sp, #4
      data |= ((uint32_t)(*tmp) << 24U);
 8002d36:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002d3a:	f108 0804 	add.w	r8, r8, #4
 8002d3e:	9301      	str	r3, [sp, #4]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8002d40:	f001 f9c0 	bl	80040c4 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8002d44:	45a8      	cmp	r8, r5
 8002d46:	d1e5      	bne.n	8002d14 <HAL_SD_IRQHandler+0xb8>
    }

    hsd->pTxBuffPtr = tmp;
 8002d48:	3720      	adds	r7, #32
    hsd->TxXferSize = dataremaining;
 8002d4a:	3e20      	subs	r6, #32
 8002d4c:	e9c4 7608 	strd	r7, r6, [r4, #32]
 8002d50:	e7a8      	b.n	8002ca4 <HAL_SD_IRQHandler+0x48>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8002d52:	6b43      	ldr	r3, [r0, #52]	; 0x34
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 8002d54:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8002d56:	f240 233a 	movw	r3, #570	; 0x23a
 8002d5a:	421a      	tst	r2, r3
 8002d5c:	d0a2      	beq.n	8002ca4 <HAL_SD_IRQHandler+0x48>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8002d5e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002d60:	0799      	lsls	r1, r3, #30
 8002d62:	d503      	bpl.n	8002d6c <HAL_SD_IRQHandler+0x110>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8002d64:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002d66:	f043 0302 	orr.w	r3, r3, #2
 8002d6a:	63a3      	str	r3, [r4, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8002d6c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002d6e:	071a      	lsls	r2, r3, #28
 8002d70:	d503      	bpl.n	8002d7a <HAL_SD_IRQHandler+0x11e>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8002d72:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002d74:	f043 0308 	orr.w	r3, r3, #8
 8002d78:	63a3      	str	r3, [r4, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8002d7a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002d7c:	069b      	lsls	r3, r3, #26
 8002d7e:	d503      	bpl.n	8002d88 <HAL_SD_IRQHandler+0x12c>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8002d80:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002d82:	f043 0320 	orr.w	r3, r3, #32
 8002d86:	63a3      	str	r3, [r4, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8002d88:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002d8a:	06df      	lsls	r7, r3, #27
 8002d8c:	d503      	bpl.n	8002d96 <HAL_SD_IRQHandler+0x13a>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8002d8e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002d90:	f043 0310 	orr.w	r3, r3, #16
 8002d94:	63a3      	str	r3, [r4, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 8002d96:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002d98:	059e      	lsls	r6, r3, #22
 8002d9a:	d503      	bpl.n	8002da4 <HAL_SD_IRQHandler+0x148>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8002d9c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002d9e:	f043 0308 	orr.w	r3, r3, #8
 8002da2:	63a3      	str	r3, [r4, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 8002da4:	f240 733a 	movw	r3, #1850	; 0x73a
 8002da8:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8002daa:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8002dac:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 8002db0:	f023 0302 	bic.w	r3, r3, #2
 8002db4:	63c3      	str	r3, [r0, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8002db6:	f001 fae1 	bl	800437c <SDMMC_CmdStopTransfer>
 8002dba:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8002dbc:	0729      	lsls	r1, r5, #28
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8002dbe:	ea40 0003 	orr.w	r0, r0, r3
 8002dc2:	63a0      	str	r0, [r4, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8002dc4:	d449      	bmi.n	8002e5a <HAL_SD_IRQHandler+0x1fe>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8002dc6:	062a      	lsls	r2, r5, #24
 8002dc8:	f57f af6c 	bpl.w	8002ca4 <HAL_SD_IRQHandler+0x48>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8002dcc:	f015 0f30 	tst.w	r5, #48	; 0x30
 8002dd0:	d168      	bne.n	8002ea4 <HAL_SD_IRQHandler+0x248>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8002dd2:	f015 0503 	ands.w	r5, r5, #3
 8002dd6:	d049      	beq.n	8002e6c <HAL_SD_IRQHandler+0x210>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8002dd8:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8002dda:	4b38      	ldr	r3, [pc, #224]	; (8002ebc <HAL_SD_IRQHandler+0x260>)
 8002ddc:	6503      	str	r3, [r0, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8002dde:	f7ff f8b1 	bl	8001f44 <HAL_DMA_Abort_IT>
 8002de2:	2800      	cmp	r0, #0
 8002de4:	f43f af5e 	beq.w	8002ca4 <HAL_SD_IRQHandler+0x48>
          SD_DMARxAbort(hsd->hdmarx);
 8002de8:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8002dea:	f7ff ff05 	bl	8002bf8 <SD_DMATxAbort>
 8002dee:	e759      	b.n	8002ca4 <HAL_SD_IRQHandler+0x48>
  dataremaining = hsd->RxXferSize;
 8002df0:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
  if (dataremaining > 0U)
 8002df2:	2f00      	cmp	r7, #0
 8002df4:	f43f af56 	beq.w	8002ca4 <HAL_SD_IRQHandler+0x48>
  tmp = hsd->pRxBuffPtr;
 8002df8:	f8d4 8028 	ldr.w	r8, [r4, #40]	; 0x28
 8002dfc:	f108 0504 	add.w	r5, r8, #4
 8002e00:	f108 0624 	add.w	r6, r8, #36	; 0x24
 8002e04:	e000      	b.n	8002e08 <HAL_SD_IRQHandler+0x1ac>
 8002e06:	6820      	ldr	r0, [r4, #0]
      data = SDIO_ReadFIFO(hsd->Instance);
 8002e08:	f001 f958 	bl	80040bc <SDIO_ReadFIFO>
      *tmp = (uint8_t)(data & 0xFFU);
 8002e0c:	f805 0c04 	strb.w	r0, [r5, #-4]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8002e10:	0a02      	lsrs	r2, r0, #8
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8002e12:	0c03      	lsrs	r3, r0, #16
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8002e14:	0e00      	lsrs	r0, r0, #24
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8002e16:	f805 2c03 	strb.w	r2, [r5, #-3]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8002e1a:	f805 3c02 	strb.w	r3, [r5, #-2]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8002e1e:	f805 0c01 	strb.w	r0, [r5, #-1]
 8002e22:	3504      	adds	r5, #4
    for(count = 0U; count < 8U; count++)
 8002e24:	42ae      	cmp	r6, r5
 8002e26:	d1ee      	bne.n	8002e06 <HAL_SD_IRQHandler+0x1aa>
    hsd->pRxBuffPtr = tmp;
 8002e28:	f108 0320 	add.w	r3, r8, #32
    hsd->RxXferSize = dataremaining;
 8002e2c:	3f20      	subs	r7, #32
 8002e2e:	e9c4 370a 	strd	r3, r7, [r4, #40]	; 0x28
 8002e32:	e737      	b.n	8002ca4 <HAL_SD_IRQHandler+0x48>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8002e34:	6822      	ldr	r2, [r4, #0]
 8002e36:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8002e38:	2101      	movs	r1, #1
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8002e3a:	f023 0308 	bic.w	r3, r3, #8
 8002e3e:	62d3      	str	r3, [r2, #44]	; 0x2c
        HAL_SD_TxCpltCallback(hsd);
 8002e40:	4620      	mov	r0, r4
        hsd->State = HAL_SD_STATE_READY;
 8002e42:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8002e46:	f001 fd47 	bl	80048d8 <HAL_SD_TxCpltCallback>
}
 8002e4a:	b002      	add	sp, #8
 8002e4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8002e50:	f001 fa94 	bl	800437c <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 8002e54:	b998      	cbnz	r0, 8002e7e <HAL_SD_IRQHandler+0x222>
 8002e56:	6820      	ldr	r0, [r4, #0]
 8002e58:	e73d      	b.n	8002cd6 <HAL_SD_IRQHandler+0x7a>
      hsd->State = HAL_SD_STATE_READY;
 8002e5a:	2201      	movs	r2, #1
      hsd->Context = SD_CONTEXT_NONE;
 8002e5c:	2300      	movs	r3, #0
      hsd->State = HAL_SD_STATE_READY;
 8002e5e:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
      HAL_SD_ErrorCallback(hsd);
 8002e62:	4620      	mov	r0, r4
      hsd->Context = SD_CONTEXT_NONE;
 8002e64:	6323      	str	r3, [r4, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8002e66:	f7ff fec5 	bl	8002bf4 <HAL_SD_ErrorCallback>
 8002e6a:	e71b      	b.n	8002ca4 <HAL_SD_IRQHandler+0x48>
        hsd->State = HAL_SD_STATE_READY;
 8002e6c:	2301      	movs	r3, #1
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002e6e:	63a5      	str	r5, [r4, #56]	; 0x38
        HAL_SD_AbortCallback(hsd);
 8002e70:	4620      	mov	r0, r4
        hsd->State = HAL_SD_STATE_READY;
 8002e72:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8002e76:	6325      	str	r5, [r4, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8002e78:	f001 fd28 	bl	80048cc <HAL_SD_AbortCallback>
}
 8002e7c:	e712      	b.n	8002ca4 <HAL_SD_IRQHandler+0x48>
          hsd->ErrorCode |= errorstate;
 8002e7e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002e80:	4318      	orrs	r0, r3
 8002e82:	63a0      	str	r0, [r4, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8002e84:	4620      	mov	r0, r4
 8002e86:	f7ff feb5 	bl	8002bf4 <HAL_SD_ErrorCallback>
 8002e8a:	e7e4      	b.n	8002e56 <HAL_SD_IRQHandler+0x1fa>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8002e8c:	f001 fa76 	bl	800437c <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 8002e90:	2800      	cmp	r0, #0
 8002e92:	f43f af04 	beq.w	8002c9e <HAL_SD_IRQHandler+0x42>
          hsd->ErrorCode |= errorstate;
 8002e96:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002e98:	4318      	orrs	r0, r3
 8002e9a:	63a0      	str	r0, [r4, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8002e9c:	4620      	mov	r0, r4
 8002e9e:	f7ff fea9 	bl	8002bf4 <HAL_SD_ErrorCallback>
 8002ea2:	e6fc      	b.n	8002c9e <HAL_SD_IRQHandler+0x42>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8002ea4:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8002ea6:	4b06      	ldr	r3, [pc, #24]	; (8002ec0 <HAL_SD_IRQHandler+0x264>)
 8002ea8:	6503      	str	r3, [r0, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8002eaa:	f7ff f84b 	bl	8001f44 <HAL_DMA_Abort_IT>
 8002eae:	2800      	cmp	r0, #0
 8002eb0:	f43f aef8 	beq.w	8002ca4 <HAL_SD_IRQHandler+0x48>
          SD_DMATxAbort(hsd->hdmatx);
 8002eb4:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8002eb6:	f7ff fe9f 	bl	8002bf8 <SD_DMATxAbort>
 8002eba:	e6f3      	b.n	8002ca4 <HAL_SD_IRQHandler+0x48>
 8002ebc:	08002ec5 	.word	0x08002ec5
 8002ec0:	08002bf9 	.word	0x08002bf9

08002ec4 <SD_DMARxAbort>:
 8002ec4:	b538      	push	{r3, r4, r5, lr}
 8002ec6:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8002ec8:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8002eca:	6820      	ldr	r0, [r4, #0]
 8002ecc:	f240 533a 	movw	r3, #1338	; 0x53a
 8002ed0:	6383      	str	r3, [r0, #56]	; 0x38
 8002ed2:	0409      	lsls	r1, r1, #16
 8002ed4:	f001 fc76 	bl	80047c4 <SDMMC_CmdSendStatus>
 8002ed8:	4605      	mov	r5, r0
 8002eda:	b180      	cbz	r0, 8002efe <SD_DMARxAbort+0x3a>
 8002edc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002ede:	2201      	movs	r2, #1
 8002ee0:	431d      	orrs	r5, r3
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	63a5      	str	r5, [r4, #56]	; 0x38
 8002ee6:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
 8002eea:	6323      	str	r3, [r4, #48]	; 0x30
 8002eec:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002eee:	4620      	mov	r0, r4
 8002ef0:	b113      	cbz	r3, 8002ef8 <SD_DMARxAbort+0x34>
 8002ef2:	f7ff fe7f 	bl	8002bf4 <HAL_SD_ErrorCallback>
 8002ef6:	bd38      	pop	{r3, r4, r5, pc}
 8002ef8:	f001 fce8 	bl	80048cc <HAL_SD_AbortCallback>
 8002efc:	bd38      	pop	{r3, r4, r5, pc}
 8002efe:	4601      	mov	r1, r0
 8002f00:	6820      	ldr	r0, [r4, #0]
 8002f02:	f001 f8f1 	bl	80040e8 <SDIO_GetResponse>
 8002f06:	f3c0 2043 	ubfx	r0, r0, #9, #4
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	3805      	subs	r0, #5
 8002f0e:	4298      	cmp	r0, r3
 8002f10:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 8002f14:	6325      	str	r5, [r4, #48]	; 0x30
 8002f16:	d8e9      	bhi.n	8002eec <SD_DMARxAbort+0x28>
 8002f18:	6820      	ldr	r0, [r4, #0]
 8002f1a:	f001 fa2f 	bl	800437c <SDMMC_CmdStopTransfer>
 8002f1e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002f20:	4318      	orrs	r0, r3
 8002f22:	63a0      	str	r0, [r4, #56]	; 0x38
 8002f24:	e7e2      	b.n	8002eec <SD_DMARxAbort+0x28>
 8002f26:	bf00      	nop

08002f28 <HAL_SD_GetCardCSD>:
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8002f28:	6e42      	ldr	r2, [r0, #100]	; 0x64
{
 8002f2a:	b4f0      	push	{r4, r5, r6, r7}
 8002f2c:	4603      	mov	r3, r0
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8002f2e:	0f94      	lsrs	r4, r2, #30
  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8002f30:	f3c2 6083 	ubfx	r0, r2, #26, #4
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8002f34:	700c      	strb	r4, [r1, #0]
  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8002f36:	f3c2 6501 	ubfx	r5, r2, #24, #2
  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8002f3a:	7048      	strb	r0, [r1, #1]
  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8002f3c:	f3c2 4407 	ubfx	r4, r2, #16, #8
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8002f40:	f3c2 2007 	ubfx	r0, r2, #8, #8
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8002f44:	b2d2      	uxtb	r2, r2
  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8002f46:	708d      	strb	r5, [r1, #2]
  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8002f48:	70cc      	strb	r4, [r1, #3]
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8002f4a:	7108      	strb	r0, [r1, #4]
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8002f4c:	714a      	strb	r2, [r1, #5]
  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8002f4e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002f50:	0d15      	lsrs	r5, r2, #20
  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8002f52:	f3c2 4403 	ubfx	r4, r2, #16, #4
  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8002f56:	80cd      	strh	r5, [r1, #6]
  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8002f58:	720c      	strb	r4, [r1, #8]
  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8002f5a:	f3c2 35c0 	ubfx	r5, r2, #15, #1
  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8002f5e:	f3c2 3480 	ubfx	r4, r2, #14, #1
  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8002f62:	724d      	strb	r5, [r1, #9]
  pCSD->Reserved2 = 0U; /*!< Reserved */
 8002f64:	2000      	movs	r0, #0
  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8002f66:	728c      	strb	r4, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8002f68:	f3c2 3540 	ubfx	r5, r2, #13, #1
  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8002f6c:	f3c2 3400 	ubfx	r4, r2, #12, #1
  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8002f70:	72cd      	strb	r5, [r1, #11]
  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8002f72:	730c      	strb	r4, [r1, #12]
  pCSD->Reserved2 = 0U; /*!< Reserved */
 8002f74:	7348      	strb	r0, [r1, #13]
  if(hsd->SdCard.CardType == CARD_SDSC)
 8002f76:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8002f78:	2800      	cmp	r0, #0
 8002f7a:	d16c      	bne.n	8003056 <HAL_SD_GetCardCSD+0x12e>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8002f7c:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8002f7e:	f640 74fc 	movw	r4, #4092	; 0xffc
 8002f82:	ea04 0282 	and.w	r2, r4, r2, lsl #2
 8002f86:	ea42 7290 	orr.w	r2, r2, r0, lsr #30
 8002f8a:	610a      	str	r2, [r1, #16]
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8002f8c:	f3c0 5542 	ubfx	r5, r0, #21, #3
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8002f90:	f3c0 4482 	ubfx	r4, r0, #18, #3
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8002f94:	f3c0 32c2 	ubfx	r2, r0, #15, #3
    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8002f98:	f3c0 67c2 	ubfx	r7, r0, #27, #3
    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8002f9c:	f3c0 6602 	ubfx	r6, r0, #24, #3
    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8002fa0:	750f      	strb	r7, [r1, #20]
    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8002fa2:	754e      	strb	r6, [r1, #21]
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8002fa4:	758d      	strb	r5, [r1, #22]
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8002fa6:	75cc      	strb	r4, [r1, #23]
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8002fa8:	760a      	strb	r2, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8002faa:	690a      	ldr	r2, [r1, #16]
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8002fac:	7e0c      	ldrb	r4, [r1, #24]
 8002fae:	f004 0407 	and.w	r4, r4, #7
 8002fb2:	3402      	adds	r4, #2
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8002fb4:	3201      	adds	r2, #1
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8002fb6:	40a2      	lsls	r2, r4
 8002fb8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8002fba:	7a0d      	ldrb	r5, [r1, #8]
 8002fbc:	2401      	movs	r4, #1
 8002fbe:	f005 050f 	and.w	r5, r5, #15
 8002fc2:	40ac      	lsls	r4, r5
    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8002fc4:	0a65      	lsrs	r5, r4, #9
 8002fc6:	fb02 f205 	mul.w	r2, r2, r5
 8002fca:	e9c3 4216 	strd	r4, r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = 512U;
 8002fce:	f44f 7500 	mov.w	r5, #512	; 0x200
 8002fd2:	661d      	str	r5, [r3, #96]	; 0x60
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8002fd4:	f3c0 3480 	ubfx	r4, r0, #14, #1
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8002fd8:	f3c0 12c6 	ubfx	r2, r0, #7, #7
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8002fdc:	f000 007f 	and.w	r0, r0, #127	; 0x7f
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8002fe0:	764c      	strb	r4, [r1, #25]
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8002fe2:	768a      	strb	r2, [r1, #26]
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8002fe4:	76c8      	strb	r0, [r1, #27]
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8002fe6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fe8:	0fda      	lsrs	r2, r3, #31
 8002fea:	770a      	strb	r2, [r1, #28]
  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8002fec:	f3c3 7541 	ubfx	r5, r3, #29, #2
  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8002ff0:	f3c3 6482 	ubfx	r4, r3, #26, #3
  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8002ff4:	f3c3 5283 	ubfx	r2, r3, #22, #4
  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8002ff8:	774d      	strb	r5, [r1, #29]
  pCSD->Reserved3 = 0;
 8002ffa:	2000      	movs	r0, #0
  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8002ffc:	778c      	strb	r4, [r1, #30]
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8002ffe:	f3c3 5540 	ubfx	r5, r3, #21, #1
  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8003002:	77ca      	strb	r2, [r1, #31]
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8003004:	f3c3 4400 	ubfx	r4, r3, #16, #1
  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8003008:	f3c3 32c0 	ubfx	r2, r3, #15, #1
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800300c:	f881 5020 	strb.w	r5, [r1, #32]
  pCSD->Reserved3 = 0;
 8003010:	f881 0021 	strb.w	r0, [r1, #33]	; 0x21
  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8003014:	f3c3 3580 	ubfx	r5, r3, #14, #1
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8003018:	f881 4022 	strb.w	r4, [r1, #34]	; 0x22
  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800301c:	f881 2023 	strb.w	r2, [r1, #35]	; 0x23
  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8003020:	f3c3 3440 	ubfx	r4, r3, #13, #1
  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8003024:	f3c3 3200 	ubfx	r2, r3, #12, #1
  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8003028:	f881 5024 	strb.w	r5, [r1, #36]	; 0x24
  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800302c:	f881 4025 	strb.w	r4, [r1, #37]	; 0x25
  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8003030:	f3c3 2581 	ubfx	r5, r3, #10, #2
  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8003034:	f881 2026 	strb.w	r2, [r1, #38]	; 0x26
  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8003038:	f3c3 2401 	ubfx	r4, r3, #8, #2
  pCSD->Reserved4 = 1;
 800303c:	2201      	movs	r2, #1
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800303e:	f3c3 0346 	ubfx	r3, r3, #1, #7
  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8003042:	f881 5027 	strb.w	r5, [r1, #39]	; 0x27
  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8003046:	f881 4028 	strb.w	r4, [r1, #40]	; 0x28
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800304a:	f881 3029 	strb.w	r3, [r1, #41]	; 0x29
  pCSD->Reserved4 = 1;
 800304e:	f881 202a 	strb.w	r2, [r1, #42]	; 0x2a
}
 8003052:	bcf0      	pop	{r4, r5, r6, r7}
 8003054:	4770      	bx	lr
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8003056:	2801      	cmp	r0, #1
 8003058:	d00c      	beq.n	8003074 <HAL_SD_GetCardCSD+0x14c>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800305a:	681a      	ldr	r2, [r3, #0]
 800305c:	490e      	ldr	r1, [pc, #56]	; (8003098 <HAL_SD_GetCardCSD+0x170>)
 800305e:	6391      	str	r1, [r2, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003060:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003062:	2101      	movs	r1, #1
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003064:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003068:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800306a:	4608      	mov	r0, r1
    hsd->State = HAL_SD_STATE_READY;
 800306c:	f883 1034 	strb.w	r1, [r3, #52]	; 0x34
}
 8003070:	bcf0      	pop	{r4, r5, r6, r7}
 8003072:	4770      	bx	lr
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8003074:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8003076:	0412      	lsls	r2, r2, #16
 8003078:	f402 127c 	and.w	r2, r2, #4128768	; 0x3f0000
 800307c:	ea42 4210 	orr.w	r2, r2, r0, lsr #16
 8003080:	610a      	str	r2, [r1, #16]
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8003082:	690a      	ldr	r2, [r1, #16]
 8003084:	3201      	adds	r2, #1
 8003086:	0292      	lsls	r2, r2, #10
    hsd->SdCard.BlockSize = 512U;
 8003088:	f44f 7400 	mov.w	r4, #512	; 0x200
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800308c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 800308e:	e9c3 4216 	strd	r4, r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8003092:	661c      	str	r4, [r3, #96]	; 0x60
 8003094:	e79e      	b.n	8002fd4 <HAL_SD_GetCardCSD+0xac>
 8003096:	bf00      	nop
 8003098:	004005ff 	.word	0x004005ff

0800309c <HAL_SD_Init>:
{
 800309c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800309e:	b099      	sub	sp, #100	; 0x64
  if(hsd == NULL)
 80030a0:	b1e8      	cbz	r0, 80030de <HAL_SD_Init+0x42>
  if(hsd->State == HAL_SD_STATE_RESET)
 80030a2:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 80030a6:	4604      	mov	r4, r0
 80030a8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d030      	beq.n	8003112 <HAL_SD_Init+0x76>
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80030b0:	2300      	movs	r3, #0
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80030b2:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80030b6:	2276      	movs	r2, #118	; 0x76
 80030b8:	920c      	str	r2, [sp, #48]	; 0x30
  status = SDIO_Init(hsd->Instance, Init);
 80030ba:	aa0a      	add	r2, sp, #40	; 0x28
 80030bc:	ca07      	ldmia	r2, {r0, r1, r2}
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80030be:	e9cd 3307 	strd	r3, r3, [sp, #28]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80030c2:	9309      	str	r3, [sp, #36]	; 0x24
  hsd->State = HAL_SD_STATE_BUSY;
 80030c4:	2303      	movs	r3, #3
  status = SDIO_Init(hsd->Instance, Init);
 80030c6:	6825      	ldr	r5, [r4, #0]
  hsd->State = HAL_SD_STATE_BUSY;
 80030c8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  status = SDIO_Init(hsd->Instance, Init);
 80030cc:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80030d0:	ab07      	add	r3, sp, #28
 80030d2:	4628      	mov	r0, r5
 80030d4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80030d6:	f000 ffd5 	bl	8004084 <SDIO_Init>
  if(status != HAL_OK)
 80030da:	4605      	mov	r5, r0
 80030dc:	b118      	cbz	r0, 80030e6 <HAL_SD_Init+0x4a>
    return HAL_ERROR;
 80030de:	2601      	movs	r6, #1
}
 80030e0:	4630      	mov	r0, r6
 80030e2:	b019      	add	sp, #100	; 0x64
 80030e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_SD_DISABLE(hsd);
 80030e6:	4e78      	ldr	r6, [pc, #480]	; (80032c8 <HAL_SD_Init+0x22c>)
  (void)SDIO_PowerState_ON(hsd->Instance);
 80030e8:	6820      	ldr	r0, [r4, #0]
  __HAL_SD_DISABLE(hsd);
 80030ea:	6035      	str	r5, [r6, #0]
  __HAL_SD_ENABLE(hsd);
 80030ec:	2701      	movs	r7, #1
  (void)SDIO_PowerState_ON(hsd->Instance);
 80030ee:	f000 ffef 	bl	80040d0 <SDIO_PowerState_ON>
  __HAL_SD_ENABLE(hsd);
 80030f2:	6037      	str	r7, [r6, #0]
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80030f4:	6820      	ldr	r0, [r4, #0]
  __IO uint32_t count = 0U;
 80030f6:	9506      	str	r5, [sp, #24]
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80030f8:	f001 f9c6 	bl	8004488 <SDMMC_CmdGoIdleState>
  if(errorstate != HAL_SD_ERROR_NONE)
 80030fc:	4605      	mov	r5, r0
 80030fe:	b160      	cbz	r0, 800311a <HAL_SD_Init+0x7e>
    hsd->State = HAL_SD_STATE_READY;
 8003100:	2601      	movs	r6, #1
 8003102:	f884 6034 	strb.w	r6, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8003106:	6ba3      	ldr	r3, [r4, #56]	; 0x38
}
 8003108:	4630      	mov	r0, r6
    hsd->ErrorCode |= errorstate;
 800310a:	431d      	orrs	r5, r3
 800310c:	63a5      	str	r5, [r4, #56]	; 0x38
}
 800310e:	b019      	add	sp, #100	; 0x64
 8003110:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hsd->Lock = HAL_UNLOCKED;
 8003112:	7702      	strb	r2, [r0, #28]
    HAL_SD_MspInit(hsd);
 8003114:	f7fe fc0a 	bl	800192c <HAL_SD_MspInit>
 8003118:	e7ca      	b.n	80030b0 <HAL_SD_Init+0x14>
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800311a:	6820      	ldr	r0, [r4, #0]
 800311c:	f001 f9da 	bl	80044d4 <SDMMC_CmdOperCond>
  if(errorstate != HAL_SD_ERROR_NONE)
 8003120:	2800      	cmp	r0, #0
 8003122:	f040 80ba 	bne.w	800329a <HAL_SD_Init+0x1fe>
    hsd->SdCard.CardVersion = CARD_V2_X;
 8003126:	64a7      	str	r7, [r4, #72]	; 0x48
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8003128:	2100      	movs	r1, #0
 800312a:	6820      	ldr	r0, [r4, #0]
 800312c:	f001 fa0e 	bl	800454c <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8003130:	bb18      	cbnz	r0, 800317a <HAL_SD_Init+0xde>
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8003132:	9a06      	ldr	r2, [sp, #24]
 8003134:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8003138:	429a      	cmp	r2, r3
 800313a:	d821      	bhi.n	8003180 <HAL_SD_Init+0xe4>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800313c:	4e63      	ldr	r6, [pc, #396]	; (80032cc <HAL_SD_Init+0x230>)
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800313e:	f64f 77fe 	movw	r7, #65534	; 0xfffe
 8003142:	e011      	b.n	8003168 <HAL_SD_Init+0xcc>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8003144:	6820      	ldr	r0, [r4, #0]
 8003146:	f001 fa3f 	bl	80045c8 <SDMMC_CmdAppOperCommand>
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800314a:	4629      	mov	r1, r5
    if(errorstate != HAL_SD_ERROR_NONE)
 800314c:	b9a8      	cbnz	r0, 800317a <HAL_SD_Init+0xde>
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800314e:	6820      	ldr	r0, [r4, #0]
 8003150:	f000 ffca 	bl	80040e8 <SDIO_GetResponse>
    count++;
 8003154:	9b06      	ldr	r3, [sp, #24]
 8003156:	3301      	adds	r3, #1
 8003158:	9306      	str	r3, [sp, #24]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800315a:	9b06      	ldr	r3, [sp, #24]
 800315c:	42bb      	cmp	r3, r7
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800315e:	4605      	mov	r5, r0
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8003160:	ea4f 72d0 	mov.w	r2, r0, lsr #31
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8003164:	d80c      	bhi.n	8003180 <HAL_SD_Init+0xe4>
 8003166:	b95a      	cbnz	r2, 8003180 <HAL_SD_Init+0xe4>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8003168:	2100      	movs	r1, #0
 800316a:	6820      	ldr	r0, [r4, #0]
 800316c:	f001 f9ee 	bl	800454c <SDMMC_CmdAppCommand>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8003170:	4631      	mov	r1, r6
    if(errorstate != HAL_SD_ERROR_NONE)
 8003172:	4605      	mov	r5, r0
 8003174:	2800      	cmp	r0, #0
 8003176:	d0e5      	beq.n	8003144 <HAL_SD_Init+0xa8>
 8003178:	e7c2      	b.n	8003100 <HAL_SD_Init+0x64>
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800317a:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800317e:	e7bf      	b.n	8003100 <HAL_SD_Init+0x64>
  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8003180:	9a06      	ldr	r2, [sp, #24]
 8003182:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8003186:	429a      	cmp	r2, r3
 8003188:	f200 8096 	bhi.w	80032b8 <HAL_SD_Init+0x21c>
  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800318c:	f3c5 7580 	ubfx	r5, r5, #30, #1
  uint16_t sd_rca = 1U;
 8003190:	2301      	movs	r3, #1
 8003192:	6465      	str	r5, [r4, #68]	; 0x44
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8003194:	6820      	ldr	r0, [r4, #0]
  uint16_t sd_rca = 1U;
 8003196:	f8ad 3016 	strh.w	r3, [sp, #22]
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800319a:	f000 ffa1 	bl	80040e0 <SDIO_GetPowerState>
 800319e:	2800      	cmp	r0, #0
 80031a0:	f000 8085 	beq.w	80032ae <HAL_SD_Init+0x212>
  if(hsd->SdCard.CardType != CARD_SECURED)
 80031a4:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80031a6:	6823      	ldr	r3, [r4, #0]
 80031a8:	2a03      	cmp	r2, #3
 80031aa:	d12f      	bne.n	800320c <HAL_SD_Init+0x170>
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80031ac:	4618      	mov	r0, r3
 80031ae:	2104      	movs	r1, #4
 80031b0:	f000 ff9a 	bl	80040e8 <SDIO_GetResponse>
 80031b4:	0d00      	lsrs	r0, r0, #20
 80031b6:	64e0      	str	r0, [r4, #76]	; 0x4c
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80031b8:	a90d      	add	r1, sp, #52	; 0x34
 80031ba:	4620      	mov	r0, r4
 80031bc:	f7ff feb4 	bl	8002f28 <HAL_SD_GetCardCSD>
 80031c0:	4606      	mov	r6, r0
 80031c2:	2800      	cmp	r0, #0
 80031c4:	d17b      	bne.n	80032be <HAL_SD_Init+0x222>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80031c6:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80031c8:	6820      	ldr	r0, [r4, #0]
 80031ca:	0412      	lsls	r2, r2, #16
 80031cc:	4633      	mov	r3, r6
 80031ce:	f001 f91d 	bl	800440c <SDMMC_CmdSelDesel>
  if(errorstate != HAL_SD_ERROR_NONE)
 80031d2:	b130      	cbz	r0, 80031e2 <HAL_SD_Init+0x146>
    hsd->State = HAL_SD_STATE_READY;
 80031d4:	2601      	movs	r6, #1
 80031d6:	f884 6034 	strb.w	r6, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80031da:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80031dc:	4308      	orrs	r0, r1
 80031de:	63a0      	str	r0, [r4, #56]	; 0x38
 80031e0:	e77e      	b.n	80030e0 <HAL_SD_Init+0x44>
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 80031e2:	4623      	mov	r3, r4
 80031e4:	1d25      	adds	r5, r4, #4
 80031e6:	f853 7b10 	ldr.w	r7, [r3], #16
 80031ea:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80031ee:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80031f2:	4638      	mov	r0, r7
 80031f4:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 80031f8:	f000 ff44 	bl	8004084 <SDIO_Init>
  hsd->State = HAL_SD_STATE_READY;
 80031fc:	2301      	movs	r3, #1
}
 80031fe:	4630      	mov	r0, r6
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003200:	63a6      	str	r6, [r4, #56]	; 0x38
  hsd->Context = SD_CONTEXT_NONE;
 8003202:	6326      	str	r6, [r4, #48]	; 0x30
  hsd->State = HAL_SD_STATE_READY;
 8003204:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 8003208:	b019      	add	sp, #100	; 0x64
 800320a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800320c:	4618      	mov	r0, r3
 800320e:	f001 fa13 	bl	8004638 <SDMMC_CmdSendCID>
    if(errorstate != HAL_SD_ERROR_NONE)
 8003212:	2800      	cmp	r0, #0
 8003214:	d1de      	bne.n	80031d4 <HAL_SD_Init+0x138>
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003216:	4601      	mov	r1, r0
 8003218:	6820      	ldr	r0, [r4, #0]
 800321a:	f000 ff65 	bl	80040e8 <SDIO_GetResponse>
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800321e:	2104      	movs	r1, #4
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003220:	6760      	str	r0, [r4, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8003222:	6820      	ldr	r0, [r4, #0]
 8003224:	f000 ff60 	bl	80040e8 <SDIO_GetResponse>
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8003228:	2108      	movs	r1, #8
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800322a:	67a0      	str	r0, [r4, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800322c:	6820      	ldr	r0, [r4, #0]
 800322e:	f000 ff5b 	bl	80040e8 <SDIO_GetResponse>
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8003232:	210c      	movs	r1, #12
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8003234:	67e0      	str	r0, [r4, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8003236:	6820      	ldr	r0, [r4, #0]
 8003238:	f000 ff56 	bl	80040e8 <SDIO_GetResponse>
  if(hsd->SdCard.CardType != CARD_SECURED)
 800323c:	6c63      	ldr	r3, [r4, #68]	; 0x44
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800323e:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
  if(hsd->SdCard.CardType != CARD_SECURED)
 8003242:	2b03      	cmp	r3, #3
 8003244:	d03e      	beq.n	80032c4 <HAL_SD_Init+0x228>
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8003246:	f10d 0116 	add.w	r1, sp, #22
 800324a:	6820      	ldr	r0, [r4, #0]
 800324c:	f001 fa64 	bl	8004718 <SDMMC_CmdSetRelAdd>
    if(errorstate != HAL_SD_ERROR_NONE)
 8003250:	2800      	cmp	r0, #0
 8003252:	d1bf      	bne.n	80031d4 <HAL_SD_Init+0x138>
  if(hsd->SdCard.CardType != CARD_SECURED)
 8003254:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8003256:	6823      	ldr	r3, [r4, #0]
 8003258:	2a03      	cmp	r2, #3
 800325a:	d0a7      	beq.n	80031ac <HAL_SD_Init+0x110>
    hsd->SdCard.RelCardAdd = sd_rca;
 800325c:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 8003260:	6521      	str	r1, [r4, #80]	; 0x50
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003262:	4618      	mov	r0, r3
 8003264:	0409      	lsls	r1, r1, #16
 8003266:	f001 fa1d 	bl	80046a4 <SDMMC_CmdSendCSD>
    if(errorstate != HAL_SD_ERROR_NONE)
 800326a:	2800      	cmp	r0, #0
 800326c:	d1b2      	bne.n	80031d4 <HAL_SD_Init+0x138>
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800326e:	4601      	mov	r1, r0
 8003270:	6820      	ldr	r0, [r4, #0]
 8003272:	f000 ff39 	bl	80040e8 <SDIO_GetResponse>
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8003276:	2104      	movs	r1, #4
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003278:	6660      	str	r0, [r4, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800327a:	6820      	ldr	r0, [r4, #0]
 800327c:	f000 ff34 	bl	80040e8 <SDIO_GetResponse>
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8003280:	2108      	movs	r1, #8
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8003282:	66a0      	str	r0, [r4, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8003284:	6820      	ldr	r0, [r4, #0]
 8003286:	f000 ff2f 	bl	80040e8 <SDIO_GetResponse>
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800328a:	210c      	movs	r1, #12
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800328c:	66e0      	str	r0, [r4, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800328e:	6820      	ldr	r0, [r4, #0]
 8003290:	f000 ff2a 	bl	80040e8 <SDIO_GetResponse>
 8003294:	6823      	ldr	r3, [r4, #0]
 8003296:	6720      	str	r0, [r4, #112]	; 0x70
 8003298:	e788      	b.n	80031ac <HAL_SD_Init+0x110>
    hsd->SdCard.CardVersion = CARD_V1_X;
 800329a:	64a5      	str	r5, [r4, #72]	; 0x48
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800329c:	6820      	ldr	r0, [r4, #0]
 800329e:	f001 f8f3 	bl	8004488 <SDMMC_CmdGoIdleState>
    if(errorstate != HAL_SD_ERROR_NONE)
 80032a2:	b938      	cbnz	r0, 80032b4 <HAL_SD_Init+0x218>
  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80032a4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80032a6:	2b01      	cmp	r3, #1
 80032a8:	f47f af43 	bne.w	8003132 <HAL_SD_Init+0x96>
 80032ac:	e73c      	b.n	8003128 <HAL_SD_Init+0x8c>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80032ae:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80032b2:	e78f      	b.n	80031d4 <HAL_SD_Init+0x138>
    if(errorstate != HAL_SD_ERROR_NONE)
 80032b4:	4605      	mov	r5, r0
 80032b6:	e723      	b.n	8003100 <HAL_SD_Init+0x64>
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80032b8:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
 80032bc:	e720      	b.n	8003100 <HAL_SD_Init+0x64>
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80032be:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80032c2:	e787      	b.n	80031d4 <HAL_SD_Init+0x138>
 80032c4:	6823      	ldr	r3, [r4, #0]
 80032c6:	e771      	b.n	80031ac <HAL_SD_Init+0x110>
 80032c8:	422580a0 	.word	0x422580a0
 80032cc:	c1100000 	.word	0xc1100000

080032d0 <HAL_SD_GetCardInfo>:
{
 80032d0:	b470      	push	{r4, r5, r6}
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80032d2:	e9d0 4211 	ldrd	r4, r2, [r0, #68]	; 0x44
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80032d6:	e9d0 3613 	ldrd	r3, r6, [r0, #76]	; 0x4c
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80032da:	6d45      	ldr	r5, [r0, #84]	; 0x54
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80032dc:	600c      	str	r4, [r1, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80032de:	604a      	str	r2, [r1, #4]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80032e0:	6d84      	ldr	r4, [r0, #88]	; 0x58
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80032e2:	608b      	str	r3, [r1, #8]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80032e4:	e9d0 2317 	ldrd	r2, r3, [r0, #92]	; 0x5c
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80032e8:	e9c1 6503 	strd	r6, r5, [r1, #12]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80032ec:	e9c1 4205 	strd	r4, r2, [r1, #20]
}
 80032f0:	2000      	movs	r0, #0
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80032f2:	61cb      	str	r3, [r1, #28]
}
 80032f4:	bc70      	pop	{r4, r5, r6}
 80032f6:	4770      	bx	lr

080032f8 <HAL_SD_GetCardState>:
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80032f8:	6d01      	ldr	r1, [r0, #80]	; 0x50
{
 80032fa:	b510      	push	{r4, lr}
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80032fc:	0409      	lsls	r1, r1, #16
{
 80032fe:	4604      	mov	r4, r0
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003300:	6800      	ldr	r0, [r0, #0]
 8003302:	f001 fa5f 	bl	80047c4 <SDMMC_CmdSendStatus>
  if(errorstate != HAL_SD_ERROR_NONE)
 8003306:	b120      	cbz	r0, 8003312 <HAL_SD_GetCardState+0x1a>
    hsd->ErrorCode |= errorstate;
 8003308:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800330a:	4308      	orrs	r0, r1
 800330c:	63a0      	str	r0, [r4, #56]	; 0x38
 800330e:	2000      	movs	r0, #0
}
 8003310:	bd10      	pop	{r4, pc}
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003312:	4601      	mov	r1, r0
 8003314:	6820      	ldr	r0, [r4, #0]
 8003316:	f000 fee7 	bl	80040e8 <SDIO_GetResponse>
 800331a:	f3c0 2043 	ubfx	r0, r0, #9, #4
}
 800331e:	bd10      	pop	{r4, pc}

08003320 <HAL_SPI_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003320:	2800      	cmp	r0, #0
 8003322:	d03b      	beq.n	800339c <HAL_SPI_Init+0x7c>
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003324:	f890 2051 	ldrb.w	r2, [r0, #81]	; 0x51
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003328:	2300      	movs	r3, #0
{
 800332a:	b570      	push	{r4, r5, r6, lr}
  if (hspi->State == HAL_SPI_STATE_RESET)
 800332c:	f002 01ff 	and.w	r1, r2, #255	; 0xff
 8003330:	4604      	mov	r4, r0
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003332:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8003334:	b362      	cbz	r2, 8003390 <HAL_SPI_Init+0x70>
 8003336:	4618      	mov	r0, r3
  __HAL_SPI_DISABLE(hspi);

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8003338:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800333c:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
 8003340:	432b      	orrs	r3, r5
 8003342:	4313      	orrs	r3, r2
 8003344:	6962      	ldr	r2, [r4, #20]
 8003346:	69e5      	ldr	r5, [r4, #28]
 8003348:	6a26      	ldr	r6, [r4, #32]
 800334a:	430b      	orrs	r3, r1
 800334c:	4313      	orrs	r3, r2
 800334e:	69a2      	ldr	r2, [r4, #24]
  __HAL_SPI_DISABLE(hspi);
 8003350:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8003352:	432b      	orrs	r3, r5
  hspi->State = HAL_SPI_STATE_BUSY;
 8003354:	2502      	movs	r5, #2
 8003356:	f884 5051 	strb.w	r5, [r4, #81]	; 0x51
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800335a:	4333      	orrs	r3, r6
 800335c:	f402 7500 	and.w	r5, r2, #512	; 0x200
  __HAL_SPI_DISABLE(hspi);
 8003360:	680e      	ldr	r6, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8003362:	432b      	orrs	r3, r5
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8003364:	0c12      	lsrs	r2, r2, #16
 8003366:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8003368:	f002 0204 	and.w	r2, r2, #4
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800336c:	4303      	orrs	r3, r0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800336e:	432a      	orrs	r2, r5
  __HAL_SPI_DISABLE(hspi);
 8003370:	f026 0640 	bic.w	r6, r6, #64	; 0x40
 8003374:	600e      	str	r6, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8003376:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8003378:	604a      	str	r2, [r1, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800337a:	69cb      	ldr	r3, [r1, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800337c:	2200      	movs	r2, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800337e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  hspi->State     = HAL_SPI_STATE_READY;
 8003382:	2501      	movs	r5, #1
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003384:	61cb      	str	r3, [r1, #28]

  return HAL_OK;
 8003386:	4610      	mov	r0, r2
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003388:	6562      	str	r2, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800338a:	f884 5051 	strb.w	r5, [r4, #81]	; 0x51
}
 800338e:	bd70      	pop	{r4, r5, r6, pc}
    hspi->Lock = HAL_UNLOCKED;
 8003390:	f880 1050 	strb.w	r1, [r0, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8003394:	f7fe fb28 	bl	80019e8 <HAL_SPI_MspInit>
 8003398:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800339a:	e7cd      	b.n	8003338 <HAL_SPI_Init+0x18>
    return HAL_ERROR;
 800339c:	2001      	movs	r0, #1
}
 800339e:	4770      	bx	lr

080033a0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80033a4:	f890 4050 	ldrb.w	r4, [r0, #80]	; 0x50
 80033a8:	2c01      	cmp	r4, #1
{
 80033aa:	b082      	sub	sp, #8
  __HAL_LOCK(hspi);
 80033ac:	f000 8088 	beq.w	80034c0 <HAL_SPI_Transmit+0x120>
 80033b0:	461d      	mov	r5, r3
 80033b2:	2301      	movs	r3, #1
 80033b4:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
 80033b8:	4604      	mov	r4, r0
 80033ba:	4616      	mov	r6, r2
 80033bc:	4688      	mov	r8, r1

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80033be:	f7fe fccd 	bl	8001d5c <HAL_GetTick>
 80033c2:	4607      	mov	r7, r0
  initial_TxXferCount = Size;

  if (hspi->State != HAL_SPI_STATE_READY)
 80033c4:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 80033c8:	b2c0      	uxtb	r0, r0
 80033ca:	2801      	cmp	r0, #1
 80033cc:	d009      	beq.n	80033e2 <HAL_SPI_Transmit+0x42>
  {
    errorcode = HAL_BUSY;
 80033ce:	2002      	movs	r0, #2
  {
    errorcode = HAL_ERROR;
  }

error:
  hspi->State = HAL_SPI_STATE_READY;
 80033d0:	2201      	movs	r2, #1
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80033d2:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
 80033d4:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80033d8:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  return errorcode;
}
 80033dc:	b002      	add	sp, #8
 80033de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((pData == NULL) || (Size == 0U))
 80033e2:	f1b8 0f00 	cmp.w	r8, #0
 80033e6:	d0f3      	beq.n	80033d0 <HAL_SPI_Transmit+0x30>
 80033e8:	2e00      	cmp	r6, #0
 80033ea:	d0f1      	beq.n	80033d0 <HAL_SPI_Transmit+0x30>
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80033ec:	68a2      	ldr	r2, [r4, #8]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80033ee:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80033f2:	2300      	movs	r3, #0
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80033f4:	2103      	movs	r1, #3
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80033f6:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80033fa:	f884 1051 	strb.w	r1, [r4, #81]	; 0x51
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80033fe:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003400:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->RxXferSize  = 0U;
 8003402:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxISR       = NULL;
 8003404:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
  hspi->TxXferCount = Size;
 8003408:	86e6      	strh	r6, [r4, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800340a:	86a6      	strh	r6, [r4, #52]	; 0x34
  hspi->RxXferCount = 0U;
 800340c:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800340e:	6823      	ldr	r3, [r4, #0]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003410:	d103      	bne.n	800341a <HAL_SPI_Transmit+0x7a>
    SPI_1LINE_TX(hspi);
 8003412:	681a      	ldr	r2, [r3, #0]
 8003414:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003418:	601a      	str	r2, [r3, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800341a:	681a      	ldr	r2, [r3, #0]
 800341c:	0652      	lsls	r2, r2, #25
 800341e:	d553      	bpl.n	80034c8 <HAL_SPI_Transmit+0x128>
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003420:	68e2      	ldr	r2, [r4, #12]
 8003422:	6861      	ldr	r1, [r4, #4]
 8003424:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8003428:	d07e      	beq.n	8003528 <HAL_SPI_Transmit+0x188>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800342a:	2900      	cmp	r1, #0
 800342c:	d168      	bne.n	8003500 <HAL_SPI_Transmit+0x160>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800342e:	f898 2000 	ldrb.w	r2, [r8]
 8003432:	731a      	strb	r2, [r3, #12]
      hspi->TxXferCount--;
 8003434:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003436:	6b22      	ldr	r2, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8003438:	3b01      	subs	r3, #1
 800343a:	b29b      	uxth	r3, r3
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800343c:	3201      	adds	r2, #1
      hspi->TxXferCount--;
 800343e:	86e3      	strh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003440:	6322      	str	r2, [r4, #48]	; 0x30
 8003442:	1c6b      	adds	r3, r5, #1
 8003444:	d145      	bne.n	80034d2 <HAL_SPI_Transmit+0x132>
    while (hspi->TxXferCount > 0U)
 8003446:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8003448:	b29b      	uxth	r3, r3
 800344a:	b18b      	cbz	r3, 8003470 <HAL_SPI_Transmit+0xd0>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800344c:	6823      	ldr	r3, [r4, #0]
 800344e:	689a      	ldr	r2, [r3, #8]
 8003450:	0796      	lsls	r6, r2, #30
 8003452:	d55f      	bpl.n	8003514 <HAL_SPI_Transmit+0x174>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003454:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003456:	7812      	ldrb	r2, [r2, #0]
 8003458:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 800345a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800345c:	6b22      	ldr	r2, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 800345e:	3b01      	subs	r3, #1
 8003460:	b29b      	uxth	r3, r3
 8003462:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8003464:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003466:	3201      	adds	r2, #1
    while (hspi->TxXferCount > 0U)
 8003468:	b29b      	uxth	r3, r3
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800346a:	6322      	str	r2, [r4, #48]	; 0x30
    while (hspi->TxXferCount > 0U)
 800346c:	2b00      	cmp	r3, #0
 800346e:	d1ed      	bne.n	800344c <HAL_SPI_Transmit+0xac>
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003470:	4b6d      	ldr	r3, [pc, #436]	; (8003628 <HAL_SPI_Transmit+0x288>)
 8003472:	496e      	ldr	r1, [pc, #440]	; (800362c <HAL_SPI_Transmit+0x28c>)
 8003474:	681b      	ldr	r3, [r3, #0]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003476:	6862      	ldr	r2, [r4, #4]
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003478:	fba1 1303 	umull	r1, r3, r1, r3
 800347c:	0d5b      	lsrs	r3, r3, #21
 800347e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003482:	fb01 f303 	mul.w	r3, r1, r3
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003486:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800348a:	9301      	str	r3, [sp, #4]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800348c:	d107      	bne.n	800349e <HAL_SPI_Transmit+0xfe>
 800348e:	e03a      	b.n	8003506 <HAL_SPI_Transmit+0x166>
    {
      if (count == 0U)
      {
        break;
      }
      count--;
 8003490:	9b01      	ldr	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003492:	6822      	ldr	r2, [r4, #0]
      count--;
 8003494:	3b01      	subs	r3, #1
 8003496:	9301      	str	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003498:	6893      	ldr	r3, [r2, #8]
 800349a:	061b      	lsls	r3, r3, #24
 800349c:	d502      	bpl.n	80034a4 <HAL_SPI_Transmit+0x104>
      if (count == 0U)
 800349e:	9b01      	ldr	r3, [sp, #4]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d1f5      	bne.n	8003490 <HAL_SPI_Transmit+0xf0>
 80034a4:	68a3      	ldr	r3, [r4, #8]
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80034a6:	b933      	cbnz	r3, 80034b6 <HAL_SPI_Transmit+0x116>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80034a8:	6822      	ldr	r2, [r4, #0]
 80034aa:	9300      	str	r3, [sp, #0]
 80034ac:	68d3      	ldr	r3, [r2, #12]
 80034ae:	9300      	str	r3, [sp, #0]
 80034b0:	6893      	ldr	r3, [r2, #8]
 80034b2:	9300      	str	r3, [sp, #0]
 80034b4:	9b00      	ldr	r3, [sp, #0]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80034b6:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 80034b8:	3000      	adds	r0, #0
 80034ba:	bf18      	it	ne
 80034bc:	2001      	movne	r0, #1
error:
 80034be:	e787      	b.n	80033d0 <HAL_SPI_Transmit+0x30>
  __HAL_LOCK(hspi);
 80034c0:	2002      	movs	r0, #2
}
 80034c2:	b002      	add	sp, #8
 80034c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_SPI_ENABLE(hspi);
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80034ce:	601a      	str	r2, [r3, #0]
 80034d0:	e7a6      	b.n	8003420 <HAL_SPI_Transmit+0x80>
    while (hspi->TxXferCount > 0U)
 80034d2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80034d4:	b29b      	uxth	r3, r3
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d0ca      	beq.n	8003470 <HAL_SPI_Transmit+0xd0>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80034da:	6823      	ldr	r3, [r4, #0]
 80034dc:	689a      	ldr	r2, [r3, #8]
 80034de:	0792      	lsls	r2, r2, #30
 80034e0:	d51b      	bpl.n	800351a <HAL_SPI_Transmit+0x17a>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80034e2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80034e4:	7812      	ldrb	r2, [r2, #0]
 80034e6:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 80034e8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80034ea:	6b22      	ldr	r2, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80034ec:	3b01      	subs	r3, #1
 80034ee:	b29b      	uxth	r3, r3
 80034f0:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 80034f2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80034f4:	3201      	adds	r2, #1
    while (hspi->TxXferCount > 0U)
 80034f6:	b29b      	uxth	r3, r3
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80034f8:	6322      	str	r2, [r4, #48]	; 0x30
    while (hspi->TxXferCount > 0U)
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d1ed      	bne.n	80034da <HAL_SPI_Transmit+0x13a>
 80034fe:	e7b7      	b.n	8003470 <HAL_SPI_Transmit+0xd0>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003500:	2e01      	cmp	r6, #1
 8003502:	d19e      	bne.n	8003442 <HAL_SPI_Transmit+0xa2>
 8003504:	e793      	b.n	800342e <HAL_SPI_Transmit+0x8e>
 8003506:	1c68      	adds	r0, r5, #1
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003508:	6822      	ldr	r2, [r4, #0]
 800350a:	d155      	bne.n	80035b8 <HAL_SPI_Transmit+0x218>
 800350c:	6893      	ldr	r3, [r2, #8]
 800350e:	0619      	lsls	r1, r3, #24
 8003510:	d4fc      	bmi.n	800350c <HAL_SPI_Transmit+0x16c>
 8003512:	e7c7      	b.n	80034a4 <HAL_SPI_Transmit+0x104>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003514:	f7fe fc22 	bl	8001d5c <HAL_GetTick>
 8003518:	e795      	b.n	8003446 <HAL_SPI_Transmit+0xa6>
 800351a:	f7fe fc1f 	bl	8001d5c <HAL_GetTick>
 800351e:	1bc0      	subs	r0, r0, r7
 8003520:	42a8      	cmp	r0, r5
 8003522:	d3d6      	bcc.n	80034d2 <HAL_SPI_Transmit+0x132>
          errorcode = HAL_TIMEOUT;
 8003524:	2003      	movs	r0, #3
 8003526:	e753      	b.n	80033d0 <HAL_SPI_Transmit+0x30>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003528:	2900      	cmp	r1, #0
 800352a:	d03b      	beq.n	80035a4 <HAL_SPI_Transmit+0x204>
 800352c:	2e01      	cmp	r6, #1
 800352e:	d039      	beq.n	80035a4 <HAL_SPI_Transmit+0x204>
 8003530:	1c68      	adds	r0, r5, #1
 8003532:	d120      	bne.n	8003576 <HAL_SPI_Transmit+0x1d6>
    while (hspi->TxXferCount > 0U)
 8003534:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8003536:	b29b      	uxth	r3, r3
 8003538:	2b00      	cmp	r3, #0
 800353a:	d099      	beq.n	8003470 <HAL_SPI_Transmit+0xd0>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800353c:	6823      	ldr	r3, [r4, #0]
 800353e:	689a      	ldr	r2, [r3, #8]
 8003540:	0791      	lsls	r1, r2, #30
 8003542:	d510      	bpl.n	8003566 <HAL_SPI_Transmit+0x1c6>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003544:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003546:	f832 1b02 	ldrh.w	r1, [r2], #2
 800354a:	60d9      	str	r1, [r3, #12]
        hspi->TxXferCount--;
 800354c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800354e:	6322      	str	r2, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8003550:	3b01      	subs	r3, #1
 8003552:	b29b      	uxth	r3, r3
 8003554:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8003556:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8003558:	b29b      	uxth	r3, r3
 800355a:	2b00      	cmp	r3, #0
 800355c:	d088      	beq.n	8003470 <HAL_SPI_Transmit+0xd0>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800355e:	6823      	ldr	r3, [r4, #0]
 8003560:	689a      	ldr	r2, [r3, #8]
 8003562:	0791      	lsls	r1, r2, #30
 8003564:	d4ee      	bmi.n	8003544 <HAL_SPI_Transmit+0x1a4>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003566:	f7fe fbf9 	bl	8001d5c <HAL_GetTick>
 800356a:	e7e3      	b.n	8003534 <HAL_SPI_Transmit+0x194>
 800356c:	f7fe fbf6 	bl	8001d5c <HAL_GetTick>
 8003570:	1bc0      	subs	r0, r0, r7
 8003572:	42a8      	cmp	r0, r5
 8003574:	d2d6      	bcs.n	8003524 <HAL_SPI_Transmit+0x184>
    while (hspi->TxXferCount > 0U)
 8003576:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8003578:	b29b      	uxth	r3, r3
 800357a:	2b00      	cmp	r3, #0
 800357c:	f43f af78 	beq.w	8003470 <HAL_SPI_Transmit+0xd0>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003580:	6823      	ldr	r3, [r4, #0]
 8003582:	689a      	ldr	r2, [r3, #8]
 8003584:	0796      	lsls	r6, r2, #30
 8003586:	d5f1      	bpl.n	800356c <HAL_SPI_Transmit+0x1cc>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003588:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800358a:	f832 1b02 	ldrh.w	r1, [r2], #2
 800358e:	60d9      	str	r1, [r3, #12]
        hspi->TxXferCount--;
 8003590:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003592:	6322      	str	r2, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8003594:	3b01      	subs	r3, #1
 8003596:	b29b      	uxth	r3, r3
 8003598:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 800359a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800359c:	b29b      	uxth	r3, r3
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d1ee      	bne.n	8003580 <HAL_SPI_Transmit+0x1e0>
 80035a2:	e765      	b.n	8003470 <HAL_SPI_Transmit+0xd0>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80035a4:	4641      	mov	r1, r8
 80035a6:	f831 2b02 	ldrh.w	r2, [r1], #2
 80035aa:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 80035ac:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80035ae:	6321      	str	r1, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80035b0:	3b01      	subs	r3, #1
 80035b2:	b29b      	uxth	r3, r3
 80035b4:	86e3      	strh	r3, [r4, #54]	; 0x36
 80035b6:	e7bb      	b.n	8003530 <HAL_SPI_Transmit+0x190>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80035b8:	6893      	ldr	r3, [r2, #8]
 80035ba:	061a      	lsls	r2, r3, #24
 80035bc:	f57f af72 	bpl.w	80034a4 <HAL_SPI_Transmit+0x104>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80035c0:	f7fe fbcc 	bl	8001d5c <HAL_GetTick>
 80035c4:	1bc0      	subs	r0, r0, r7
 80035c6:	4285      	cmp	r5, r0
 80035c8:	d89d      	bhi.n	8003506 <HAL_SPI_Transmit+0x166>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80035ca:	e9d4 2000 	ldrd	r2, r0, [r4]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80035ce:	6851      	ldr	r1, [r2, #4]
 80035d0:	68a3      	ldr	r3, [r4, #8]
 80035d2:	f021 01e0 	bic.w	r1, r1, #224	; 0xe0
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80035d6:	f5b0 7f82 	cmp.w	r0, #260	; 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80035da:	6051      	str	r1, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80035dc:	d018      	beq.n	8003610 <HAL_SPI_Transmit+0x270>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80035de:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80035e0:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 80035e4:	d107      	bne.n	80035f6 <HAL_SPI_Transmit+0x256>
          SPI_RESET_CRC(hspi);
 80035e6:	6811      	ldr	r1, [r2, #0]
 80035e8:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 80035ec:	6011      	str	r1, [r2, #0]
 80035ee:	6811      	ldr	r1, [r2, #0]
 80035f0:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
 80035f4:	6011      	str	r1, [r2, #0]
        hspi->State = HAL_SPI_STATE_READY;
 80035f6:	2201      	movs	r2, #1
 80035f8:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80035fc:	6d62      	ldr	r2, [r4, #84]	; 0x54
        __HAL_UNLOCK(hspi);
 80035fe:	2000      	movs	r0, #0
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003600:	f042 0220 	orr.w	r2, r2, #32
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003604:	2120      	movs	r1, #32
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003606:	6562      	str	r2, [r4, #84]	; 0x54
        __HAL_UNLOCK(hspi);
 8003608:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800360c:	6561      	str	r1, [r4, #84]	; 0x54
 800360e:	e74a      	b.n	80034a6 <HAL_SPI_Transmit+0x106>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003610:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003614:	d002      	beq.n	800361c <HAL_SPI_Transmit+0x27c>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003616:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800361a:	d1e0      	bne.n	80035de <HAL_SPI_Transmit+0x23e>
          __HAL_SPI_DISABLE(hspi);
 800361c:	6811      	ldr	r1, [r2, #0]
 800361e:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8003622:	6011      	str	r1, [r2, #0]
 8003624:	e7db      	b.n	80035de <HAL_SPI_Transmit+0x23e>
 8003626:	bf00      	nop
 8003628:	20000004 	.word	0x20000004
 800362c:	165e9f81 	.word	0x165e9f81

08003630 <HAL_SPI_ErrorCallback>:
 8003630:	4770      	bx	lr
 8003632:	bf00      	nop

08003634 <HAL_SPI_IRQHandler>:
{
 8003634:	b530      	push	{r4, r5, lr}
  uint32_t itsource = hspi->Instance->CR2;
 8003636:	6801      	ldr	r1, [r0, #0]
 8003638:	684d      	ldr	r5, [r1, #4]
  uint32_t itflag   = hspi->Instance->SR;
 800363a:	688b      	ldr	r3, [r1, #8]
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800363c:	f3c3 1480 	ubfx	r4, r3, #6, #1
{
 8003640:	b085      	sub	sp, #20
 8003642:	4602      	mov	r2, r0
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003644:	b954      	cbnz	r4, 800365c <HAL_SPI_IRQHandler+0x28>
 8003646:	f013 0f01 	tst.w	r3, #1
 800364a:	d007      	beq.n	800365c <HAL_SPI_IRQHandler+0x28>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800364c:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003650:	d004      	beq.n	800365c <HAL_SPI_IRQHandler+0x28>
    hspi->RxISR(hspi);
 8003652:	6c03      	ldr	r3, [r0, #64]	; 0x40
}
 8003654:	b005      	add	sp, #20
 8003656:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    hspi->TxISR(hspi);
 800365a:	4718      	bx	r3
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800365c:	0798      	lsls	r0, r3, #30
 800365e:	d507      	bpl.n	8003670 <HAL_SPI_IRQHandler+0x3c>
 8003660:	0628      	lsls	r0, r5, #24
 8003662:	d505      	bpl.n	8003670 <HAL_SPI_IRQHandler+0x3c>
    hspi->TxISR(hspi);
 8003664:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8003666:	4610      	mov	r0, r2
}
 8003668:	b005      	add	sp, #20
 800366a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    hspi->TxISR(hspi);
 800366e:	4718      	bx	r3
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003670:	f3c3 1040 	ubfx	r0, r3, #5, #1
 8003674:	2800      	cmp	r0, #0
 8003676:	d13d      	bne.n	80036f4 <HAL_SPI_IRQHandler+0xc0>
 8003678:	2c00      	cmp	r4, #0
 800367a:	d04e      	beq.n	800371a <HAL_SPI_IRQHandler+0xe6>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800367c:	06ac      	lsls	r4, r5, #26
 800367e:	d537      	bpl.n	80036f0 <HAL_SPI_IRQHandler+0xbc>
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003680:	f892 4051 	ldrb.w	r4, [r2, #81]	; 0x51
 8003684:	2c03      	cmp	r4, #3
 8003686:	d05a      	beq.n	800373e <HAL_SPI_IRQHandler+0x10a>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003688:	6d54      	ldr	r4, [r2, #84]	; 0x54
 800368a:	f044 0404 	orr.w	r4, r4, #4
 800368e:	6554      	str	r4, [r2, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003690:	9000      	str	r0, [sp, #0]
 8003692:	68c8      	ldr	r0, [r1, #12]
 8003694:	9000      	str	r0, [sp, #0]
 8003696:	6888      	ldr	r0, [r1, #8]
 8003698:	9000      	str	r0, [sp, #0]
 800369a:	9800      	ldr	r0, [sp, #0]
 800369c:	f3c3 2300 	ubfx	r3, r3, #8, #1
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d13e      	bne.n	8003722 <HAL_SPI_IRQHandler+0xee>
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80036a4:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80036a6:	b31b      	cbz	r3, 80036f0 <HAL_SPI_IRQHandler+0xbc>
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80036a8:	684b      	ldr	r3, [r1, #4]
 80036aa:	4614      	mov	r4, r2
 80036ac:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
      hspi->State = HAL_SPI_STATE_READY;
 80036b0:	2201      	movs	r2, #1
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80036b2:	07ad      	lsls	r5, r5, #30
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80036b4:	604b      	str	r3, [r1, #4]
      hspi->State = HAL_SPI_STATE_READY;
 80036b6:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80036ba:	d048      	beq.n	800374e <HAL_SPI_IRQHandler+0x11a>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80036bc:	684b      	ldr	r3, [r1, #4]
        if (hspi->hdmarx != NULL)
 80036be:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80036c0:	f023 0303 	bic.w	r3, r3, #3
 80036c4:	604b      	str	r3, [r1, #4]
        if (hspi->hdmarx != NULL)
 80036c6:	b140      	cbz	r0, 80036da <HAL_SPI_IRQHandler+0xa6>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80036c8:	4b2a      	ldr	r3, [pc, #168]	; (8003774 <HAL_SPI_IRQHandler+0x140>)
 80036ca:	6503      	str	r3, [r0, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80036cc:	f7fe fc3a 	bl	8001f44 <HAL_DMA_Abort_IT>
 80036d0:	b118      	cbz	r0, 80036da <HAL_SPI_IRQHandler+0xa6>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80036d2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80036d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80036d8:	6563      	str	r3, [r4, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80036da:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80036dc:	b140      	cbz	r0, 80036f0 <HAL_SPI_IRQHandler+0xbc>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80036de:	4b25      	ldr	r3, [pc, #148]	; (8003774 <HAL_SPI_IRQHandler+0x140>)
 80036e0:	6503      	str	r3, [r0, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80036e2:	f7fe fc2f 	bl	8001f44 <HAL_DMA_Abort_IT>
 80036e6:	b118      	cbz	r0, 80036f0 <HAL_SPI_IRQHandler+0xbc>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80036e8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80036ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80036ee:	6563      	str	r3, [r4, #84]	; 0x54
}
 80036f0:	b005      	add	sp, #20
 80036f2:	bd30      	pop	{r4, r5, pc}
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80036f4:	06a8      	lsls	r0, r5, #26
 80036f6:	d5fb      	bpl.n	80036f0 <HAL_SPI_IRQHandler+0xbc>
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80036f8:	b9ec      	cbnz	r4, 8003736 <HAL_SPI_IRQHandler+0x102>
 80036fa:	f3c3 2300 	ubfx	r3, r3, #8, #1
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80036fe:	6d50      	ldr	r0, [r2, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003700:	2400      	movs	r4, #0
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003702:	f040 0001 	orr.w	r0, r0, #1
 8003706:	6550      	str	r0, [r2, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003708:	9402      	str	r4, [sp, #8]
 800370a:	6888      	ldr	r0, [r1, #8]
 800370c:	9002      	str	r0, [sp, #8]
 800370e:	6808      	ldr	r0, [r1, #0]
 8003710:	f020 0040 	bic.w	r0, r0, #64	; 0x40
 8003714:	6008      	str	r0, [r1, #0]
 8003716:	9802      	ldr	r0, [sp, #8]
 8003718:	e7c2      	b.n	80036a0 <HAL_SPI_IRQHandler+0x6c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800371a:	05dc      	lsls	r4, r3, #23
 800371c:	d5e8      	bpl.n	80036f0 <HAL_SPI_IRQHandler+0xbc>
 800371e:	06ab      	lsls	r3, r5, #26
 8003720:	d5e6      	bpl.n	80036f0 <HAL_SPI_IRQHandler+0xbc>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8003722:	6d53      	ldr	r3, [r2, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8003724:	2000      	movs	r0, #0
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8003726:	f043 0308 	orr.w	r3, r3, #8
 800372a:	6553      	str	r3, [r2, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800372c:	9003      	str	r0, [sp, #12]
 800372e:	688b      	ldr	r3, [r1, #8]
 8003730:	9303      	str	r3, [sp, #12]
 8003732:	9b03      	ldr	r3, [sp, #12]
 8003734:	e7b6      	b.n	80036a4 <HAL_SPI_IRQHandler+0x70>
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003736:	f892 0051 	ldrb.w	r0, [r2, #81]	; 0x51
 800373a:	2803      	cmp	r0, #3
 800373c:	d10b      	bne.n	8003756 <HAL_SPI_IRQHandler+0x122>
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800373e:	2300      	movs	r3, #0
 8003740:	9301      	str	r3, [sp, #4]
 8003742:	68cb      	ldr	r3, [r1, #12]
 8003744:	9301      	str	r3, [sp, #4]
 8003746:	688b      	ldr	r3, [r1, #8]
 8003748:	9301      	str	r3, [sp, #4]
 800374a:	9b01      	ldr	r3, [sp, #4]
        return;
 800374c:	e7d0      	b.n	80036f0 <HAL_SPI_IRQHandler+0xbc>
        HAL_SPI_ErrorCallback(hspi);
 800374e:	4620      	mov	r0, r4
 8003750:	f7ff ff6e 	bl	8003630 <HAL_SPI_ErrorCallback>
 8003754:	e7cc      	b.n	80036f0 <HAL_SPI_IRQHandler+0xbc>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003756:	6d50      	ldr	r0, [r2, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003758:	2400      	movs	r4, #0
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800375a:	f040 0004 	orr.w	r0, r0, #4
 800375e:	6550      	str	r0, [r2, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003760:	9400      	str	r4, [sp, #0]
 8003762:	68c8      	ldr	r0, [r1, #12]
 8003764:	9000      	str	r0, [sp, #0]
 8003766:	6888      	ldr	r0, [r1, #8]
 8003768:	9000      	str	r0, [sp, #0]
 800376a:	f3c3 2300 	ubfx	r3, r3, #8, #1
 800376e:	9800      	ldr	r0, [sp, #0]
 8003770:	e7c5      	b.n	80036fe <HAL_SPI_IRQHandler+0xca>
 8003772:	bf00      	nop
 8003774:	08003779 	.word	0x08003779

08003778 <SPI_DMAAbortOnError>:
{
 8003778:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800377a:	6b83      	ldr	r3, [r0, #56]	; 0x38
  hspi->RxXferCount = 0U;
 800377c:	2200      	movs	r2, #0
 800377e:	87da      	strh	r2, [r3, #62]	; 0x3e
  HAL_SPI_ErrorCallback(hspi);
 8003780:	4618      	mov	r0, r3
  hspi->TxXferCount = 0U;
 8003782:	86da      	strh	r2, [r3, #54]	; 0x36
  HAL_SPI_ErrorCallback(hspi);
 8003784:	f7ff ff54 	bl	8003630 <HAL_SPI_ErrorCallback>
}
 8003788:	bd08      	pop	{r3, pc}
 800378a:	bf00      	nop

0800378c <HAL_SPI_GetState>:
  return hspi->State;
 800378c:	f890 0051 	ldrb.w	r0, [r0, #81]	; 0x51
}
 8003790:	4770      	bx	lr
 8003792:	bf00      	nop

08003794 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003794:	2800      	cmp	r0, #0
 8003796:	d05c      	beq.n	8003852 <HAL_TIM_Base_Init+0xbe>
{
 8003798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800379a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800379e:	4604      	mov	r4, r0
 80037a0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80037a4:	b3bb      	cbz	r3, 8003816 <HAL_TIM_Base_Init+0x82>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037a6:	6822      	ldr	r2, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80037a8:	4e3a      	ldr	r6, [pc, #232]	; (8003894 <HAL_TIM_Base_Init+0x100>)
 80037aa:	69a5      	ldr	r5, [r4, #24]
 80037ac:	68e0      	ldr	r0, [r4, #12]
 80037ae:	6861      	ldr	r1, [r4, #4]
  htim->State = HAL_TIM_STATE_BUSY;
 80037b0:	2302      	movs	r3, #2
 80037b2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80037b6:	42b2      	cmp	r2, r6
  tmpcr1 = TIMx->CR1;
 80037b8:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80037ba:	d04c      	beq.n	8003856 <HAL_TIM_Base_Init+0xc2>
 80037bc:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 80037c0:	d058      	beq.n	8003874 <HAL_TIM_Base_Init+0xe0>
 80037c2:	f5a6 467c 	sub.w	r6, r6, #64512	; 0xfc00
 80037c6:	42b2      	cmp	r2, r6
 80037c8:	d02a      	beq.n	8003820 <HAL_TIM_Base_Init+0x8c>
 80037ca:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80037ce:	42b2      	cmp	r2, r6
 80037d0:	d026      	beq.n	8003820 <HAL_TIM_Base_Init+0x8c>
 80037d2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80037d6:	42b2      	cmp	r2, r6
 80037d8:	d022      	beq.n	8003820 <HAL_TIM_Base_Init+0x8c>
 80037da:	f506 4678 	add.w	r6, r6, #63488	; 0xf800
 80037de:	42b2      	cmp	r2, r6
 80037e0:	d01e      	beq.n	8003820 <HAL_TIM_Base_Init+0x8c>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80037e2:	f506 5670 	add.w	r6, r6, #15360	; 0x3c00
 80037e6:	42b2      	cmp	r2, r6
 80037e8:	d013      	beq.n	8003812 <HAL_TIM_Base_Init+0x7e>
 80037ea:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80037ee:	42b2      	cmp	r2, r6
 80037f0:	d00f      	beq.n	8003812 <HAL_TIM_Base_Init+0x7e>
 80037f2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80037f6:	42b2      	cmp	r2, r6
 80037f8:	d00b      	beq.n	8003812 <HAL_TIM_Base_Init+0x7e>
 80037fa:	f5a6 3698 	sub.w	r6, r6, #77824	; 0x13000
 80037fe:	42b2      	cmp	r2, r6
 8003800:	d007      	beq.n	8003812 <HAL_TIM_Base_Init+0x7e>
 8003802:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8003806:	42b2      	cmp	r2, r6
 8003808:	d003      	beq.n	8003812 <HAL_TIM_Base_Init+0x7e>
 800380a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800380e:	42b2      	cmp	r2, r6
 8003810:	d138      	bne.n	8003884 <HAL_TIM_Base_Init+0xf0>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003812:	6926      	ldr	r6, [r4, #16]
 8003814:	e033      	b.n	800387e <HAL_TIM_Base_Init+0xea>
    htim->Lock = HAL_UNLOCKED;
 8003816:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800381a:	f7fe f923 	bl	8001a64 <HAL_TIM_Base_MspInit>
 800381e:	e7c2      	b.n	80037a6 <HAL_TIM_Base_Init+0x12>
    tmpcr1 |= Structure->CounterMode;
 8003820:	68a6      	ldr	r6, [r4, #8]
  TIMx->ARR = (uint32_t)Structure->Period ;

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003822:	4f1d      	ldr	r7, [pc, #116]	; (8003898 <HAL_TIM_Base_Init+0x104>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003824:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003828:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800382a:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 800382c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003830:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003832:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003836:	432b      	orrs	r3, r5
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003838:	42ba      	cmp	r2, r7
  TIMx->CR1 = tmpcr1;
 800383a:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800383c:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800383e:	6291      	str	r1, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003840:	d101      	bne.n	8003846 <HAL_TIM_Base_Init+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003842:	6963      	ldr	r3, [r4, #20]
 8003844:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003846:	2301      	movs	r3, #1
 8003848:	6153      	str	r3, [r2, #20]
  return HAL_OK;
 800384a:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800384c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8003850:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8003852:	2001      	movs	r0, #1
}
 8003854:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 8003856:	68a7      	ldr	r7, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003858:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800385a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800385e:	433b      	orrs	r3, r7
    tmpcr1 &= ~TIM_CR1_CKD;
 8003860:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003864:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003866:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800386a:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 800386c:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800386e:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003870:	6291      	str	r1, [r2, #40]	; 0x28
 8003872:	e7e6      	b.n	8003842 <HAL_TIM_Base_Init+0xae>
    tmpcr1 |= Structure->CounterMode;
 8003874:	68a7      	ldr	r7, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003876:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003878:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800387c:	433b      	orrs	r3, r7
    tmpcr1 &= ~TIM_CR1_CKD;
 800387e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003882:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003884:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003888:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 800388a:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800388c:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800388e:	6291      	str	r1, [r2, #40]	; 0x28
 8003890:	e7d9      	b.n	8003846 <HAL_TIM_Base_Init+0xb2>
 8003892:	bf00      	nop
 8003894:	40010000 	.word	0x40010000
 8003898:	40010400 	.word	0x40010400

0800389c <HAL_TIM_Base_Start>:
  htim->State = HAL_TIM_STATE_BUSY;
 800389c:	2302      	movs	r3, #2
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800389e:	6802      	ldr	r2, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80038a0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80038a4:	6893      	ldr	r3, [r2, #8]
 80038a6:	f003 0307 	and.w	r3, r3, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038aa:	2b06      	cmp	r3, #6
 80038ac:	d003      	beq.n	80038b6 <HAL_TIM_Base_Start+0x1a>
    __HAL_TIM_ENABLE(htim);
 80038ae:	6813      	ldr	r3, [r2, #0]
 80038b0:	f043 0301 	orr.w	r3, r3, #1
 80038b4:	6013      	str	r3, [r2, #0]
  htim->State = HAL_TIM_STATE_READY;
 80038b6:	2301      	movs	r3, #1
 80038b8:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 80038bc:	2000      	movs	r0, #0
 80038be:	4770      	bx	lr

080038c0 <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80038c0:	6803      	ldr	r3, [r0, #0]
 80038c2:	68da      	ldr	r2, [r3, #12]
 80038c4:	f042 0201 	orr.w	r2, r2, #1
 80038c8:	60da      	str	r2, [r3, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80038ca:	689a      	ldr	r2, [r3, #8]
 80038cc:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038d0:	2a06      	cmp	r2, #6
 80038d2:	d003      	beq.n	80038dc <HAL_TIM_Base_Start_IT+0x1c>
    __HAL_TIM_ENABLE(htim);
 80038d4:	681a      	ldr	r2, [r3, #0]
 80038d6:	f042 0201 	orr.w	r2, r2, #1
 80038da:	601a      	str	r2, [r3, #0]
}
 80038dc:	2000      	movs	r0, #0
 80038de:	4770      	bx	lr

080038e0 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 80038e0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80038e4:	2b01      	cmp	r3, #1
 80038e6:	d05a      	beq.n	800399e <HAL_TIM_ConfigClockSource+0xbe>
  htim->State = HAL_TIM_STATE_BUSY;
 80038e8:	2202      	movs	r2, #2
  tmpsmcr = htim->Instance->SMCR;
 80038ea:	6803      	ldr	r3, [r0, #0]
{
 80038ec:	b4f0      	push	{r4, r5, r6, r7}
  htim->State = HAL_TIM_STATE_BUSY;
 80038ee:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 80038f2:	689a      	ldr	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 80038f4:	680c      	ldr	r4, [r1, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80038f6:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80038fa:	f022 0277 	bic.w	r2, r2, #119	; 0x77
  __HAL_LOCK(htim);
 80038fe:	2501      	movs	r5, #1
  switch (sClockSourceConfig->ClockSource)
 8003900:	2c40      	cmp	r4, #64	; 0x40
  __HAL_LOCK(htim);
 8003902:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c
  htim->Instance->SMCR = tmpsmcr;
 8003906:	609a      	str	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 8003908:	d074      	beq.n	80039f4 <HAL_TIM_ConfigClockSource+0x114>
 800390a:	d94a      	bls.n	80039a2 <HAL_TIM_ConfigClockSource+0xc2>
 800390c:	2c60      	cmp	r4, #96	; 0x60
 800390e:	d02d      	beq.n	800396c <HAL_TIM_ConfigClockSource+0x8c>
 8003910:	d956      	bls.n	80039c0 <HAL_TIM_ConfigClockSource+0xe0>
 8003912:	2c70      	cmp	r4, #112	; 0x70
 8003914:	d01a      	beq.n	800394c <HAL_TIM_ConfigClockSource+0x6c>
 8003916:	f5b4 5f00 	cmp.w	r4, #8192	; 0x2000
 800391a:	d10e      	bne.n	800393a <HAL_TIM_ConfigClockSource+0x5a>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800391c:	e9d1 5201 	ldrd	r5, r2, [r1, #4]
 8003920:	68cc      	ldr	r4, [r1, #12]
  tmpsmcr = TIMx->SMCR;
 8003922:	6899      	ldr	r1, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003924:	432a      	orrs	r2, r5
 8003926:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800392a:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800392e:	430a      	orrs	r2, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003930:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003932:	689a      	ldr	r2, [r3, #8]
 8003934:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003938:	609a      	str	r2, [r3, #8]
  __HAL_UNLOCK(htim);
 800393a:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 800393c:	2201      	movs	r2, #1
 800393e:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8003942:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
}
 8003946:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;
 8003948:	4618      	mov	r0, r3
}
 800394a:	4770      	bx	lr
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800394c:	e9d1 5201 	ldrd	r5, r2, [r1, #4]
 8003950:	68cc      	ldr	r4, [r1, #12]
  tmpsmcr = TIMx->SMCR;
 8003952:	6899      	ldr	r1, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003954:	432a      	orrs	r2, r5
 8003956:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800395a:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800395e:	430a      	orrs	r2, r1
  TIMx->SMCR = tmpsmcr;
 8003960:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 8003962:	689a      	ldr	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003964:	f042 0277 	orr.w	r2, r2, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8003968:	609a      	str	r2, [r3, #8]
      break;
 800396a:	e7e6      	b.n	800393a <HAL_TIM_ConfigClockSource+0x5a>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800396c:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800396e:	684d      	ldr	r5, [r1, #4]
 8003970:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003972:	f024 0410 	bic.w	r4, r4, #16
 8003976:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003978:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 800397a:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800397c:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003980:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8003984:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003988:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 800398c:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 800398e:	621a      	str	r2, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 8003990:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003992:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003996:	f042 0267 	orr.w	r2, r2, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 800399a:	609a      	str	r2, [r3, #8]
 800399c:	e7cd      	b.n	800393a <HAL_TIM_ConfigClockSource+0x5a>
  __HAL_LOCK(htim);
 800399e:	2002      	movs	r0, #2
}
 80039a0:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 80039a2:	2c10      	cmp	r4, #16
 80039a4:	d004      	beq.n	80039b0 <HAL_TIM_ConfigClockSource+0xd0>
 80039a6:	d93d      	bls.n	8003a24 <HAL_TIM_ConfigClockSource+0x144>
 80039a8:	2c20      	cmp	r4, #32
 80039aa:	d001      	beq.n	80039b0 <HAL_TIM_ConfigClockSource+0xd0>
 80039ac:	2c30      	cmp	r4, #48	; 0x30
 80039ae:	d1c4      	bne.n	800393a <HAL_TIM_ConfigClockSource+0x5a>
  tmpsmcr = TIMx->SMCR;
 80039b0:	689a      	ldr	r2, [r3, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80039b2:	f044 0407 	orr.w	r4, r4, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 80039b6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80039ba:	4314      	orrs	r4, r2
  TIMx->SMCR = tmpsmcr;
 80039bc:	609c      	str	r4, [r3, #8]
 80039be:	e7bc      	b.n	800393a <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 80039c0:	2c50      	cmp	r4, #80	; 0x50
 80039c2:	d1ba      	bne.n	800393a <HAL_TIM_ConfigClockSource+0x5a>
  tmpccer = TIMx->CCER;
 80039c4:	6a1d      	ldr	r5, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80039c6:	6a1e      	ldr	r6, [r3, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80039c8:	684c      	ldr	r4, [r1, #4]
 80039ca:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80039cc:	f026 0601 	bic.w	r6, r6, #1
 80039d0:	621e      	str	r6, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039d2:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80039d4:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80039d8:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80039dc:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
  tmpccer |= TIM_ICPolarity;
 80039e0:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 80039e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80039e4:	6219      	str	r1, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 80039e6:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80039e8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80039ec:	f042 0257 	orr.w	r2, r2, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 80039f0:	609a      	str	r2, [r3, #8]
 80039f2:	e7a2      	b.n	800393a <HAL_TIM_ConfigClockSource+0x5a>
  tmpccer = TIMx->CCER;
 80039f4:	6a1d      	ldr	r5, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80039f6:	6a1e      	ldr	r6, [r3, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80039f8:	684c      	ldr	r4, [r1, #4]
 80039fa:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80039fc:	f026 0601 	bic.w	r6, r6, #1
 8003a00:	621e      	str	r6, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a02:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003a04:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003a08:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003a0c:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
  tmpccer |= TIM_ICPolarity;
 8003a10:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 8003a12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a14:	6219      	str	r1, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 8003a16:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003a18:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003a1c:	f042 0247 	orr.w	r2, r2, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 8003a20:	609a      	str	r2, [r3, #8]
 8003a22:	e78a      	b.n	800393a <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8003a24:	2c00      	cmp	r4, #0
 8003a26:	d0c3      	beq.n	80039b0 <HAL_TIM_ConfigClockSource+0xd0>
 8003a28:	e787      	b.n	800393a <HAL_TIM_ConfigClockSource+0x5a>
 8003a2a:	bf00      	nop

08003a2c <HAL_TIM_OC_DelayElapsedCallback>:
 8003a2c:	4770      	bx	lr
 8003a2e:	bf00      	nop

08003a30 <HAL_TIM_IC_CaptureCallback>:
 8003a30:	4770      	bx	lr
 8003a32:	bf00      	nop

08003a34 <HAL_TIM_PWM_PulseFinishedCallback>:
 8003a34:	4770      	bx	lr
 8003a36:	bf00      	nop

08003a38 <HAL_TIM_TriggerCallback>:
 8003a38:	4770      	bx	lr
 8003a3a:	bf00      	nop

08003a3c <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003a3c:	6803      	ldr	r3, [r0, #0]
 8003a3e:	691a      	ldr	r2, [r3, #16]
 8003a40:	0791      	lsls	r1, r2, #30
{
 8003a42:	b510      	push	{r4, lr}
 8003a44:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003a46:	d502      	bpl.n	8003a4e <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003a48:	68da      	ldr	r2, [r3, #12]
 8003a4a:	0792      	lsls	r2, r2, #30
 8003a4c:	d45f      	bmi.n	8003b0e <HAL_TIM_IRQHandler+0xd2>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003a4e:	691a      	ldr	r2, [r3, #16]
 8003a50:	0750      	lsls	r0, r2, #29
 8003a52:	d502      	bpl.n	8003a5a <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003a54:	68da      	ldr	r2, [r3, #12]
 8003a56:	0751      	lsls	r1, r2, #29
 8003a58:	d446      	bmi.n	8003ae8 <HAL_TIM_IRQHandler+0xac>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003a5a:	691a      	ldr	r2, [r3, #16]
 8003a5c:	0712      	lsls	r2, r2, #28
 8003a5e:	d502      	bpl.n	8003a66 <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003a60:	68da      	ldr	r2, [r3, #12]
 8003a62:	0710      	lsls	r0, r2, #28
 8003a64:	d42e      	bmi.n	8003ac4 <HAL_TIM_IRQHandler+0x88>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003a66:	691a      	ldr	r2, [r3, #16]
 8003a68:	06d2      	lsls	r2, r2, #27
 8003a6a:	d502      	bpl.n	8003a72 <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003a6c:	68da      	ldr	r2, [r3, #12]
 8003a6e:	06d0      	lsls	r0, r2, #27
 8003a70:	d418      	bmi.n	8003aa4 <HAL_TIM_IRQHandler+0x68>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003a72:	691a      	ldr	r2, [r3, #16]
 8003a74:	07d1      	lsls	r1, r2, #31
 8003a76:	d502      	bpl.n	8003a7e <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003a78:	68da      	ldr	r2, [r3, #12]
 8003a7a:	07d2      	lsls	r2, r2, #31
 8003a7c:	d45d      	bmi.n	8003b3a <HAL_TIM_IRQHandler+0xfe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003a7e:	691a      	ldr	r2, [r3, #16]
 8003a80:	0610      	lsls	r0, r2, #24
 8003a82:	d502      	bpl.n	8003a8a <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003a84:	68da      	ldr	r2, [r3, #12]
 8003a86:	0611      	lsls	r1, r2, #24
 8003a88:	d45f      	bmi.n	8003b4a <HAL_TIM_IRQHandler+0x10e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003a8a:	691a      	ldr	r2, [r3, #16]
 8003a8c:	0652      	lsls	r2, r2, #25
 8003a8e:	d502      	bpl.n	8003a96 <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003a90:	68da      	ldr	r2, [r3, #12]
 8003a92:	0650      	lsls	r0, r2, #25
 8003a94:	d461      	bmi.n	8003b5a <HAL_TIM_IRQHandler+0x11e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003a96:	691a      	ldr	r2, [r3, #16]
 8003a98:	0691      	lsls	r1, r2, #26
 8003a9a:	d502      	bpl.n	8003aa2 <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003a9c:	68da      	ldr	r2, [r3, #12]
 8003a9e:	0692      	lsls	r2, r2, #26
 8003aa0:	d443      	bmi.n	8003b2a <HAL_TIM_IRQHandler+0xee>
}
 8003aa2:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003aa4:	f06f 0210 	mvn.w	r2, #16
 8003aa8:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003aaa:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003aac:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003aae:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003ab2:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8003ab4:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003ab6:	d064      	beq.n	8003b82 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8003ab8:	f7ff ffba 	bl	8003a30 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003abc:	2200      	movs	r2, #0
 8003abe:	6823      	ldr	r3, [r4, #0]
 8003ac0:	7722      	strb	r2, [r4, #28]
 8003ac2:	e7d6      	b.n	8003a72 <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003ac4:	f06f 0208 	mvn.w	r2, #8
 8003ac8:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003aca:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003acc:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003ace:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003ad0:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8003ad2:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003ad4:	d152      	bne.n	8003b7c <HAL_TIM_IRQHandler+0x140>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ad6:	f7ff ffa9 	bl	8003a2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ada:	4620      	mov	r0, r4
 8003adc:	f7ff ffaa 	bl	8003a34 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	6823      	ldr	r3, [r4, #0]
 8003ae4:	7722      	strb	r2, [r4, #28]
 8003ae6:	e7be      	b.n	8003a66 <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003ae8:	f06f 0204 	mvn.w	r2, #4
 8003aec:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003aee:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003af0:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003af2:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003af6:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8003af8:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003afa:	d13c      	bne.n	8003b76 <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003afc:	f7ff ff96 	bl	8003a2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b00:	4620      	mov	r0, r4
 8003b02:	f7ff ff97 	bl	8003a34 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b06:	2200      	movs	r2, #0
 8003b08:	6823      	ldr	r3, [r4, #0]
 8003b0a:	7722      	strb	r2, [r4, #28]
 8003b0c:	e7a5      	b.n	8003a5a <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003b0e:	f06f 0202 	mvn.w	r2, #2
 8003b12:	611a      	str	r2, [r3, #16]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003b14:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003b16:	2201      	movs	r2, #1
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003b18:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003b1a:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003b1c:	d025      	beq.n	8003b6a <HAL_TIM_IRQHandler+0x12e>
          HAL_TIM_IC_CaptureCallback(htim);
 8003b1e:	f7ff ff87 	bl	8003a30 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b22:	2200      	movs	r2, #0
 8003b24:	6823      	ldr	r3, [r4, #0]
 8003b26:	7722      	strb	r2, [r4, #28]
 8003b28:	e791      	b.n	8003a4e <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003b2a:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8003b2e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003b30:	611a      	str	r2, [r3, #16]
}
 8003b32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8003b36:	f000 b871 	b.w	8003c1c <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003b3a:	f06f 0201 	mvn.w	r2, #1
 8003b3e:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8003b40:	4620      	mov	r0, r4
 8003b42:	f7fd fad7 	bl	80010f4 <HAL_TIM_PeriodElapsedCallback>
 8003b46:	6823      	ldr	r3, [r4, #0]
 8003b48:	e799      	b.n	8003a7e <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003b4a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003b4e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8003b50:	4620      	mov	r0, r4
 8003b52:	f000 f865 	bl	8003c20 <HAL_TIMEx_BreakCallback>
 8003b56:	6823      	ldr	r3, [r4, #0]
 8003b58:	e797      	b.n	8003a8a <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003b5a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003b5e:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8003b60:	4620      	mov	r0, r4
 8003b62:	f7ff ff69 	bl	8003a38 <HAL_TIM_TriggerCallback>
 8003b66:	6823      	ldr	r3, [r4, #0]
 8003b68:	e795      	b.n	8003a96 <HAL_TIM_IRQHandler+0x5a>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b6a:	f7ff ff5f 	bl	8003a2c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b6e:	4620      	mov	r0, r4
 8003b70:	f7ff ff60 	bl	8003a34 <HAL_TIM_PWM_PulseFinishedCallback>
 8003b74:	e7d5      	b.n	8003b22 <HAL_TIM_IRQHandler+0xe6>
        HAL_TIM_IC_CaptureCallback(htim);
 8003b76:	f7ff ff5b 	bl	8003a30 <HAL_TIM_IC_CaptureCallback>
 8003b7a:	e7c4      	b.n	8003b06 <HAL_TIM_IRQHandler+0xca>
        HAL_TIM_IC_CaptureCallback(htim);
 8003b7c:	f7ff ff58 	bl	8003a30 <HAL_TIM_IC_CaptureCallback>
 8003b80:	e7ae      	b.n	8003ae0 <HAL_TIM_IRQHandler+0xa4>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b82:	f7ff ff53 	bl	8003a2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b86:	4620      	mov	r0, r4
 8003b88:	f7ff ff54 	bl	8003a34 <HAL_TIM_PWM_PulseFinishedCallback>
 8003b8c:	e796      	b.n	8003abc <HAL_TIM_IRQHandler+0x80>
 8003b8e:	bf00      	nop

08003b90 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b90:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003b94:	2b01      	cmp	r3, #1
 8003b96:	d03a      	beq.n	8003c0e <HAL_TIMEx_MasterConfigSynchronization+0x7e>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003b98:	6803      	ldr	r3, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8003b9a:	2202      	movs	r2, #2
{
 8003b9c:	b470      	push	{r4, r5, r6}
  htim->State = HAL_TIM_STATE_BUSY;
 8003b9e:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 8003ba2:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003ba4:	680e      	ldr	r6, [r1, #0]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ba6:	4d1b      	ldr	r5, [pc, #108]	; (8003c14 <HAL_TIMEx_MasterConfigSynchronization+0x84>)
  tmpsmcr = htim->Instance->SMCR;
 8003ba8:	689c      	ldr	r4, [r3, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8003baa:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003bae:	4332      	orrs	r2, r6
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bb0:	42ab      	cmp	r3, r5
  __HAL_LOCK(htim);
 8003bb2:	f04f 0601 	mov.w	r6, #1
 8003bb6:	f880 603c 	strb.w	r6, [r0, #60]	; 0x3c
  htim->Instance->CR2 = tmpcr2;
 8003bba:	605a      	str	r2, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bbc:	d019      	beq.n	8003bf2 <HAL_TIMEx_MasterConfigSynchronization+0x62>
 8003bbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bc2:	d016      	beq.n	8003bf2 <HAL_TIMEx_MasterConfigSynchronization+0x62>
 8003bc4:	4a14      	ldr	r2, [pc, #80]	; (8003c18 <HAL_TIMEx_MasterConfigSynchronization+0x88>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d013      	beq.n	8003bf2 <HAL_TIMEx_MasterConfigSynchronization+0x62>
 8003bca:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d00f      	beq.n	8003bf2 <HAL_TIMEx_MasterConfigSynchronization+0x62>
 8003bd2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d00b      	beq.n	8003bf2 <HAL_TIMEx_MasterConfigSynchronization+0x62>
 8003bda:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d007      	beq.n	8003bf2 <HAL_TIMEx_MasterConfigSynchronization+0x62>
 8003be2:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d003      	beq.n	8003bf2 <HAL_TIMEx_MasterConfigSynchronization+0x62>
 8003bea:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d104      	bne.n	8003bfc <HAL_TIMEx_MasterConfigSynchronization+0x6c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003bf2:	684a      	ldr	r2, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003bf4:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003bf8:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003bfa:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8003bfc:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8003bfe:	2201      	movs	r2, #1
 8003c00:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8003c04:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
}
 8003c08:	bc70      	pop	{r4, r5, r6}
  return HAL_OK;
 8003c0a:	4618      	mov	r0, r3
}
 8003c0c:	4770      	bx	lr
  __HAL_LOCK(htim);
 8003c0e:	2002      	movs	r0, #2
}
 8003c10:	4770      	bx	lr
 8003c12:	bf00      	nop
 8003c14:	40010000 	.word	0x40010000
 8003c18:	40000400 	.word	0x40000400

08003c1c <HAL_TIMEx_CommutCallback>:
 8003c1c:	4770      	bx	lr
 8003c1e:	bf00      	nop

08003c20 <HAL_TIMEx_BreakCallback>:
 8003c20:	4770      	bx	lr
 8003c22:	bf00      	nop

08003c24 <HAL_UART_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c24:	2800      	cmp	r0, #0
 8003c26:	f000 8093 	beq.w	8003d50 <HAL_UART_Init+0x12c>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c2a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
{
 8003c2e:	b570      	push	{r4, r5, r6, lr}
  if (huart->gState == HAL_UART_STATE_RESET)
 8003c30:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003c34:	4604      	mov	r4, r0
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	f000 8085 	beq.w	8003d46 <HAL_UART_Init+0x122>
  }

  huart->gState = HAL_UART_STATE_BUSY;

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003c3c:	6823      	ldr	r3, [r4, #0]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003c3e:	6926      	ldr	r6, [r4, #16]
  huart->gState = HAL_UART_STATE_BUSY;
 8003c40:	2224      	movs	r2, #36	; 0x24
 8003c42:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8003c46:	68d8      	ldr	r0, [r3, #12]
 8003c48:	f420 5000 	bic.w	r0, r0, #8192	; 0x2000
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003c4c:	e9d4 2502 	ldrd	r2, r5, [r4, #8]
  __HAL_UART_DISABLE(huart);
 8003c50:	60d8      	str	r0, [r3, #12]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c52:	6919      	ldr	r1, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003c54:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c56:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 8003c5a:	4329      	orrs	r1, r5
 8003c5c:	6119      	str	r1, [r3, #16]
  MODIFY_REG(huart->Instance->CR1,
 8003c5e:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003c60:	6965      	ldr	r5, [r4, #20]
 8003c62:	4332      	orrs	r2, r6
  MODIFY_REG(huart->Instance->CR1,
 8003c64:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003c68:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1,
 8003c6a:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003c6e:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8003c70:	430a      	orrs	r2, r1
 8003c72:	60da      	str	r2, [r3, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003c74:	695a      	ldr	r2, [r3, #20]
 8003c76:	69a1      	ldr	r1, [r4, #24]
 8003c78:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003c7c:	430a      	orrs	r2, r1

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c7e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003c82:	615a      	str	r2, [r3, #20]
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003c84:	4a36      	ldr	r2, [pc, #216]	; (8003d60 <HAL_UART_Init+0x13c>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c86:	d034      	beq.n	8003cf2 <HAL_UART_Init+0xce>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d063      	beq.n	8003d54 <HAL_UART_Init+0x130>
 8003c8c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d05f      	beq.n	8003d54 <HAL_UART_Init+0x130>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003c94:	f7fe fd7e 	bl	8002794 <HAL_RCC_GetPCLK1Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003c98:	6863      	ldr	r3, [r4, #4]
 8003c9a:	4d32      	ldr	r5, [pc, #200]	; (8003d64 <HAL_UART_Init+0x140>)
 8003c9c:	2219      	movs	r2, #25
 8003c9e:	fba0 0102 	umull	r0, r1, r0, r2
 8003ca2:	009a      	lsls	r2, r3, #2
 8003ca4:	0f9b      	lsrs	r3, r3, #30
 8003ca6:	f7fc ff8f 	bl	8000bc8 <__aeabi_uldivmod>
 8003caa:	fba5 2100 	umull	r2, r1, r5, r0
 8003cae:	0949      	lsrs	r1, r1, #5
 8003cb0:	2264      	movs	r2, #100	; 0x64
 8003cb2:	fb02 0211 	mls	r2, r2, r1, r0
 8003cb6:	0112      	lsls	r2, r2, #4
 8003cb8:	3232      	adds	r2, #50	; 0x32
 8003cba:	6823      	ldr	r3, [r4, #0]
 8003cbc:	fba5 0202 	umull	r0, r2, r5, r2
 8003cc0:	0109      	lsls	r1, r1, #4
 8003cc2:	eb01 1252 	add.w	r2, r1, r2, lsr #5
 8003cc6:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003cc8:	691a      	ldr	r2, [r3, #16]
 8003cca:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003cce:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003cd0:	695a      	ldr	r2, [r3, #20]
 8003cd2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003cd6:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8003cd8:	68da      	ldr	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cda:	2500      	movs	r5, #0
  huart->gState = HAL_UART_STATE_READY;
 8003cdc:	2120      	movs	r1, #32
  __HAL_UART_ENABLE(huart);
 8003cde:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003ce2:	60da      	str	r2, [r3, #12]
  return HAL_OK;
 8003ce4:	4628      	mov	r0, r5
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ce6:	63e5      	str	r5, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003ce8:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003cec:	f884 103a 	strb.w	r1, [r4, #58]	; 0x3a
}
 8003cf0:	bd70      	pop	{r4, r5, r6, pc}
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d031      	beq.n	8003d5a <HAL_UART_Init+0x136>
 8003cf6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d02d      	beq.n	8003d5a <HAL_UART_Init+0x136>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003cfe:	f7fe fd49 	bl	8002794 <HAL_RCC_GetPCLK1Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003d02:	6862      	ldr	r2, [r4, #4]
 8003d04:	2600      	movs	r6, #0
 8003d06:	1892      	adds	r2, r2, r2
 8003d08:	f04f 0119 	mov.w	r1, #25
 8003d0c:	eb46 0306 	adc.w	r3, r6, r6
 8003d10:	fba0 0101 	umull	r0, r1, r0, r1
 8003d14:	f7fc ff58 	bl	8000bc8 <__aeabi_uldivmod>
 8003d18:	4e12      	ldr	r6, [pc, #72]	; (8003d64 <HAL_UART_Init+0x140>)
 8003d1a:	6823      	ldr	r3, [r4, #0]
 8003d1c:	fba6 2100 	umull	r2, r1, r6, r0
 8003d20:	094d      	lsrs	r5, r1, #5
 8003d22:	2264      	movs	r2, #100	; 0x64
 8003d24:	fb02 0215 	mls	r2, r2, r5, r0
 8003d28:	00d2      	lsls	r2, r2, #3
 8003d2a:	3232      	adds	r2, #50	; 0x32
 8003d2c:	fba6 1202 	umull	r1, r2, r6, r2
 8003d30:	0952      	lsrs	r2, r2, #5
 8003d32:	f002 0107 	and.w	r1, r2, #7
 8003d36:	0052      	lsls	r2, r2, #1
 8003d38:	eb01 1105 	add.w	r1, r1, r5, lsl #4
 8003d3c:	f402 72f8 	and.w	r2, r2, #496	; 0x1f0
 8003d40:	440a      	add	r2, r1
 8003d42:	609a      	str	r2, [r3, #8]
 8003d44:	e7c0      	b.n	8003cc8 <HAL_UART_Init+0xa4>
    huart->Lock = HAL_UNLOCKED;
 8003d46:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8003d4a:	f7fd feb7 	bl	8001abc <HAL_UART_MspInit>
 8003d4e:	e775      	b.n	8003c3c <HAL_UART_Init+0x18>
    return HAL_ERROR;
 8003d50:	2001      	movs	r0, #1
}
 8003d52:	4770      	bx	lr
      pclk = HAL_RCC_GetPCLK2Freq();
 8003d54:	f7fe fd2e 	bl	80027b4 <HAL_RCC_GetPCLK2Freq>
 8003d58:	e79e      	b.n	8003c98 <HAL_UART_Init+0x74>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003d5a:	f7fe fd2b 	bl	80027b4 <HAL_RCC_GetPCLK2Freq>
 8003d5e:	e7d0      	b.n	8003d02 <HAL_UART_Init+0xde>
 8003d60:	40011000 	.word	0x40011000
 8003d64:	51eb851f 	.word	0x51eb851f

08003d68 <HAL_UART_Transmit>:
{
 8003d68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d6c:	460e      	mov	r6, r1
  if (huart->gState == HAL_UART_STATE_READY)
 8003d6e:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
 8003d72:	2920      	cmp	r1, #32
{
 8003d74:	b082      	sub	sp, #8
  if (huart->gState == HAL_UART_STATE_READY)
 8003d76:	d132      	bne.n	8003dde <HAL_UART_Transmit+0x76>
    if ((pData == NULL) || (Size == 0U))
 8003d78:	2e00      	cmp	r6, #0
 8003d7a:	d034      	beq.n	8003de6 <HAL_UART_Transmit+0x7e>
 8003d7c:	9201      	str	r2, [sp, #4]
 8003d7e:	2a00      	cmp	r2, #0
 8003d80:	d031      	beq.n	8003de6 <HAL_UART_Transmit+0x7e>
 8003d82:	461f      	mov	r7, r3
    __HAL_LOCK(huart);
 8003d84:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8003d88:	2b01      	cmp	r3, #1
 8003d8a:	4604      	mov	r4, r0
 8003d8c:	d027      	beq.n	8003dde <HAL_UART_Transmit+0x76>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d8e:	f04f 0800 	mov.w	r8, #0
    __HAL_LOCK(huart);
 8003d92:	2101      	movs	r1, #1
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003d94:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d96:	f8c0 803c 	str.w	r8, [r0, #60]	; 0x3c
    __HAL_LOCK(huart);
 8003d9a:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003d9e:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8003da2:	f7fd ffdb 	bl	8001d5c <HAL_GetTick>
    huart->TxXferSize = Size;
 8003da6:	9a01      	ldr	r2, [sp, #4]
 8003da8:	84a2      	strh	r2, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8003daa:	84e2      	strh	r2, [r4, #38]	; 0x26
 8003dac:	6822      	ldr	r2, [r4, #0]
    __HAL_UNLOCK(huart);
 8003dae:	f884 8038 	strb.w	r8, [r4, #56]	; 0x38
    tickstart = HAL_GetTick();
 8003db2:	4605      	mov	r5, r0
    while (huart->TxXferCount > 0U)
 8003db4:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8003db6:	b29b      	uxth	r3, r3
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d03b      	beq.n	8003e34 <HAL_UART_Transmit+0xcc>
      huart->TxXferCount--;
 8003dbc:	8ce0      	ldrh	r0, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003dbe:	68a1      	ldr	r1, [r4, #8]
      huart->TxXferCount--;
 8003dc0:	3801      	subs	r0, #1
 8003dc2:	b280      	uxth	r0, r0
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003dc4:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
      huart->TxXferCount--;
 8003dc8:	84e0      	strh	r0, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003dca:	d01b      	beq.n	8003e04 <HAL_UART_Transmit+0x9c>
 8003dcc:	1c78      	adds	r0, r7, #1
 8003dce:	d13b      	bne.n	8003e48 <HAL_UART_Transmit+0xe0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003dd0:	6810      	ldr	r0, [r2, #0]
 8003dd2:	0601      	lsls	r1, r0, #24
 8003dd4:	d5fc      	bpl.n	8003dd0 <HAL_UART_Transmit+0x68>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003dd6:	7833      	ldrb	r3, [r6, #0]
 8003dd8:	6053      	str	r3, [r2, #4]
 8003dda:	3601      	adds	r6, #1
 8003ddc:	e7ea      	b.n	8003db4 <HAL_UART_Transmit+0x4c>
    return HAL_BUSY;
 8003dde:	2002      	movs	r0, #2
}
 8003de0:	b002      	add	sp, #8
 8003de2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 8003de6:	2001      	movs	r0, #1
}
 8003de8:	b002      	add	sp, #8
 8003dea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003dee:	6813      	ldr	r3, [r2, #0]
 8003df0:	061b      	lsls	r3, r3, #24
 8003df2:	d40c      	bmi.n	8003e0e <HAL_UART_Transmit+0xa6>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003df4:	2f00      	cmp	r7, #0
 8003df6:	d031      	beq.n	8003e5c <HAL_UART_Transmit+0xf4>
 8003df8:	f7fd ffb0 	bl	8001d5c <HAL_GetTick>
 8003dfc:	1b40      	subs	r0, r0, r5
 8003dfe:	4287      	cmp	r7, r0
 8003e00:	6822      	ldr	r2, [r4, #0]
 8003e02:	d32b      	bcc.n	8003e5c <HAL_UART_Transmit+0xf4>
 8003e04:	1c78      	adds	r0, r7, #1
 8003e06:	d1f2      	bne.n	8003dee <HAL_UART_Transmit+0x86>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e08:	6810      	ldr	r0, [r2, #0]
 8003e0a:	0601      	lsls	r1, r0, #24
 8003e0c:	d5fc      	bpl.n	8003e08 <HAL_UART_Transmit+0xa0>
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003e0e:	8833      	ldrh	r3, [r6, #0]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003e10:	6921      	ldr	r1, [r4, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003e12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e16:	6053      	str	r3, [r2, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003e18:	2900      	cmp	r1, #0
 8003e1a:	d1de      	bne.n	8003dda <HAL_UART_Transmit+0x72>
          pData += 2U;
 8003e1c:	3602      	adds	r6, #2
 8003e1e:	e7c9      	b.n	8003db4 <HAL_UART_Transmit+0x4c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e20:	6813      	ldr	r3, [r2, #0]
 8003e22:	065b      	lsls	r3, r3, #25
 8003e24:	d40b      	bmi.n	8003e3e <HAL_UART_Transmit+0xd6>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003e26:	b1cf      	cbz	r7, 8003e5c <HAL_UART_Transmit+0xf4>
 8003e28:	f7fd ff98 	bl	8001d5c <HAL_GetTick>
 8003e2c:	1b40      	subs	r0, r0, r5
 8003e2e:	4287      	cmp	r7, r0
 8003e30:	6822      	ldr	r2, [r4, #0]
 8003e32:	d313      	bcc.n	8003e5c <HAL_UART_Transmit+0xf4>
 8003e34:	1c78      	adds	r0, r7, #1
 8003e36:	d1f3      	bne.n	8003e20 <HAL_UART_Transmit+0xb8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e38:	6813      	ldr	r3, [r2, #0]
 8003e3a:	0659      	lsls	r1, r3, #25
 8003e3c:	d5fc      	bpl.n	8003e38 <HAL_UART_Transmit+0xd0>
    huart->gState = HAL_UART_STATE_READY;
 8003e3e:	2320      	movs	r3, #32
 8003e40:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 8003e44:	2000      	movs	r0, #0
 8003e46:	e7cb      	b.n	8003de0 <HAL_UART_Transmit+0x78>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e48:	6813      	ldr	r3, [r2, #0]
 8003e4a:	061b      	lsls	r3, r3, #24
 8003e4c:	d4c3      	bmi.n	8003dd6 <HAL_UART_Transmit+0x6e>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003e4e:	b12f      	cbz	r7, 8003e5c <HAL_UART_Transmit+0xf4>
 8003e50:	f7fd ff84 	bl	8001d5c <HAL_GetTick>
 8003e54:	1b40      	subs	r0, r0, r5
 8003e56:	4287      	cmp	r7, r0
 8003e58:	6822      	ldr	r2, [r4, #0]
 8003e5a:	d2b7      	bcs.n	8003dcc <HAL_UART_Transmit+0x64>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003e5c:	68d3      	ldr	r3, [r2, #12]
 8003e5e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003e62:	60d3      	str	r3, [r2, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e64:	6953      	ldr	r3, [r2, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8003e66:	2120      	movs	r1, #32
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e68:	f023 0301 	bic.w	r3, r3, #1
        __HAL_UNLOCK(huart);
 8003e6c:	2500      	movs	r5, #0
      return HAL_TIMEOUT;
 8003e6e:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e70:	6153      	str	r3, [r2, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8003e72:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
        __HAL_UNLOCK(huart);
 8003e76:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
        huart->RxState = HAL_UART_STATE_READY;
 8003e7a:	f884 103a 	strb.w	r1, [r4, #58]	; 0x3a
}
 8003e7e:	b002      	add	sp, #8
 8003e80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003e84 <HAL_UART_Receive>:
{
 8003e84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e88:	460e      	mov	r6, r1
  if (huart->RxState == HAL_UART_STATE_READY)
 8003e8a:	f890 103a 	ldrb.w	r1, [r0, #58]	; 0x3a
 8003e8e:	2920      	cmp	r1, #32
{
 8003e90:	b082      	sub	sp, #8
  if (huart->RxState == HAL_UART_STATE_READY)
 8003e92:	d136      	bne.n	8003f02 <HAL_UART_Receive+0x7e>
    if ((pData == NULL) || (Size == 0U))
 8003e94:	2e00      	cmp	r6, #0
 8003e96:	d038      	beq.n	8003f0a <HAL_UART_Receive+0x86>
 8003e98:	9201      	str	r2, [sp, #4]
 8003e9a:	2a00      	cmp	r2, #0
 8003e9c:	d035      	beq.n	8003f0a <HAL_UART_Receive+0x86>
 8003e9e:	461f      	mov	r7, r3
    __HAL_LOCK(huart);
 8003ea0:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8003ea4:	2b01      	cmp	r3, #1
 8003ea6:	4604      	mov	r4, r0
 8003ea8:	d02b      	beq.n	8003f02 <HAL_UART_Receive+0x7e>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003eaa:	f04f 0800 	mov.w	r8, #0
    __HAL_LOCK(huart);
 8003eae:	2101      	movs	r1, #1
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003eb0:	2322      	movs	r3, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003eb2:	f8c0 803c 	str.w	r8, [r0, #60]	; 0x3c
    __HAL_LOCK(huart);
 8003eb6:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003eba:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
    tickstart = HAL_GetTick();
 8003ebe:	f7fd ff4d 	bl	8001d5c <HAL_GetTick>
    huart->RxXferSize = Size;
 8003ec2:	9a01      	ldr	r2, [sp, #4]
    __HAL_UNLOCK(huart);
 8003ec4:	f884 8038 	strb.w	r8, [r4, #56]	; 0x38
    tickstart = HAL_GetTick();
 8003ec8:	4605      	mov	r5, r0
    huart->RxXferSize = Size;
 8003eca:	85a2      	strh	r2, [r4, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003ecc:	85e2      	strh	r2, [r4, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8003ece:	8de0      	ldrh	r0, [r4, #46]	; 0x2e
 8003ed0:	b280      	uxth	r0, r0
 8003ed2:	2800      	cmp	r0, #0
 8003ed4:	d05b      	beq.n	8003f8e <HAL_UART_Receive+0x10a>
      huart->RxXferCount--;
 8003ed6:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003ed8:	68a3      	ldr	r3, [r4, #8]
      huart->RxXferCount--;
 8003eda:	3a01      	subs	r2, #1
 8003edc:	b292      	uxth	r2, r2
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003ede:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
      huart->RxXferCount--;
 8003ee2:	85e2      	strh	r2, [r4, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003ee4:	d01f      	beq.n	8003f26 <HAL_UART_Receive+0xa2>
 8003ee6:	1c79      	adds	r1, r7, #1
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ee8:	6820      	ldr	r0, [r4, #0]
 8003eea:	d12a      	bne.n	8003f42 <HAL_UART_Receive+0xbe>
 8003eec:	6802      	ldr	r2, [r0, #0]
 8003eee:	0692      	lsls	r2, r2, #26
 8003ef0:	d5fc      	bpl.n	8003eec <HAL_UART_Receive+0x68>
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003ef2:	6923      	ldr	r3, [r4, #16]
 8003ef4:	1c72      	adds	r2, r6, #1
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d13f      	bne.n	8003f7a <HAL_UART_Receive+0xf6>
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003efa:	6843      	ldr	r3, [r0, #4]
 8003efc:	7033      	strb	r3, [r6, #0]
 8003efe:	4616      	mov	r6, r2
 8003f00:	e7e5      	b.n	8003ece <HAL_UART_Receive+0x4a>
    return HAL_BUSY;
 8003f02:	2002      	movs	r0, #2
}
 8003f04:	b002      	add	sp, #8
 8003f06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 8003f0a:	2001      	movs	r0, #1
}
 8003f0c:	b002      	add	sp, #8
 8003f0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f12:	681a      	ldr	r2, [r3, #0]
 8003f14:	0690      	lsls	r0, r2, #26
 8003f16:	d40c      	bmi.n	8003f32 <HAL_UART_Receive+0xae>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003f18:	2f00      	cmp	r7, #0
 8003f1a:	d03d      	beq.n	8003f98 <HAL_UART_Receive+0x114>
 8003f1c:	f7fd ff1e 	bl	8001d5c <HAL_GetTick>
 8003f20:	1b40      	subs	r0, r0, r5
 8003f22:	4287      	cmp	r7, r0
 8003f24:	d337      	bcc.n	8003f96 <HAL_UART_Receive+0x112>
 8003f26:	1c79      	adds	r1, r7, #1
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f28:	6823      	ldr	r3, [r4, #0]
 8003f2a:	d1f2      	bne.n	8003f12 <HAL_UART_Receive+0x8e>
 8003f2c:	681a      	ldr	r2, [r3, #0]
 8003f2e:	0692      	lsls	r2, r2, #26
 8003f30:	d5fc      	bpl.n	8003f2c <HAL_UART_Receive+0xa8>
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003f32:	6922      	ldr	r2, [r4, #16]
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003f34:	685b      	ldr	r3, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003f36:	bb32      	cbnz	r2, 8003f86 <HAL_UART_Receive+0x102>
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003f38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f3c:	f826 3b02 	strh.w	r3, [r6], #2
 8003f40:	e7c5      	b.n	8003ece <HAL_UART_Receive+0x4a>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f42:	6803      	ldr	r3, [r0, #0]
 8003f44:	069b      	lsls	r3, r3, #26
 8003f46:	d4d4      	bmi.n	8003ef2 <HAL_UART_Receive+0x6e>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003f48:	b12f      	cbz	r7, 8003f56 <HAL_UART_Receive+0xd2>
 8003f4a:	f7fd ff07 	bl	8001d5c <HAL_GetTick>
 8003f4e:	1b40      	subs	r0, r0, r5
 8003f50:	4287      	cmp	r7, r0
 8003f52:	d2c8      	bcs.n	8003ee6 <HAL_UART_Receive+0x62>
 8003f54:	6820      	ldr	r0, [r4, #0]
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f56:	68c3      	ldr	r3, [r0, #12]
 8003f58:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003f5c:	60c3      	str	r3, [r0, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f5e:	6943      	ldr	r3, [r0, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8003f60:	2220      	movs	r2, #32
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f62:	f023 0301 	bic.w	r3, r3, #1
        __HAL_UNLOCK(huart);
 8003f66:	2100      	movs	r1, #0
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f68:	6143      	str	r3, [r0, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8003f6a:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
          return HAL_TIMEOUT;
 8003f6e:	2003      	movs	r0, #3
        __HAL_UNLOCK(huart);
 8003f70:	f884 1038 	strb.w	r1, [r4, #56]	; 0x38
        huart->RxState = HAL_UART_STATE_READY;
 8003f74:	f884 203a 	strb.w	r2, [r4, #58]	; 0x3a
 8003f78:	e7c4      	b.n	8003f04 <HAL_UART_Receive+0x80>
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003f7a:	6843      	ldr	r3, [r0, #4]
 8003f7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f80:	7033      	strb	r3, [r6, #0]
 8003f82:	4616      	mov	r6, r2
 8003f84:	e7a3      	b.n	8003ece <HAL_UART_Receive+0x4a>
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003f86:	b2db      	uxtb	r3, r3
 8003f88:	f826 3b01 	strh.w	r3, [r6], #1
 8003f8c:	e79f      	b.n	8003ece <HAL_UART_Receive+0x4a>
    huart->RxState = HAL_UART_STATE_READY;
 8003f8e:	2320      	movs	r3, #32
 8003f90:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
    return HAL_OK;
 8003f94:	e7b6      	b.n	8003f04 <HAL_UART_Receive+0x80>
 8003f96:	6823      	ldr	r3, [r4, #0]
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f98:	68da      	ldr	r2, [r3, #12]
 8003f9a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003f9e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fa0:	695a      	ldr	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8003fa2:	2120      	movs	r1, #32
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fa4:	f022 0201 	bic.w	r2, r2, #1
        __HAL_UNLOCK(huart);
 8003fa8:	2500      	movs	r5, #0
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003faa:	615a      	str	r2, [r3, #20]
          return HAL_TIMEOUT;
 8003fac:	2003      	movs	r0, #3
        huart->gState  = HAL_UART_STATE_READY;
 8003fae:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
        __HAL_UNLOCK(huart);
 8003fb2:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
        huart->RxState = HAL_UART_STATE_READY;
 8003fb6:	f884 103a 	strb.w	r1, [r4, #58]	; 0x3a
 8003fba:	e7a3      	b.n	8003f04 <HAL_UART_Receive+0x80>

08003fbc <SDMMC_GetCmdResp1.part.2>:
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8003fbc:	4b30      	ldr	r3, [pc, #192]	; (8004080 <SDMMC_GetCmdResp1.part.2+0xc4>)
  return (*(__IO uint32_t *) tmp);
 8003fbe:	6942      	ldr	r2, [r0, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8003fc0:	4013      	ands	r3, r2
 8003fc2:	b34b      	cbz	r3, 8004018 <SDMMC_GetCmdResp1.part.2+0x5c>
  {
    return SDMMC_ERROR_NONE;
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8003fc4:	2a00      	cmp	r2, #0
 8003fc6:	db29      	blt.n	800401c <SDMMC_GetCmdResp1.part.2+0x60>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8003fc8:	0051      	lsls	r1, r2, #1
 8003fca:	d42d      	bmi.n	8004028 <SDMMC_GetCmdResp1.part.2+0x6c>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8003fcc:	0093      	lsls	r3, r2, #2
 8003fce:	d42d      	bmi.n	800402c <SDMMC_GetCmdResp1.part.2+0x70>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8003fd0:	00d1      	lsls	r1, r2, #3
 8003fd2:	d426      	bmi.n	8004022 <SDMMC_GetCmdResp1.part.2+0x66>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8003fd4:	0113      	lsls	r3, r2, #4
 8003fd6:	d42e      	bmi.n	8004036 <SDMMC_GetCmdResp1.part.2+0x7a>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8003fd8:	0151      	lsls	r1, r2, #5
 8003fda:	d42f      	bmi.n	800403c <SDMMC_GetCmdResp1.part.2+0x80>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8003fdc:	01d3      	lsls	r3, r2, #7
 8003fde:	d427      	bmi.n	8004030 <SDMMC_GetCmdResp1.part.2+0x74>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8003fe0:	0211      	lsls	r1, r2, #8
 8003fe2:	d42e      	bmi.n	8004042 <SDMMC_GetCmdResp1.part.2+0x86>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8003fe4:	0253      	lsls	r3, r2, #9
 8003fe6:	d42f      	bmi.n	8004048 <SDMMC_GetCmdResp1.part.2+0x8c>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8003fe8:	0291      	lsls	r1, r2, #10
 8003fea:	d430      	bmi.n	800404e <SDMMC_GetCmdResp1.part.2+0x92>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8003fec:	02d3      	lsls	r3, r2, #11
 8003fee:	d431      	bmi.n	8004054 <SDMMC_GetCmdResp1.part.2+0x98>
  {
    return SDMMC_ERROR_CC_ERR;
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8003ff0:	0351      	lsls	r1, r2, #13
 8003ff2:	d432      	bmi.n	800405a <SDMMC_GetCmdResp1.part.2+0x9e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8003ff4:	0393      	lsls	r3, r2, #14
 8003ff6:	d433      	bmi.n	8004060 <SDMMC_GetCmdResp1.part.2+0xa4>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8003ff8:	03d1      	lsls	r1, r2, #15
 8003ffa:	d434      	bmi.n	8004066 <SDMMC_GetCmdResp1.part.2+0xaa>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8003ffc:	0413      	lsls	r3, r2, #16
 8003ffe:	d435      	bmi.n	800406c <SDMMC_GetCmdResp1.part.2+0xb0>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8004000:	0451      	lsls	r1, r2, #17
 8004002:	d436      	bmi.n	8004072 <SDMMC_GetCmdResp1.part.2+0xb6>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8004004:	0493      	lsls	r3, r2, #18
 8004006:	d437      	bmi.n	8004078 <SDMMC_GetCmdResp1.part.2+0xbc>
  {
    return SDMMC_ERROR_ERASE_RESET;
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8004008:	f012 0f08 	tst.w	r2, #8
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800400c:	bf14      	ite	ne
 800400e:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
 8004012:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 8004016:	4770      	bx	lr
    return SDMMC_ERROR_NONE;
 8004018:	4618      	mov	r0, r3
 800401a:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800401c:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8004020:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8004022:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004026:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8004028:	2040      	movs	r0, #64	; 0x40
 800402a:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800402c:	2080      	movs	r0, #128	; 0x80
 800402e:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8004030:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004034:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8004036:	f44f 7000 	mov.w	r0, #512	; 0x200
 800403a:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800403c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8004040:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
 8004042:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8004046:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
 8004048:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800404c:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800404e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8004052:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
 8004054:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004058:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800405a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800405e:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8004060:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8004064:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8004066:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800406a:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800406c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8004070:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8004072:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8004076:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
 8004078:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
  }
}
 800407c:	4770      	bx	lr
 800407e:	bf00      	nop
 8004080:	fdffe008 	.word	0xfdffe008

08004084 <SDIO_Init>:
{
 8004084:	b084      	sub	sp, #16
 8004086:	b430      	push	{r4, r5}
 8004088:	ac03      	add	r4, sp, #12
 800408a:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  tmpreg |= (Init.ClockEdge           |\
 800408e:	460b      	mov	r3, r1
             Init.ClockBypass         |\
 8004090:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
             Init.BusWide             |\
 8004094:	e9dd 5406 	ldrd	r5, r4, [sp, #24]
  tmpreg |= (Init.ClockEdge           |\
 8004098:	430b      	orrs	r3, r1
             Init.ClockBypass         |\
 800409a:	4313      	orrs	r3, r2
             Init.ClockPowerSave      |\
 800409c:	432b      	orrs	r3, r5
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800409e:	6842      	ldr	r2, [r0, #4]
             Init.HardwareFlowControl |\
 80040a0:	9908      	ldr	r1, [sp, #32]
             Init.BusWide             |\
 80040a2:	4323      	orrs	r3, r4
}
 80040a4:	bc30      	pop	{r4, r5}
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80040a6:	f422 42fd 	bic.w	r2, r2, #32384	; 0x7e80
             Init.HardwareFlowControl |\
 80040aa:	430b      	orrs	r3, r1
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80040ac:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 80040b0:	4313      	orrs	r3, r2
 80040b2:	6043      	str	r3, [r0, #4]
}
 80040b4:	b004      	add	sp, #16
 80040b6:	2000      	movs	r0, #0
 80040b8:	4770      	bx	lr
 80040ba:	bf00      	nop

080040bc <SDIO_ReadFIFO>:
  return (SDIOx->FIFO);
 80040bc:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
}
 80040c0:	4770      	bx	lr
 80040c2:	bf00      	nop

080040c4 <SDIO_WriteFIFO>:
  SDIOx->FIFO = *pWriteData;
 80040c4:	680b      	ldr	r3, [r1, #0]
 80040c6:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
}
 80040ca:	2000      	movs	r0, #0
 80040cc:	4770      	bx	lr
 80040ce:	bf00      	nop

080040d0 <SDIO_PowerState_ON>:
{  
 80040d0:	b508      	push	{r3, lr}
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 80040d2:	2303      	movs	r3, #3
 80040d4:	6003      	str	r3, [r0, #0]
  HAL_Delay(2);
 80040d6:	2002      	movs	r0, #2
 80040d8:	f7fd fe46 	bl	8001d68 <HAL_Delay>
}
 80040dc:	2000      	movs	r0, #0
 80040de:	bd08      	pop	{r3, pc}

080040e0 <SDIO_GetPowerState>:
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 80040e0:	6800      	ldr	r0, [r0, #0]
}
 80040e2:	f000 0003 	and.w	r0, r0, #3
 80040e6:	4770      	bx	lr

080040e8 <SDIO_GetResponse>:
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 80040e8:	3014      	adds	r0, #20
  return (*(__IO uint32_t *) tmp);
 80040ea:	5840      	ldr	r0, [r0, r1]
}  
 80040ec:	4770      	bx	lr
 80040ee:	bf00      	nop

080040f0 <SDIO_ConfigData>:
{
 80040f0:	b430      	push	{r4, r5}
  SDIOx->DLEN = Data->DataLength;
 80040f2:	e9d1 4200 	ldrd	r4, r2, [r1]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80040f6:	e9d1 3502 	ldrd	r3, r5, [r1, #8]
  SDIOx->DTIMER = Data->DataTimeOut;
 80040fa:	6244      	str	r4, [r0, #36]	; 0x24
                       Data->TransferDir   |\
 80040fc:	690c      	ldr	r4, [r1, #16]
  SDIOx->DLEN = Data->DataLength;
 80040fe:	6282      	str	r2, [r0, #40]	; 0x28
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8004100:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
                       Data->TransferMode  |\
 8004102:	6949      	ldr	r1, [r1, #20]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004104:	432b      	orrs	r3, r5
                       Data->TransferDir   |\
 8004106:	4323      	orrs	r3, r4
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8004108:	f022 02f7 	bic.w	r2, r2, #247	; 0xf7
                       Data->TransferMode  |\
 800410c:	430b      	orrs	r3, r1
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800410e:	4313      	orrs	r3, r2
 8004110:	62c3      	str	r3, [r0, #44]	; 0x2c
}
 8004112:	bc30      	pop	{r4, r5}
 8004114:	2000      	movs	r0, #0
 8004116:	4770      	bx	lr

08004118 <SDMMC_CmdBlockLength>:
  SDIOx->ARG = Command->Argument;
 8004118:	6081      	str	r1, [r0, #8]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800411a:	4b1b      	ldr	r3, [pc, #108]	; (8004188 <SDMMC_CmdBlockLength+0x70>)
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800411c:	68c2      	ldr	r2, [r0, #12]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800411e:	491b      	ldr	r1, [pc, #108]	; (800418c <SDMMC_CmdBlockLength+0x74>)
 8004120:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8004122:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8004126:	fba1 1303 	umull	r1, r3, r1, r3
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800412a:	f022 020f 	bic.w	r2, r2, #15
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800412e:	0a59      	lsrs	r1, r3, #9
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8004130:	f442 628a 	orr.w	r2, r2, #1104	; 0x450
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8004134:	f241 3388 	movw	r3, #5000	; 0x1388
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8004138:	60c2      	str	r2, [r0, #12]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800413a:	fb03 f301 	mul.w	r3, r3, r1
    if (count-- == 0U)
 800413e:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 8004142:	d313      	bcc.n	800416c <SDMMC_CmdBlockLength+0x54>
    sta_reg = SDIOx->STA;
 8004144:	6b42      	ldr	r2, [r0, #52]	; 0x34
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004146:	f012 0f45 	tst.w	r2, #69	; 0x45
 800414a:	d0f8      	beq.n	800413e <SDMMC_CmdBlockLength+0x26>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800414c:	0511      	lsls	r1, r2, #20
 800414e:	d4f6      	bmi.n	800413e <SDMMC_CmdBlockLength+0x26>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004150:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004152:	075a      	lsls	r2, r3, #29
 8004154:	d411      	bmi.n	800417a <SDMMC_CmdBlockLength+0x62>
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004156:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004158:	07db      	lsls	r3, r3, #31
 800415a:	d40a      	bmi.n	8004172 <SDMMC_CmdBlockLength+0x5a>
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800415c:	23c5      	movs	r3, #197	; 0xc5
 800415e:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDIOx->RESPCMD);
 8004160:	6903      	ldr	r3, [r0, #16]
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8004162:	b2db      	uxtb	r3, r3
 8004164:	2b10      	cmp	r3, #16
 8004166:	d00c      	beq.n	8004182 <SDMMC_CmdBlockLength+0x6a>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004168:	2001      	movs	r0, #1
}
 800416a:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 800416c:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8004170:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004172:	2301      	movs	r3, #1
 8004174:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004176:	4618      	mov	r0, r3
 8004178:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800417a:	2304      	movs	r3, #4
 800417c:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800417e:	4618      	mov	r0, r3
 8004180:	4770      	bx	lr
 8004182:	f7ff bf1b 	b.w	8003fbc <SDMMC_GetCmdResp1.part.2>
 8004186:	bf00      	nop
 8004188:	20000004 	.word	0x20000004
 800418c:	10624dd3 	.word	0x10624dd3

08004190 <SDMMC_CmdReadSingleBlock>:
  SDIOx->ARG = Command->Argument;
 8004190:	6081      	str	r1, [r0, #8]
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8004192:	68c2      	ldr	r2, [r0, #12]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8004194:	4b1b      	ldr	r3, [pc, #108]	; (8004204 <SDMMC_CmdReadSingleBlock+0x74>)
 8004196:	491c      	ldr	r1, [pc, #112]	; (8004208 <SDMMC_CmdReadSingleBlock+0x78>)
 8004198:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800419a:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 800419e:	f022 020f 	bic.w	r2, r2, #15
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80041a2:	fba1 1303 	umull	r1, r3, r1, r3
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80041a6:	f442 628a 	orr.w	r2, r2, #1104	; 0x450
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80041aa:	0a59      	lsrs	r1, r3, #9
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80041ac:	f042 0201 	orr.w	r2, r2, #1
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80041b0:	f241 3388 	movw	r3, #5000	; 0x1388
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80041b4:	60c2      	str	r2, [r0, #12]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80041b6:	fb03 f301 	mul.w	r3, r3, r1
    if (count-- == 0U)
 80041ba:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 80041be:	d313      	bcc.n	80041e8 <SDMMC_CmdReadSingleBlock+0x58>
    sta_reg = SDIOx->STA;
 80041c0:	6b42      	ldr	r2, [r0, #52]	; 0x34
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80041c2:	f012 0f45 	tst.w	r2, #69	; 0x45
 80041c6:	d0f8      	beq.n	80041ba <SDMMC_CmdReadSingleBlock+0x2a>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80041c8:	0511      	lsls	r1, r2, #20
 80041ca:	d4f6      	bmi.n	80041ba <SDMMC_CmdReadSingleBlock+0x2a>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80041cc:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80041ce:	075a      	lsls	r2, r3, #29
 80041d0:	d411      	bmi.n	80041f6 <SDMMC_CmdReadSingleBlock+0x66>
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80041d2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80041d4:	07db      	lsls	r3, r3, #31
 80041d6:	d40a      	bmi.n	80041ee <SDMMC_CmdReadSingleBlock+0x5e>
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80041d8:	23c5      	movs	r3, #197	; 0xc5
 80041da:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDIOx->RESPCMD);
 80041dc:	6903      	ldr	r3, [r0, #16]
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80041de:	b2db      	uxtb	r3, r3
 80041e0:	2b11      	cmp	r3, #17
 80041e2:	d00c      	beq.n	80041fe <SDMMC_CmdReadSingleBlock+0x6e>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80041e4:	2001      	movs	r0, #1
}
 80041e6:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 80041e8:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 80041ec:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80041ee:	2301      	movs	r3, #1
 80041f0:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80041f2:	4618      	mov	r0, r3
 80041f4:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80041f6:	2304      	movs	r3, #4
 80041f8:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80041fa:	4618      	mov	r0, r3
 80041fc:	4770      	bx	lr
 80041fe:	f7ff bedd 	b.w	8003fbc <SDMMC_GetCmdResp1.part.2>
 8004202:	bf00      	nop
 8004204:	20000004 	.word	0x20000004
 8004208:	10624dd3 	.word	0x10624dd3

0800420c <SDMMC_CmdReadMultiBlock>:
  SDIOx->ARG = Command->Argument;
 800420c:	6081      	str	r1, [r0, #8]
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800420e:	68c2      	ldr	r2, [r0, #12]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8004210:	4b1b      	ldr	r3, [pc, #108]	; (8004280 <SDMMC_CmdReadMultiBlock+0x74>)
 8004212:	491c      	ldr	r1, [pc, #112]	; (8004284 <SDMMC_CmdReadMultiBlock+0x78>)
 8004214:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8004216:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 800421a:	f022 020f 	bic.w	r2, r2, #15
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800421e:	fba1 1303 	umull	r1, r3, r1, r3
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8004222:	f442 628a 	orr.w	r2, r2, #1104	; 0x450
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8004226:	0a59      	lsrs	r1, r3, #9
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8004228:	f042 0202 	orr.w	r2, r2, #2
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800422c:	f241 3388 	movw	r3, #5000	; 0x1388
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8004230:	60c2      	str	r2, [r0, #12]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8004232:	fb03 f301 	mul.w	r3, r3, r1
    if (count-- == 0U)
 8004236:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 800423a:	d313      	bcc.n	8004264 <SDMMC_CmdReadMultiBlock+0x58>
    sta_reg = SDIOx->STA;
 800423c:	6b42      	ldr	r2, [r0, #52]	; 0x34
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800423e:	f012 0f45 	tst.w	r2, #69	; 0x45
 8004242:	d0f8      	beq.n	8004236 <SDMMC_CmdReadMultiBlock+0x2a>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004244:	0511      	lsls	r1, r2, #20
 8004246:	d4f6      	bmi.n	8004236 <SDMMC_CmdReadMultiBlock+0x2a>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004248:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800424a:	075a      	lsls	r2, r3, #29
 800424c:	d411      	bmi.n	8004272 <SDMMC_CmdReadMultiBlock+0x66>
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800424e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004250:	07db      	lsls	r3, r3, #31
 8004252:	d40a      	bmi.n	800426a <SDMMC_CmdReadMultiBlock+0x5e>
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004254:	23c5      	movs	r3, #197	; 0xc5
 8004256:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDIOx->RESPCMD);
 8004258:	6903      	ldr	r3, [r0, #16]
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800425a:	b2db      	uxtb	r3, r3
 800425c:	2b12      	cmp	r3, #18
 800425e:	d00c      	beq.n	800427a <SDMMC_CmdReadMultiBlock+0x6e>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004260:	2001      	movs	r0, #1
}
 8004262:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 8004264:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8004268:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800426a:	2301      	movs	r3, #1
 800426c:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800426e:	4618      	mov	r0, r3
 8004270:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004272:	2304      	movs	r3, #4
 8004274:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004276:	4618      	mov	r0, r3
 8004278:	4770      	bx	lr
 800427a:	f7ff be9f 	b.w	8003fbc <SDMMC_GetCmdResp1.part.2>
 800427e:	bf00      	nop
 8004280:	20000004 	.word	0x20000004
 8004284:	10624dd3 	.word	0x10624dd3

08004288 <SDMMC_CmdWriteSingleBlock>:
  SDIOx->ARG = Command->Argument;
 8004288:	6081      	str	r1, [r0, #8]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800428a:	4b1b      	ldr	r3, [pc, #108]	; (80042f8 <SDMMC_CmdWriteSingleBlock+0x70>)
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800428c:	68c2      	ldr	r2, [r0, #12]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800428e:	491b      	ldr	r1, [pc, #108]	; (80042fc <SDMMC_CmdWriteSingleBlock+0x74>)
 8004290:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8004292:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8004296:	fba1 1303 	umull	r1, r3, r1, r3
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800429a:	f022 020f 	bic.w	r2, r2, #15
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800429e:	0a59      	lsrs	r1, r3, #9
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80042a0:	f442 628b 	orr.w	r2, r2, #1112	; 0x458
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80042a4:	f241 3388 	movw	r3, #5000	; 0x1388
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80042a8:	60c2      	str	r2, [r0, #12]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80042aa:	fb03 f301 	mul.w	r3, r3, r1
    if (count-- == 0U)
 80042ae:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 80042b2:	d313      	bcc.n	80042dc <SDMMC_CmdWriteSingleBlock+0x54>
    sta_reg = SDIOx->STA;
 80042b4:	6b42      	ldr	r2, [r0, #52]	; 0x34
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80042b6:	f012 0f45 	tst.w	r2, #69	; 0x45
 80042ba:	d0f8      	beq.n	80042ae <SDMMC_CmdWriteSingleBlock+0x26>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80042bc:	0511      	lsls	r1, r2, #20
 80042be:	d4f6      	bmi.n	80042ae <SDMMC_CmdWriteSingleBlock+0x26>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80042c0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80042c2:	075a      	lsls	r2, r3, #29
 80042c4:	d411      	bmi.n	80042ea <SDMMC_CmdWriteSingleBlock+0x62>
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80042c6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80042c8:	07db      	lsls	r3, r3, #31
 80042ca:	d40a      	bmi.n	80042e2 <SDMMC_CmdWriteSingleBlock+0x5a>
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80042cc:	23c5      	movs	r3, #197	; 0xc5
 80042ce:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDIOx->RESPCMD);
 80042d0:	6903      	ldr	r3, [r0, #16]
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80042d2:	b2db      	uxtb	r3, r3
 80042d4:	2b18      	cmp	r3, #24
 80042d6:	d00c      	beq.n	80042f2 <SDMMC_CmdWriteSingleBlock+0x6a>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80042d8:	2001      	movs	r0, #1
}
 80042da:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 80042dc:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 80042e0:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80042e2:	2301      	movs	r3, #1
 80042e4:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80042e6:	4618      	mov	r0, r3
 80042e8:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80042ea:	2304      	movs	r3, #4
 80042ec:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80042ee:	4618      	mov	r0, r3
 80042f0:	4770      	bx	lr
 80042f2:	f7ff be63 	b.w	8003fbc <SDMMC_GetCmdResp1.part.2>
 80042f6:	bf00      	nop
 80042f8:	20000004 	.word	0x20000004
 80042fc:	10624dd3 	.word	0x10624dd3

08004300 <SDMMC_CmdWriteMultiBlock>:
  SDIOx->ARG = Command->Argument;
 8004300:	6081      	str	r1, [r0, #8]
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8004302:	68c2      	ldr	r2, [r0, #12]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8004304:	4b1b      	ldr	r3, [pc, #108]	; (8004374 <SDMMC_CmdWriteMultiBlock+0x74>)
 8004306:	491c      	ldr	r1, [pc, #112]	; (8004378 <SDMMC_CmdWriteMultiBlock+0x78>)
 8004308:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800430a:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 800430e:	f022 020f 	bic.w	r2, r2, #15
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8004312:	fba1 1303 	umull	r1, r3, r1, r3
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8004316:	f442 628b 	orr.w	r2, r2, #1112	; 0x458
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800431a:	0a59      	lsrs	r1, r3, #9
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800431c:	f042 0201 	orr.w	r2, r2, #1
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8004320:	f241 3388 	movw	r3, #5000	; 0x1388
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8004324:	60c2      	str	r2, [r0, #12]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8004326:	fb03 f301 	mul.w	r3, r3, r1
    if (count-- == 0U)
 800432a:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 800432e:	d313      	bcc.n	8004358 <SDMMC_CmdWriteMultiBlock+0x58>
    sta_reg = SDIOx->STA;
 8004330:	6b42      	ldr	r2, [r0, #52]	; 0x34
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004332:	f012 0f45 	tst.w	r2, #69	; 0x45
 8004336:	d0f8      	beq.n	800432a <SDMMC_CmdWriteMultiBlock+0x2a>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004338:	0511      	lsls	r1, r2, #20
 800433a:	d4f6      	bmi.n	800432a <SDMMC_CmdWriteMultiBlock+0x2a>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800433c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800433e:	075a      	lsls	r2, r3, #29
 8004340:	d411      	bmi.n	8004366 <SDMMC_CmdWriteMultiBlock+0x66>
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004342:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004344:	07db      	lsls	r3, r3, #31
 8004346:	d40a      	bmi.n	800435e <SDMMC_CmdWriteMultiBlock+0x5e>
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004348:	23c5      	movs	r3, #197	; 0xc5
 800434a:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDIOx->RESPCMD);
 800434c:	6903      	ldr	r3, [r0, #16]
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800434e:	b2db      	uxtb	r3, r3
 8004350:	2b19      	cmp	r3, #25
 8004352:	d00c      	beq.n	800436e <SDMMC_CmdWriteMultiBlock+0x6e>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004354:	2001      	movs	r0, #1
}
 8004356:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 8004358:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800435c:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800435e:	2301      	movs	r3, #1
 8004360:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004362:	4618      	mov	r0, r3
 8004364:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004366:	2304      	movs	r3, #4
 8004368:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800436a:	4618      	mov	r0, r3
 800436c:	4770      	bx	lr
 800436e:	f7ff be25 	b.w	8003fbc <SDMMC_GetCmdResp1.part.2>
 8004372:	bf00      	nop
 8004374:	20000004 	.word	0x20000004
 8004378:	10624dd3 	.word	0x10624dd3

0800437c <SDMMC_CmdStopTransfer>:
  SDIOx->ARG = Command->Argument;
 800437c:	2300      	movs	r3, #0
{
 800437e:	b410      	push	{r4}
  SDIOx->ARG = Command->Argument;
 8004380:	6083      	str	r3, [r0, #8]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8004382:	4b1f      	ldr	r3, [pc, #124]	; (8004400 <SDMMC_CmdStopTransfer+0x84>)
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8004384:	68c2      	ldr	r2, [r0, #12]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8004386:	6819      	ldr	r1, [r3, #0]
 8004388:	4c1e      	ldr	r4, [pc, #120]	; (8004404 <SDMMC_CmdStopTransfer+0x88>)
 800438a:	4b1f      	ldr	r3, [pc, #124]	; (8004408 <SDMMC_CmdStopTransfer+0x8c>)
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800438c:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 8004390:	f022 020f 	bic.w	r2, r2, #15
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8004394:	fba4 4101 	umull	r4, r1, r4, r1
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8004398:	f442 6289 	orr.w	r2, r2, #1096	; 0x448
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800439c:	0a49      	lsrs	r1, r1, #9
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800439e:	f042 0204 	orr.w	r2, r2, #4
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80043a2:	fb03 f301 	mul.w	r3, r3, r1
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80043a6:	60c2      	str	r2, [r0, #12]
    if (count-- == 0U)
 80043a8:	b143      	cbz	r3, 80043bc <SDMMC_CmdStopTransfer+0x40>
    sta_reg = SDIOx->STA;
 80043aa:	6b42      	ldr	r2, [r0, #52]	; 0x34
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80043ac:	f012 0f45 	tst.w	r2, #69	; 0x45
 80043b0:	d001      	beq.n	80043b6 <SDMMC_CmdStopTransfer+0x3a>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80043b2:	0511      	lsls	r1, r2, #20
 80043b4:	d507      	bpl.n	80043c6 <SDMMC_CmdStopTransfer+0x4a>
 80043b6:	3b01      	subs	r3, #1
    if (count-- == 0U)
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d1f6      	bne.n	80043aa <SDMMC_CmdStopTransfer+0x2e>
      return SDMMC_ERROR_TIMEOUT;
 80043bc:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 80043c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80043c4:	4770      	bx	lr
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80043c6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80043c8:	075a      	lsls	r2, r3, #29
 80043ca:	d410      	bmi.n	80043ee <SDMMC_CmdStopTransfer+0x72>
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80043cc:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80043ce:	07db      	lsls	r3, r3, #31
 80043d0:	d407      	bmi.n	80043e2 <SDMMC_CmdStopTransfer+0x66>
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80043d2:	23c5      	movs	r3, #197	; 0xc5
 80043d4:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDIOx->RESPCMD);
 80043d6:	6903      	ldr	r3, [r0, #16]
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80043d8:	b2db      	uxtb	r3, r3
 80043da:	2b0c      	cmp	r3, #12
 80043dc:	d00b      	beq.n	80043f6 <SDMMC_CmdStopTransfer+0x7a>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80043de:	2001      	movs	r0, #1
  return errorstate;
 80043e0:	e7ee      	b.n	80043c0 <SDMMC_CmdStopTransfer+0x44>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80043e2:	2301      	movs	r3, #1
 80043e4:	6383      	str	r3, [r0, #56]	; 0x38
}
 80043e6:	f85d 4b04 	ldr.w	r4, [sp], #4
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80043ea:	4618      	mov	r0, r3
}
 80043ec:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80043ee:	2304      	movs	r3, #4
 80043f0:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80043f2:	4618      	mov	r0, r3
 80043f4:	e7e4      	b.n	80043c0 <SDMMC_CmdStopTransfer+0x44>
}
 80043f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80043fa:	f7ff bddf 	b.w	8003fbc <SDMMC_GetCmdResp1.part.2>
 80043fe:	bf00      	nop
 8004400:	20000004 	.word	0x20000004
 8004404:	10624dd3 	.word	0x10624dd3
 8004408:	05f5e100 	.word	0x05f5e100

0800440c <SDMMC_CmdSelDesel>:
  SDIOx->ARG = Command->Argument;
 800440c:	6082      	str	r2, [r0, #8]
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800440e:	68c2      	ldr	r2, [r0, #12]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8004410:	4b1b      	ldr	r3, [pc, #108]	; (8004480 <SDMMC_CmdSelDesel+0x74>)
 8004412:	491c      	ldr	r1, [pc, #112]	; (8004484 <SDMMC_CmdSelDesel+0x78>)
 8004414:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8004416:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 800441a:	f022 020f 	bic.w	r2, r2, #15
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800441e:	fba1 1303 	umull	r1, r3, r1, r3
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8004422:	f442 6288 	orr.w	r2, r2, #1088	; 0x440
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8004426:	0a59      	lsrs	r1, r3, #9
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8004428:	f042 0207 	orr.w	r2, r2, #7
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800442c:	f241 3388 	movw	r3, #5000	; 0x1388
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8004430:	60c2      	str	r2, [r0, #12]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8004432:	fb03 f301 	mul.w	r3, r3, r1
    if (count-- == 0U)
 8004436:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 800443a:	d313      	bcc.n	8004464 <SDMMC_CmdSelDesel+0x58>
    sta_reg = SDIOx->STA;
 800443c:	6b42      	ldr	r2, [r0, #52]	; 0x34
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800443e:	f012 0f45 	tst.w	r2, #69	; 0x45
 8004442:	d0f8      	beq.n	8004436 <SDMMC_CmdSelDesel+0x2a>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004444:	0511      	lsls	r1, r2, #20
 8004446:	d4f6      	bmi.n	8004436 <SDMMC_CmdSelDesel+0x2a>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004448:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800444a:	075a      	lsls	r2, r3, #29
 800444c:	d411      	bmi.n	8004472 <SDMMC_CmdSelDesel+0x66>
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800444e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004450:	07db      	lsls	r3, r3, #31
 8004452:	d40a      	bmi.n	800446a <SDMMC_CmdSelDesel+0x5e>
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004454:	23c5      	movs	r3, #197	; 0xc5
 8004456:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDIOx->RESPCMD);
 8004458:	6903      	ldr	r3, [r0, #16]
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800445a:	b2db      	uxtb	r3, r3
 800445c:	2b07      	cmp	r3, #7
 800445e:	d00c      	beq.n	800447a <SDMMC_CmdSelDesel+0x6e>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004460:	2001      	movs	r0, #1
}
 8004462:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 8004464:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8004468:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800446a:	2301      	movs	r3, #1
 800446c:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800446e:	4618      	mov	r0, r3
 8004470:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004472:	2304      	movs	r3, #4
 8004474:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004476:	4618      	mov	r0, r3
 8004478:	4770      	bx	lr
 800447a:	f7ff bd9f 	b.w	8003fbc <SDMMC_GetCmdResp1.part.2>
 800447e:	bf00      	nop
 8004480:	20000004 	.word	0x20000004
 8004484:	10624dd3 	.word	0x10624dd3

08004488 <SDMMC_CmdGoIdleState>:
  SDIOx->ARG = Command->Argument;
 8004488:	2300      	movs	r3, #0
 800448a:	6083      	str	r3, [r0, #8]
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800448c:	4b0f      	ldr	r3, [pc, #60]	; (80044cc <SDMMC_CmdGoIdleState+0x44>)
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800448e:	68c2      	ldr	r2, [r0, #12]
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004490:	490f      	ldr	r1, [pc, #60]	; (80044d0 <SDMMC_CmdGoIdleState+0x48>)
 8004492:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8004494:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004498:	fba1 1303 	umull	r1, r3, r1, r3
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800449c:	f022 020f 	bic.w	r2, r2, #15
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80044a0:	0a59      	lsrs	r1, r3, #9
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80044a2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80044a6:	f241 3388 	movw	r3, #5000	; 0x1388
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80044aa:	60c2      	str	r2, [r0, #12]
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80044ac:	fb03 f301 	mul.w	r3, r3, r1
 80044b0:	e002      	b.n	80044b8 <SDMMC_CmdGoIdleState+0x30>
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 80044b2:	6b42      	ldr	r2, [r0, #52]	; 0x34
 80044b4:	0612      	lsls	r2, r2, #24
 80044b6:	d405      	bmi.n	80044c4 <SDMMC_CmdGoIdleState+0x3c>
    if (count-- == 0U)
 80044b8:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 80044bc:	d2f9      	bcs.n	80044b2 <SDMMC_CmdGoIdleState+0x2a>
      return SDMMC_ERROR_TIMEOUT;
 80044be:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 80044c2:	4770      	bx	lr
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80044c4:	23c5      	movs	r3, #197	; 0xc5
 80044c6:	6383      	str	r3, [r0, #56]	; 0x38
  return SDMMC_ERROR_NONE;
 80044c8:	2000      	movs	r0, #0
 80044ca:	4770      	bx	lr
 80044cc:	20000004 	.word	0x20000004
 80044d0:	10624dd3 	.word	0x10624dd3

080044d4 <SDMMC_CmdOperCond>:
  SDIOx->ARG = Command->Argument;
 80044d4:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80044d8:	6083      	str	r3, [r0, #8]
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80044da:	4b1a      	ldr	r3, [pc, #104]	; (8004544 <SDMMC_CmdOperCond+0x70>)
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80044dc:	68c2      	ldr	r2, [r0, #12]
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80044de:	681b      	ldr	r3, [r3, #0]
{
 80044e0:	4601      	mov	r1, r0
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80044e2:	4819      	ldr	r0, [pc, #100]	; (8004548 <SDMMC_CmdOperCond+0x74>)
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80044e4:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80044e8:	fba0 0303 	umull	r0, r3, r0, r3
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80044ec:	f022 020f 	bic.w	r2, r2, #15
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80044f0:	0a58      	lsrs	r0, r3, #9
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80044f2:	f442 6289 	orr.w	r2, r2, #1096	; 0x448
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80044f6:	f241 3388 	movw	r3, #5000	; 0x1388
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80044fa:	60ca      	str	r2, [r1, #12]
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80044fc:	fb03 f300 	mul.w	r3, r3, r0
  
  do
  {
    if (count-- == 0U)
 8004500:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 8004504:	d313      	bcc.n	800452e <SDMMC_CmdOperCond+0x5a>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDIOx->STA;
 8004506:	6b4a      	ldr	r2, [r1, #52]	; 0x34
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004508:	f012 0f45 	tst.w	r2, #69	; 0x45
 800450c:	d0f8      	beq.n	8004500 <SDMMC_CmdOperCond+0x2c>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800450e:	0512      	lsls	r2, r2, #20
 8004510:	d4f6      	bmi.n	8004500 <SDMMC_CmdOperCond+0x2c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004512:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8004514:	075b      	lsls	r3, r3, #29
 8004516:	d410      	bmi.n	800453a <SDMMC_CmdOperCond+0x66>
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004518:	6b48      	ldr	r0, [r1, #52]	; 0x34
 800451a:	f010 0001 	ands.w	r0, r0, #1
 800451e:	d109      	bne.n	8004534 <SDMMC_CmdOperCond+0x60>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8004520:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8004522:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8004526:	d00b      	beq.n	8004540 <SDMMC_CmdOperCond+0x6c>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8004528:	2340      	movs	r3, #64	; 0x40
 800452a:	638b      	str	r3, [r1, #56]	; 0x38
 800452c:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 800452e:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8004532:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004534:	2001      	movs	r0, #1
 8004536:	6388      	str	r0, [r1, #56]	; 0x38
 8004538:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800453a:	2004      	movs	r0, #4
 800453c:	6388      	str	r0, [r1, #56]	; 0x38
 800453e:	4770      	bx	lr
  }
  
  return SDMMC_ERROR_NONE;
 8004540:	4618      	mov	r0, r3
}
 8004542:	4770      	bx	lr
 8004544:	20000004 	.word	0x20000004
 8004548:	10624dd3 	.word	0x10624dd3

0800454c <SDMMC_CmdAppCommand>:
  SDIOx->ARG = Command->Argument;
 800454c:	6081      	str	r1, [r0, #8]
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800454e:	68c2      	ldr	r2, [r0, #12]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8004550:	4b1b      	ldr	r3, [pc, #108]	; (80045c0 <SDMMC_CmdAppCommand+0x74>)
 8004552:	491c      	ldr	r1, [pc, #112]	; (80045c4 <SDMMC_CmdAppCommand+0x78>)
 8004554:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8004556:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 800455a:	f022 020f 	bic.w	r2, r2, #15
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800455e:	fba1 1303 	umull	r1, r3, r1, r3
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8004562:	f442 628e 	orr.w	r2, r2, #1136	; 0x470
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8004566:	0a59      	lsrs	r1, r3, #9
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8004568:	f042 0207 	orr.w	r2, r2, #7
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800456c:	f241 3388 	movw	r3, #5000	; 0x1388
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8004570:	60c2      	str	r2, [r0, #12]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8004572:	fb03 f301 	mul.w	r3, r3, r1
    if (count-- == 0U)
 8004576:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 800457a:	d313      	bcc.n	80045a4 <SDMMC_CmdAppCommand+0x58>
    sta_reg = SDIOx->STA;
 800457c:	6b42      	ldr	r2, [r0, #52]	; 0x34
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800457e:	f012 0f45 	tst.w	r2, #69	; 0x45
 8004582:	d0f8      	beq.n	8004576 <SDMMC_CmdAppCommand+0x2a>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004584:	0511      	lsls	r1, r2, #20
 8004586:	d4f6      	bmi.n	8004576 <SDMMC_CmdAppCommand+0x2a>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004588:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800458a:	075a      	lsls	r2, r3, #29
 800458c:	d411      	bmi.n	80045b2 <SDMMC_CmdAppCommand+0x66>
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800458e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004590:	07db      	lsls	r3, r3, #31
 8004592:	d40a      	bmi.n	80045aa <SDMMC_CmdAppCommand+0x5e>
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004594:	23c5      	movs	r3, #197	; 0xc5
 8004596:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDIOx->RESPCMD);
 8004598:	6903      	ldr	r3, [r0, #16]
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800459a:	b2db      	uxtb	r3, r3
 800459c:	2b37      	cmp	r3, #55	; 0x37
 800459e:	d00c      	beq.n	80045ba <SDMMC_CmdAppCommand+0x6e>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80045a0:	2001      	movs	r0, #1
}
 80045a2:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 80045a4:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 80045a8:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80045aa:	2301      	movs	r3, #1
 80045ac:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80045ae:	4618      	mov	r0, r3
 80045b0:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80045b2:	2304      	movs	r3, #4
 80045b4:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80045b6:	4618      	mov	r0, r3
 80045b8:	4770      	bx	lr
 80045ba:	f7ff bcff 	b.w	8003fbc <SDMMC_GetCmdResp1.part.2>
 80045be:	bf00      	nop
 80045c0:	20000004 	.word	0x20000004
 80045c4:	10624dd3 	.word	0x10624dd3

080045c8 <SDMMC_CmdAppOperCommand>:
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 80045c8:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 80045cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
{
 80045d0:	b410      	push	{r4}
  SDIOx->ARG = Command->Argument;
 80045d2:	6081      	str	r1, [r0, #8]
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80045d4:	68c2      	ldr	r2, [r0, #12]
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80045d6:	4b16      	ldr	r3, [pc, #88]	; (8004630 <SDMMC_CmdAppOperCommand+0x68>)
 80045d8:	4916      	ldr	r1, [pc, #88]	; (8004634 <SDMMC_CmdAppOperCommand+0x6c>)
 80045da:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80045dc:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 80045e0:	f022 020f 	bic.w	r2, r2, #15
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80045e4:	fba1 1303 	umull	r1, r3, r1, r3
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80045e8:	f442 628d 	orr.w	r2, r2, #1128	; 0x468
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80045ec:	0a59      	lsrs	r1, r3, #9
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80045ee:	f042 0201 	orr.w	r2, r2, #1
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80045f2:	f241 3388 	movw	r3, #5000	; 0x1388
{
 80045f6:	4604      	mov	r4, r0
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80045f8:	60c2      	str	r2, [r0, #12]
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80045fa:	fb03 f301 	mul.w	r3, r3, r1
    if (count-- == 0U)
 80045fe:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 8004602:	d310      	bcc.n	8004626 <SDMMC_CmdAppOperCommand+0x5e>
    sta_reg = SDIOx->STA;
 8004604:	6b62      	ldr	r2, [r4, #52]	; 0x34
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004606:	f012 0f45 	tst.w	r2, #69	; 0x45
 800460a:	d0f8      	beq.n	80045fe <SDMMC_CmdAppOperCommand+0x36>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800460c:	0512      	lsls	r2, r2, #20
 800460e:	d4f6      	bmi.n	80045fe <SDMMC_CmdAppOperCommand+0x36>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004610:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8004612:	f010 0004 	ands.w	r0, r0, #4
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004616:	bf15      	itete	ne
 8004618:	2004      	movne	r0, #4
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800461a:	23c5      	moveq	r3, #197	; 0xc5
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800461c:	63a0      	strne	r0, [r4, #56]	; 0x38
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800461e:	63a3      	streq	r3, [r4, #56]	; 0x38
}
 8004620:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004624:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 8004626:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800462a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800462e:	4770      	bx	lr
 8004630:	20000004 	.word	0x20000004
 8004634:	10624dd3 	.word	0x10624dd3

08004638 <SDMMC_CmdSendCID>:
  SDIOx->ARG = Command->Argument;
 8004638:	2300      	movs	r3, #0
 800463a:	6083      	str	r3, [r0, #8]
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800463c:	68c2      	ldr	r2, [r0, #12]
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800463e:	4b17      	ldr	r3, [pc, #92]	; (800469c <SDMMC_CmdSendCID+0x64>)
{
 8004640:	4601      	mov	r1, r0
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4816      	ldr	r0, [pc, #88]	; (80046a0 <SDMMC_CmdSendCID+0x68>)
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8004646:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 800464a:	f022 020f 	bic.w	r2, r2, #15
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800464e:	fba0 0303 	umull	r0, r3, r0, r3
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8004652:	f442 6298 	orr.w	r2, r2, #1216	; 0x4c0
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004656:	0a58      	lsrs	r0, r3, #9
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8004658:	f042 0202 	orr.w	r2, r2, #2
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800465c:	f241 3388 	movw	r3, #5000	; 0x1388
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8004660:	60ca      	str	r2, [r1, #12]
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004662:	fb03 f300 	mul.w	r3, r3, r0
    if (count-- == 0U)
 8004666:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 800466a:	d311      	bcc.n	8004690 <SDMMC_CmdSendCID+0x58>
    sta_reg = SDIOx->STA;
 800466c:	6b4a      	ldr	r2, [r1, #52]	; 0x34
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800466e:	f012 0f45 	tst.w	r2, #69	; 0x45
 8004672:	d0f8      	beq.n	8004666 <SDMMC_CmdSendCID+0x2e>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004674:	0512      	lsls	r2, r2, #20
 8004676:	d4f6      	bmi.n	8004666 <SDMMC_CmdSendCID+0x2e>
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004678:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800467a:	075b      	lsls	r3, r3, #29
 800467c:	d40b      	bmi.n	8004696 <SDMMC_CmdSendCID+0x5e>
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800467e:	6b48      	ldr	r0, [r1, #52]	; 0x34
 8004680:	f010 0001 	ands.w	r0, r0, #1
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004684:	bf15      	itete	ne
 8004686:	2001      	movne	r0, #1
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004688:	23c5      	moveq	r3, #197	; 0xc5
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800468a:	6388      	strne	r0, [r1, #56]	; 0x38
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800468c:	638b      	streq	r3, [r1, #56]	; 0x38
 800468e:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 8004690:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8004694:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004696:	2004      	movs	r0, #4
 8004698:	6388      	str	r0, [r1, #56]	; 0x38
 800469a:	4770      	bx	lr
 800469c:	20000004 	.word	0x20000004
 80046a0:	10624dd3 	.word	0x10624dd3

080046a4 <SDMMC_CmdSendCSD>:
{
 80046a4:	b410      	push	{r4}
  SDIOx->ARG = Command->Argument;
 80046a6:	6081      	str	r1, [r0, #8]
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80046a8:	68c2      	ldr	r2, [r0, #12]
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80046aa:	4b19      	ldr	r3, [pc, #100]	; (8004710 <SDMMC_CmdSendCSD+0x6c>)
 80046ac:	4919      	ldr	r1, [pc, #100]	; (8004714 <SDMMC_CmdSendCSD+0x70>)
 80046ae:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80046b0:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 80046b4:	f022 020f 	bic.w	r2, r2, #15
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80046b8:	fba1 1303 	umull	r1, r3, r1, r3
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80046bc:	f442 6299 	orr.w	r2, r2, #1224	; 0x4c8
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80046c0:	0a59      	lsrs	r1, r3, #9
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80046c2:	f042 0201 	orr.w	r2, r2, #1
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80046c6:	f241 3388 	movw	r3, #5000	; 0x1388
{
 80046ca:	4604      	mov	r4, r0
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80046cc:	60c2      	str	r2, [r0, #12]
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80046ce:	fb03 f301 	mul.w	r3, r3, r1
    if (count-- == 0U)
 80046d2:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 80046d6:	d313      	bcc.n	8004700 <SDMMC_CmdSendCSD+0x5c>
    sta_reg = SDIOx->STA;
 80046d8:	6b62      	ldr	r2, [r4, #52]	; 0x34
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80046da:	f012 0f45 	tst.w	r2, #69	; 0x45
 80046de:	d0f8      	beq.n	80046d2 <SDMMC_CmdSendCSD+0x2e>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80046e0:	0512      	lsls	r2, r2, #20
 80046e2:	d4f6      	bmi.n	80046d2 <SDMMC_CmdSendCSD+0x2e>
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80046e4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80046e6:	075b      	lsls	r3, r3, #29
 80046e8:	d40f      	bmi.n	800470a <SDMMC_CmdSendCSD+0x66>
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80046ea:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80046ec:	f010 0001 	ands.w	r0, r0, #1
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80046f0:	bf15      	itete	ne
 80046f2:	2001      	movne	r0, #1
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80046f4:	23c5      	moveq	r3, #197	; 0xc5
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80046f6:	63a0      	strne	r0, [r4, #56]	; 0x38
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80046f8:	63a3      	streq	r3, [r4, #56]	; 0x38
}
 80046fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80046fe:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 8004700:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8004704:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004708:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800470a:	2004      	movs	r0, #4
 800470c:	63a0      	str	r0, [r4, #56]	; 0x38
 800470e:	e7f9      	b.n	8004704 <SDMMC_CmdSendCSD+0x60>
 8004710:	20000004 	.word	0x20000004
 8004714:	10624dd3 	.word	0x10624dd3

08004718 <SDMMC_CmdSetRelAdd>:
  SDIOx->ARG = Command->Argument;
 8004718:	2300      	movs	r3, #0
{
 800471a:	b410      	push	{r4}
  SDIOx->ARG = Command->Argument;
 800471c:	6083      	str	r3, [r0, #8]
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800471e:	68c2      	ldr	r2, [r0, #12]
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004720:	4b26      	ldr	r3, [pc, #152]	; (80047bc <SDMMC_CmdSetRelAdd+0xa4>)
 8004722:	4c27      	ldr	r4, [pc, #156]	; (80047c0 <SDMMC_CmdSetRelAdd+0xa8>)
 8004724:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8004726:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 800472a:	f022 020f 	bic.w	r2, r2, #15
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800472e:	fba4 4303 	umull	r4, r3, r4, r3
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8004732:	f442 6288 	orr.w	r2, r2, #1088	; 0x440
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004736:	0a5c      	lsrs	r4, r3, #9
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8004738:	f042 0203 	orr.w	r2, r2, #3
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800473c:	f241 3388 	movw	r3, #5000	; 0x1388
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8004740:	60c2      	str	r2, [r0, #12]
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004742:	fb03 f304 	mul.w	r3, r3, r4
    if (count-- == 0U)
 8004746:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 800474a:	d311      	bcc.n	8004770 <SDMMC_CmdSetRelAdd+0x58>
    sta_reg = SDIOx->STA;
 800474c:	6b42      	ldr	r2, [r0, #52]	; 0x34
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800474e:	f012 0f45 	tst.w	r2, #69	; 0x45
 8004752:	d0f8      	beq.n	8004746 <SDMMC_CmdSetRelAdd+0x2e>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004754:	0512      	lsls	r2, r2, #20
 8004756:	d4f6      	bmi.n	8004746 <SDMMC_CmdSetRelAdd+0x2e>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004758:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800475a:	075b      	lsls	r3, r3, #29
 800475c:	d413      	bmi.n	8004786 <SDMMC_CmdSetRelAdd+0x6e>
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800475e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004760:	07dc      	lsls	r4, r3, #31
 8004762:	d40a      	bmi.n	800477a <SDMMC_CmdSetRelAdd+0x62>
  return (uint8_t)(SDIOx->RESPCMD);
 8004764:	6903      	ldr	r3, [r0, #16]
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8004766:	b2db      	uxtb	r3, r3
 8004768:	2b03      	cmp	r3, #3
 800476a:	d010      	beq.n	800478e <SDMMC_CmdSetRelAdd+0x76>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800476c:	2001      	movs	r0, #1
 800476e:	e001      	b.n	8004774 <SDMMC_CmdSetRelAdd+0x5c>
      return SDMMC_ERROR_TIMEOUT;
 8004770:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8004774:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004778:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800477a:	2301      	movs	r3, #1
 800477c:	6383      	str	r3, [r0, #56]	; 0x38
}
 800477e:	f85d 4b04 	ldr.w	r4, [sp], #4
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004782:	4618      	mov	r0, r3
}
 8004784:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004786:	2304      	movs	r3, #4
 8004788:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800478a:	4618      	mov	r0, r3
 800478c:	e7f2      	b.n	8004774 <SDMMC_CmdSetRelAdd+0x5c>
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800478e:	23c5      	movs	r3, #197	; 0xc5
 8004790:	6383      	str	r3, [r0, #56]	; 0x38
  return (*(__IO uint32_t *) tmp);
 8004792:	6943      	ldr	r3, [r0, #20]
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8004794:	f413 4060 	ands.w	r0, r3, #57344	; 0xe000
 8004798:	d009      	beq.n	80047ae <SDMMC_CmdSetRelAdd+0x96>
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800479a:	045a      	lsls	r2, r3, #17
 800479c:	d40a      	bmi.n	80047b4 <SDMMC_CmdSetRelAdd+0x9c>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800479e:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 80047a2:	bf0c      	ite	eq
 80047a4:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 80047a8:	f44f 5080 	movne.w	r0, #4096	; 0x1000
 80047ac:	e7e2      	b.n	8004774 <SDMMC_CmdSetRelAdd+0x5c>
    *pRCA = (uint16_t) (response_r1 >> 16);
 80047ae:	0c1b      	lsrs	r3, r3, #16
 80047b0:	800b      	strh	r3, [r1, #0]
 80047b2:	e7df      	b.n	8004774 <SDMMC_CmdSetRelAdd+0x5c>
    return SDMMC_ERROR_ILLEGAL_CMD;
 80047b4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80047b8:	e7dc      	b.n	8004774 <SDMMC_CmdSetRelAdd+0x5c>
 80047ba:	bf00      	nop
 80047bc:	20000004 	.word	0x20000004
 80047c0:	10624dd3 	.word	0x10624dd3

080047c4 <SDMMC_CmdSendStatus>:
  SDIOx->ARG = Command->Argument;
 80047c4:	6081      	str	r1, [r0, #8]
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80047c6:	68c2      	ldr	r2, [r0, #12]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80047c8:	4b1b      	ldr	r3, [pc, #108]	; (8004838 <SDMMC_CmdSendStatus+0x74>)
 80047ca:	491c      	ldr	r1, [pc, #112]	; (800483c <SDMMC_CmdSendStatus+0x78>)
 80047cc:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80047ce:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 80047d2:	f022 020f 	bic.w	r2, r2, #15
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80047d6:	fba1 1303 	umull	r1, r3, r1, r3
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80047da:	f442 6289 	orr.w	r2, r2, #1096	; 0x448
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80047de:	0a59      	lsrs	r1, r3, #9
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80047e0:	f042 0205 	orr.w	r2, r2, #5
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80047e4:	f241 3388 	movw	r3, #5000	; 0x1388
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80047e8:	60c2      	str	r2, [r0, #12]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80047ea:	fb03 f301 	mul.w	r3, r3, r1
    if (count-- == 0U)
 80047ee:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 80047f2:	d313      	bcc.n	800481c <SDMMC_CmdSendStatus+0x58>
    sta_reg = SDIOx->STA;
 80047f4:	6b42      	ldr	r2, [r0, #52]	; 0x34
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80047f6:	f012 0f45 	tst.w	r2, #69	; 0x45
 80047fa:	d0f8      	beq.n	80047ee <SDMMC_CmdSendStatus+0x2a>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80047fc:	0511      	lsls	r1, r2, #20
 80047fe:	d4f6      	bmi.n	80047ee <SDMMC_CmdSendStatus+0x2a>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004800:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004802:	075a      	lsls	r2, r3, #29
 8004804:	d411      	bmi.n	800482a <SDMMC_CmdSendStatus+0x66>
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004806:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004808:	07db      	lsls	r3, r3, #31
 800480a:	d40a      	bmi.n	8004822 <SDMMC_CmdSendStatus+0x5e>
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800480c:	23c5      	movs	r3, #197	; 0xc5
 800480e:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDIOx->RESPCMD);
 8004810:	6903      	ldr	r3, [r0, #16]
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8004812:	b2db      	uxtb	r3, r3
 8004814:	2b0d      	cmp	r3, #13
 8004816:	d00c      	beq.n	8004832 <SDMMC_CmdSendStatus+0x6e>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004818:	2001      	movs	r0, #1
}
 800481a:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 800481c:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8004820:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004822:	2301      	movs	r3, #1
 8004824:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004826:	4618      	mov	r0, r3
 8004828:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800482a:	2304      	movs	r3, #4
 800482c:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800482e:	4618      	mov	r0, r3
 8004830:	4770      	bx	lr
 8004832:	f7ff bbc3 	b.w	8003fbc <SDMMC_GetCmdResp1.part.2>
 8004836:	bf00      	nop
 8004838:	20000004 	.word	0x20000004
 800483c:	10624dd3 	.word	0x10624dd3

08004840 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8004840:	b508      	push	{r3, lr}
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8004842:	4903      	ldr	r1, [pc, #12]	; (8004850 <MX_FATFS_Init+0x10>)
 8004844:	4803      	ldr	r0, [pc, #12]	; (8004854 <MX_FATFS_Init+0x14>)
 8004846:	f003 fc23 	bl	8008090 <FATFS_LinkDriver>
 800484a:	4b03      	ldr	r3, [pc, #12]	; (8004858 <MX_FATFS_Init+0x18>)
 800484c:	7018      	strb	r0, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800484e:	bd08      	pop	{r3, pc}
 8004850:	200005f8 	.word	0x200005f8
 8004854:	0800ac64 	.word	0x0800ac64
 8004858:	200005f4 	.word	0x200005f4

0800485c <get_fattime>:
DWORD get_fattime(void)
{
  /* USER CODE BEGIN get_fattime */
  return 0;
  /* USER CODE END get_fattime */
}
 800485c:	2000      	movs	r0, #0
 800485e:	4770      	bx	lr

08004860 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8004860:	b500      	push	{lr}
 8004862:	b083      	sub	sp, #12
  uint8_t sd_state = MSD_OK;

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8004864:	9300      	str	r3, [sp, #0]
 8004866:	4613      	mov	r3, r2
 8004868:	460a      	mov	r2, r1
 800486a:	4601      	mov	r1, r0
 800486c:	4804      	ldr	r0, [pc, #16]	; (8004880 <BSP_SD_ReadBlocks+0x20>)
 800486e:	f7fd ffb1 	bl	80027d4 <HAL_SD_ReadBlocks>
  {
    sd_state = MSD_ERROR;
  }

  return sd_state;
}
 8004872:	3000      	adds	r0, #0
 8004874:	bf18      	it	ne
 8004876:	2001      	movne	r0, #1
 8004878:	b003      	add	sp, #12
 800487a:	f85d fb04 	ldr.w	pc, [sp], #4
 800487e:	bf00      	nop
 8004880:	2000052c 	.word	0x2000052c

08004884 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8004884:	b500      	push	{lr}
 8004886:	b083      	sub	sp, #12
  uint8_t sd_state = MSD_OK;

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8004888:	9300      	str	r3, [sp, #0]
 800488a:	4613      	mov	r3, r2
 800488c:	460a      	mov	r2, r1
 800488e:	4601      	mov	r1, r0
 8004890:	4804      	ldr	r0, [pc, #16]	; (80048a4 <BSP_SD_WriteBlocks+0x20>)
 8004892:	f7fe f8c3 	bl	8002a1c <HAL_SD_WriteBlocks>
  {
    sd_state = MSD_ERROR;
  }

  return sd_state;
}
 8004896:	3000      	adds	r0, #0
 8004898:	bf18      	it	ne
 800489a:	2001      	movne	r0, #1
 800489c:	b003      	add	sp, #12
 800489e:	f85d fb04 	ldr.w	pc, [sp], #4
 80048a2:	bf00      	nop
 80048a4:	2000052c 	.word	0x2000052c

080048a8 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80048a8:	b508      	push	{r3, lr}
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80048aa:	4803      	ldr	r0, [pc, #12]	; (80048b8 <BSP_SD_GetCardState+0x10>)
 80048ac:	f7fe fd24 	bl	80032f8 <HAL_SD_GetCardState>
}
 80048b0:	3804      	subs	r0, #4
 80048b2:	bf18      	it	ne
 80048b4:	2001      	movne	r0, #1
 80048b6:	bd08      	pop	{r3, pc}
 80048b8:	2000052c 	.word	0x2000052c

080048bc <BSP_SD_GetCardInfo>:
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 80048bc:	4601      	mov	r1, r0
 80048be:	4801      	ldr	r0, [pc, #4]	; (80048c4 <BSP_SD_GetCardInfo+0x8>)
 80048c0:	f7fe bd06 	b.w	80032d0 <HAL_SD_GetCardInfo>
 80048c4:	2000052c 	.word	0x2000052c

080048c8 <BSP_SD_AbortCallback>:
 80048c8:	4770      	bx	lr
 80048ca:	bf00      	nop

080048cc <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 80048cc:	b508      	push	{r3, lr}
  BSP_SD_AbortCallback();
 80048ce:	f7ff fffb 	bl	80048c8 <BSP_SD_AbortCallback>
}
 80048d2:	bd08      	pop	{r3, pc}

080048d4 <BSP_SD_WriteCpltCallback>:
 80048d4:	4770      	bx	lr
 80048d6:	bf00      	nop

080048d8 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 80048d8:	b508      	push	{r3, lr}
  BSP_SD_WriteCpltCallback();
 80048da:	f7ff fffb 	bl	80048d4 <BSP_SD_WriteCpltCallback>
}
 80048de:	bd08      	pop	{r3, pc}

080048e0 <BSP_SD_ReadCpltCallback>:
 80048e0:	4770      	bx	lr
 80048e2:	bf00      	nop

080048e4 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 80048e4:	b508      	push	{r3, lr}
  BSP_SD_ReadCpltCallback();
 80048e6:	f7ff fffb 	bl	80048e0 <BSP_SD_ReadCpltCallback>
}
 80048ea:	bd08      	pop	{r3, pc}

080048ec <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80048ec:	b082      	sub	sp, #8
  __IO uint8_t status = SD_PRESENT;
 80048ee:	2301      	movs	r3, #1
 80048f0:	f88d 3007 	strb.w	r3, [sp, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 80048f4:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 80048f8:	b002      	add	sp, #8
 80048fa:	4770      	bx	lr

080048fc <BSP_SD_Init>:
{
 80048fc:	b508      	push	{r3, lr}
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80048fe:	f7ff fff5 	bl	80048ec <BSP_SD_IsDetected>
 8004902:	2801      	cmp	r0, #1
 8004904:	d001      	beq.n	800490a <BSP_SD_Init+0xe>
}
 8004906:	2001      	movs	r0, #1
 8004908:	bd08      	pop	{r3, pc}
  sd_state = HAL_SD_Init(&hsd);
 800490a:	4802      	ldr	r0, [pc, #8]	; (8004914 <BSP_SD_Init+0x18>)
}
 800490c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sd_state = HAL_SD_Init(&hsd);
 8004910:	f7fe bbc4 	b.w	800309c <HAL_SD_Init>
 8004914:	2000052c 	.word	0x2000052c

08004918 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8004918:	b538      	push	{r3, r4, r5, lr}
Stat = STA_NOINIT;
 800491a:	4c0a      	ldr	r4, [pc, #40]	; (8004944 <SD_initialize+0x2c>)
 800491c:	2501      	movs	r5, #1
 800491e:	7025      	strb	r5, [r4, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8004920:	f7ff ffec 	bl	80048fc <BSP_SD_Init>
 8004924:	b108      	cbz	r0, 800492a <SD_initialize+0x12>

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8004926:	7820      	ldrb	r0, [r4, #0]
}
 8004928:	bd38      	pop	{r3, r4, r5, pc}
  Stat = STA_NOINIT;
 800492a:	7025      	strb	r5, [r4, #0]
  if(BSP_SD_GetCardState() == MSD_OK)
 800492c:	f7ff ffbc 	bl	80048a8 <BSP_SD_GetCardState>
 8004930:	b918      	cbnz	r0, 800493a <SD_initialize+0x22>
    Stat &= ~STA_NOINIT;
 8004932:	7823      	ldrb	r3, [r4, #0]
 8004934:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8004938:	7023      	strb	r3, [r4, #0]
  return Stat;
 800493a:	7823      	ldrb	r3, [r4, #0]
 800493c:	b2db      	uxtb	r3, r3
    Stat = SD_CheckStatus(lun);
 800493e:	7023      	strb	r3, [r4, #0]
  return Stat;
 8004940:	7820      	ldrb	r0, [r4, #0]
}
 8004942:	bd38      	pop	{r3, r4, r5, pc}
 8004944:	20000010 	.word	0x20000010

08004948 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8004948:	b510      	push	{r4, lr}
  Stat = STA_NOINIT;
 800494a:	4c06      	ldr	r4, [pc, #24]	; (8004964 <SD_status+0x1c>)
 800494c:	2301      	movs	r3, #1
 800494e:	7023      	strb	r3, [r4, #0]
  if(BSP_SD_GetCardState() == MSD_OK)
 8004950:	f7ff ffaa 	bl	80048a8 <BSP_SD_GetCardState>
 8004954:	b918      	cbnz	r0, 800495e <SD_status+0x16>
    Stat &= ~STA_NOINIT;
 8004956:	7823      	ldrb	r3, [r4, #0]
 8004958:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800495c:	7023      	strb	r3, [r4, #0]
  return Stat;
 800495e:	7820      	ldrb	r0, [r4, #0]
  return SD_CheckStatus(lun);
}
 8004960:	bd10      	pop	{r4, pc}
 8004962:	bf00      	nop
 8004964:	20000010 	.word	0x20000010

08004968 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8004968:	b508      	push	{r3, lr}
  DRESULT res = RES_ERROR;

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800496a:	4608      	mov	r0, r1
 800496c:	4611      	mov	r1, r2
 800496e:	461a      	mov	r2, r3
 8004970:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004974:	f7ff ff74 	bl	8004860 <BSP_SD_ReadBlocks>
 8004978:	b920      	cbnz	r0, 8004984 <SD_read+0x1c>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800497a:	f7ff ff95 	bl	80048a8 <BSP_SD_GetCardState>
 800497e:	2800      	cmp	r0, #0
 8004980:	d1fb      	bne.n	800497a <SD_read+0x12>
    }
    res = RES_OK;
  }

  return res;
}
 8004982:	bd08      	pop	{r3, pc}
  DRESULT res = RES_ERROR;
 8004984:	2001      	movs	r0, #1
}
 8004986:	bd08      	pop	{r3, pc}

08004988 <SD_ioctl>:
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
  DRESULT res = RES_ERROR;
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8004988:	4b16      	ldr	r3, [pc, #88]	; (80049e4 <SD_ioctl+0x5c>)
 800498a:	781b      	ldrb	r3, [r3, #0]
 800498c:	07db      	lsls	r3, r3, #31
 800498e:	d408      	bmi.n	80049a2 <SD_ioctl+0x1a>
{
 8004990:	b510      	push	{r4, lr}
 8004992:	4614      	mov	r4, r2
 8004994:	b088      	sub	sp, #32

  switch (cmd)
 8004996:	2903      	cmp	r1, #3
 8004998:	d821      	bhi.n	80049de <SD_ioctl+0x56>
 800499a:	e8df f001 	tbb	[pc, r1]
 800499e:	0704      	.short	0x0704
 80049a0:	170f      	.short	0x170f
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80049a2:	2003      	movs	r0, #3
  default:
    res = RES_PARERR;
  }

  return res;
}
 80049a4:	4770      	bx	lr
    res = RES_OK;
 80049a6:	2000      	movs	r0, #0
}
 80049a8:	b008      	add	sp, #32
 80049aa:	bd10      	pop	{r4, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 80049ac:	4668      	mov	r0, sp
 80049ae:	f7ff ff85 	bl	80048bc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80049b2:	9b06      	ldr	r3, [sp, #24]
 80049b4:	6023      	str	r3, [r4, #0]
    res = RES_OK;
 80049b6:	2000      	movs	r0, #0
}
 80049b8:	b008      	add	sp, #32
 80049ba:	bd10      	pop	{r4, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 80049bc:	4668      	mov	r0, sp
 80049be:	f7ff ff7d 	bl	80048bc <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80049c2:	9b07      	ldr	r3, [sp, #28]
 80049c4:	8023      	strh	r3, [r4, #0]
    res = RES_OK;
 80049c6:	2000      	movs	r0, #0
}
 80049c8:	b008      	add	sp, #32
 80049ca:	bd10      	pop	{r4, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 80049cc:	4668      	mov	r0, sp
 80049ce:	f7ff ff75 	bl	80048bc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80049d2:	9b07      	ldr	r3, [sp, #28]
 80049d4:	2000      	movs	r0, #0
 80049d6:	0a5b      	lsrs	r3, r3, #9
 80049d8:	6023      	str	r3, [r4, #0]
}
 80049da:	b008      	add	sp, #32
 80049dc:	bd10      	pop	{r4, pc}
    res = RES_PARERR;
 80049de:	2004      	movs	r0, #4
}
 80049e0:	b008      	add	sp, #32
 80049e2:	bd10      	pop	{r4, pc}
 80049e4:	20000010 	.word	0x20000010

080049e8 <SD_write>:
{
 80049e8:	b508      	push	{r3, lr}
  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 80049ea:	4608      	mov	r0, r1
 80049ec:	4611      	mov	r1, r2
 80049ee:	461a      	mov	r2, r3
 80049f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80049f4:	f7ff ff46 	bl	8004884 <BSP_SD_WriteBlocks>
 80049f8:	b920      	cbnz	r0, 8004a04 <SD_write+0x1c>
    while(BSP_SD_GetCardState()!= MSD_OK)
 80049fa:	f7ff ff55 	bl	80048a8 <BSP_SD_GetCardState>
 80049fe:	2800      	cmp	r0, #0
 8004a00:	d1fb      	bne.n	80049fa <SD_write+0x12>
}
 8004a02:	bd08      	pop	{r3, pc}
  DRESULT res = RES_ERROR;
 8004a04:	2001      	movs	r0, #1
}
 8004a06:	bd08      	pop	{r3, pc}

08004a08 <disk_status>:
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8004a08:	4b03      	ldr	r3, [pc, #12]	; (8004a18 <disk_status+0x10>)
 8004a0a:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 8004a0e:	4403      	add	r3, r0
 8004a10:	6852      	ldr	r2, [r2, #4]
 8004a12:	7a18      	ldrb	r0, [r3, #8]
 8004a14:	6853      	ldr	r3, [r2, #4]
 8004a16:	4718      	bx	r3
 8004a18:	2000042c 	.word	0x2000042c

08004a1c <disk_initialize>:
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat = RES_OK;

  if(disk.is_initialized[pdrv] == 0)
 8004a1c:	4b06      	ldr	r3, [pc, #24]	; (8004a38 <disk_initialize+0x1c>)
 8004a1e:	5c1a      	ldrb	r2, [r3, r0]
 8004a20:	b942      	cbnz	r2, 8004a34 <disk_initialize+0x18>
  {
    disk.is_initialized[pdrv] = 1;
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8004a22:	eb03 0280 	add.w	r2, r3, r0, lsl #2
    disk.is_initialized[pdrv] = 1;
 8004a26:	2101      	movs	r1, #1
 8004a28:	5419      	strb	r1, [r3, r0]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8004a2a:	6852      	ldr	r2, [r2, #4]
 8004a2c:	4403      	add	r3, r0
 8004a2e:	6812      	ldr	r2, [r2, #0]
 8004a30:	7a18      	ldrb	r0, [r3, #8]
 8004a32:	4710      	bx	r2
  }
  return stat;
}
 8004a34:	2000      	movs	r0, #0
 8004a36:	4770      	bx	lr
 8004a38:	2000042c 	.word	0x2000042c

08004a3c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8004a3c:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8004a3e:	4c05      	ldr	r4, [pc, #20]	; (8004a54 <disk_read+0x18>)
 8004a40:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 8004a44:	4404      	add	r4, r0
 8004a46:	686d      	ldr	r5, [r5, #4]
 8004a48:	7a20      	ldrb	r0, [r4, #8]
 8004a4a:	68ac      	ldr	r4, [r5, #8]
 8004a4c:	46a4      	mov	ip, r4
  return res;
}
 8004a4e:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8004a50:	4760      	bx	ip
 8004a52:	bf00      	nop
 8004a54:	2000042c 	.word	0x2000042c

08004a58 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8004a58:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8004a5a:	4c05      	ldr	r4, [pc, #20]	; (8004a70 <disk_write+0x18>)
 8004a5c:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 8004a60:	4404      	add	r4, r0
 8004a62:	686d      	ldr	r5, [r5, #4]
 8004a64:	7a20      	ldrb	r0, [r4, #8]
 8004a66:	68ec      	ldr	r4, [r5, #12]
 8004a68:	46a4      	mov	ip, r4
  return res;
}
 8004a6a:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8004a6c:	4760      	bx	ip
 8004a6e:	bf00      	nop
 8004a70:	2000042c 	.word	0x2000042c

08004a74 <move_window.part.5>:
}
#endif


static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
 8004a74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8004a78:	78c3      	ldrb	r3, [r0, #3]
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
 8004a7a:	4604      	mov	r4, r0
 8004a7c:	460e      	mov	r6, r1
 8004a7e:	f100 0738 	add.w	r7, r0, #56	; 0x38
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8004a82:	b973      	cbnz	r3, 8004aa2 <move_window.part.5+0x2e>
	if (sector != fs->winsect) {	/* Window offset changed? */
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8004a84:	4632      	mov	r2, r6
 8004a86:	4639      	mov	r1, r7
 8004a88:	2301      	movs	r3, #1
 8004a8a:	7860      	ldrb	r0, [r4, #1]
 8004a8c:	f7ff ffd6 	bl	8004a3c <disk_read>
 8004a90:	2800      	cmp	r0, #0
 8004a92:	bf18      	it	ne
 8004a94:	f04f 36ff 	movne.w	r6, #4294967295	; 0xffffffff
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
				res = FR_DISK_ERR;
			}
			fs->winsect = sector;
 8004a98:	6366      	str	r6, [r4, #52]	; 0x34
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8004a9a:	bf14      	ite	ne
 8004a9c:	2001      	movne	r0, #1
 8004a9e:	2000      	moveq	r0, #0
 8004aa0:	e01f      	b.n	8004ae2 <move_window.part.5+0x6e>
		wsect = fs->winsect;	/* Current sector number */
 8004aa2:	6b45      	ldr	r5, [r0, #52]	; 0x34
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8004aa4:	7840      	ldrb	r0, [r0, #1]
 8004aa6:	462a      	mov	r2, r5
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	4639      	mov	r1, r7
 8004aac:	f7ff ffd4 	bl	8004a58 <disk_write>
 8004ab0:	b9b0      	cbnz	r0, 8004ae0 <move_window.part.5+0x6c>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8004ab2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004ab4:	6a22      	ldr	r2, [r4, #32]
			fs->wflag = 0;
 8004ab6:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8004ab8:	1aeb      	subs	r3, r5, r3
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d2e2      	bcs.n	8004a84 <move_window.part.5+0x10>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004abe:	f894 8002 	ldrb.w	r8, [r4, #2]
 8004ac2:	7860      	ldrb	r0, [r4, #1]
 8004ac4:	f1b8 0f01 	cmp.w	r8, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 8004ac8:	f04f 0301 	mov.w	r3, #1
 8004acc:	4639      	mov	r1, r7
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004ace:	d9d9      	bls.n	8004a84 <move_window.part.5+0x10>
					wsect += fs->fsize;
 8004ad0:	6a22      	ldr	r2, [r4, #32]
 8004ad2:	4415      	add	r5, r2
					disk_write(fs->drv, fs->win, wsect, 1);
 8004ad4:	462a      	mov	r2, r5
 8004ad6:	f7ff ffbf 	bl	8004a58 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004ada:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8004ade:	e7f0      	b.n	8004ac2 <move_window.part.5+0x4e>
			res = FR_DISK_ERR;
 8004ae0:	2001      	movs	r0, #1
		}
	}
	return res;
}
 8004ae2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08004ae8 <put_fat.part.7>:
/*-----------------------------------------------------------------------*/
/* FAT access - Change value of a FAT entry                              */
/*-----------------------------------------------------------------------*/

static
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
 8004ae8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
		switch (fs->fs_type) {
 8004aec:	7803      	ldrb	r3, [r0, #0]
 8004aee:	2b02      	cmp	r3, #2
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
 8004af0:	4604      	mov	r4, r0
 8004af2:	460d      	mov	r5, r1
 8004af4:	4617      	mov	r7, r2
		switch (fs->fs_type) {
 8004af6:	f000 808d 	beq.w	8004c14 <put_fat.part.7+0x12c>
 8004afa:	2b03      	cmp	r3, #3
 8004afc:	d064      	beq.n	8004bc8 <put_fat.part.7+0xe0>
 8004afe:	2b01      	cmp	r3, #1
 8004b00:	d002      	beq.n	8004b08 <put_fat.part.7+0x20>
	FRESULT res = FR_INT_ERR;
 8004b02:	2002      	movs	r0, #2
			fs->wflag = 1;
			break;
		}
	}
	return res;
}
 8004b04:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004b08:	6a82      	ldr	r2, [r0, #40]	; 0x28
	if (sector != fs->winsect) {	/* Window offset changed? */
 8004b0a:	f8d0 a034 	ldr.w	sl, [r0, #52]	; 0x34
			bc = (UINT)clst; bc += bc / 2;
 8004b0e:	eb01 0851 	add.w	r8, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004b12:	eb02 2958 	add.w	r9, r2, r8, lsr #9
	if (sector != fs->winsect) {	/* Window offset changed? */
 8004b16:	45d1      	cmp	r9, sl
 8004b18:	f100 0638 	add.w	r6, r0, #56	; 0x38
 8004b1c:	f040 80f1 	bne.w	8004d02 <put_fat.part.7+0x21a>
			p = fs->win + bc++ % SS(fs);
 8004b20:	f108 0901 	add.w	r9, r8, #1
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8004b24:	f015 0501 	ands.w	r5, r5, #1
			p = fs->win + bc++ % SS(fs);
 8004b28:	f3c8 0808 	ubfx	r8, r8, #0, #9
 8004b2c:	ea4f 2259 	mov.w	r2, r9, lsr #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8004b30:	f000 8115 	beq.w	8004d5e <put_fat.part.7+0x276>
 8004b34:	f816 3008 	ldrb.w	r3, [r6, r8]
 8004b38:	f003 030f 	and.w	r3, r3, #15
 8004b3c:	ea43 1307 	orr.w	r3, r3, r7, lsl #4
 8004b40:	f806 3008 	strb.w	r3, [r6, r8]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004b44:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	if (sector != fs->winsect) {	/* Window offset changed? */
 8004b46:	f8d4 a034 	ldr.w	sl, [r4, #52]	; 0x34
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004b4a:	eb02 0803 	add.w	r8, r2, r3
	if (sector != fs->winsect) {	/* Window offset changed? */
 8004b4e:	45d0      	cmp	r8, sl
			fs->wflag = 1;
 8004b50:	f04f 0301 	mov.w	r3, #1
 8004b54:	70e3      	strb	r3, [r4, #3]
	if (sector != fs->winsect) {	/* Window offset changed? */
 8004b56:	f000 8121 	beq.w	8004d9c <put_fat.part.7+0x2b4>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	4652      	mov	r2, sl
 8004b5e:	4631      	mov	r1, r6
 8004b60:	7860      	ldrb	r0, [r4, #1]
 8004b62:	f7ff ff79 	bl	8004a58 <disk_write>
 8004b66:	2800      	cmp	r0, #0
 8004b68:	f040 80c8 	bne.w	8004cfc <put_fat.part.7+0x214>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8004b6c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8004b6e:	6a23      	ldr	r3, [r4, #32]
			fs->wflag = 0;
 8004b70:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8004b72:	ebaa 0202 	sub.w	r2, sl, r2
 8004b76:	429a      	cmp	r2, r3
 8004b78:	d212      	bcs.n	8004ba0 <put_fat.part.7+0xb8>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004b7a:	f894 b002 	ldrb.w	fp, [r4, #2]
 8004b7e:	f1bb 0f01 	cmp.w	fp, #1
 8004b82:	d801      	bhi.n	8004b88 <put_fat.part.7+0xa0>
 8004b84:	e00c      	b.n	8004ba0 <put_fat.part.7+0xb8>
 8004b86:	6a23      	ldr	r3, [r4, #32]
					disk_write(fs->drv, fs->win, wsect, 1);
 8004b88:	7860      	ldrb	r0, [r4, #1]
					wsect += fs->fsize;
 8004b8a:	449a      	add	sl, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004b8c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
					disk_write(fs->drv, fs->win, wsect, 1);
 8004b90:	4652      	mov	r2, sl
 8004b92:	2301      	movs	r3, #1
 8004b94:	4631      	mov	r1, r6
 8004b96:	f7ff ff5f 	bl	8004a58 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004b9a:	f1bb 0f01 	cmp.w	fp, #1
 8004b9e:	d1f2      	bne.n	8004b86 <put_fat.part.7+0x9e>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	4642      	mov	r2, r8
 8004ba4:	4631      	mov	r1, r6
 8004ba6:	7860      	ldrb	r0, [r4, #1]
 8004ba8:	f7ff ff48 	bl	8004a3c <disk_read>
 8004bac:	2800      	cmp	r0, #0
 8004bae:	f040 80a2 	bne.w	8004cf6 <put_fat.part.7+0x20e>
			p = fs->win + bc % SS(fs);
 8004bb2:	f3c9 0908 	ubfx	r9, r9, #0, #9
 8004bb6:	444e      	add	r6, r9
			fs->winsect = sector;
 8004bb8:	f8c4 8034 	str.w	r8, [r4, #52]	; 0x34
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8004bbc:	2d00      	cmp	r5, #0
 8004bbe:	f000 80de 	beq.w	8004d7e <put_fat.part.7+0x296>
 8004bc2:	f3c7 1707 	ubfx	r7, r7, #4, #8
 8004bc6:	e0e0      	b.n	8004d8a <put_fat.part.7+0x2a2>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8004bc8:	6a83      	ldr	r3, [r0, #40]	; 0x28
	if (sector != fs->winsect) {	/* Window offset changed? */
 8004bca:	f8d0 9034 	ldr.w	r9, [r0, #52]	; 0x34
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8004bce:	eb03 18d1 	add.w	r8, r3, r1, lsr #7
	if (sector != fs->winsect) {	/* Window offset changed? */
 8004bd2:	45c8      	cmp	r8, r9
 8004bd4:	f100 0638 	add.w	r6, r0, #56	; 0x38
 8004bd8:	d161      	bne.n	8004c9e <put_fat.part.7+0x1b6>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8004bda:	00ad      	lsls	r5, r5, #2
 8004bdc:	f405 75fe 	and.w	r5, r5, #508	; 0x1fc
 8004be0:	1973      	adds	r3, r6, r5
 8004be2:	f027 4770 	bic.w	r7, r7, #4026531840	; 0xf0000000
	rv = rv << 8 | ptr[2];
 8004be6:	885a      	ldrh	r2, [r3, #2]
	rv = rv << 8 | ptr[0];
 8004be8:	0412      	lsls	r2, r2, #16
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8004bea:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 8004bee:	433a      	orrs	r2, r7
	*ptr++ = (BYTE)val; val >>= 8;
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	0a11      	lsrs	r1, r2, #8
 8004bf4:	f362 0307 	bfi	r3, r2, #0, #8
 8004bf8:	f361 230f 	bfi	r3, r1, #8, #8
	*ptr++ = (BYTE)val; val >>= 8;
 8004bfc:	0c11      	lsrs	r1, r2, #16
	*ptr++ = (BYTE)val; val >>= 8;
 8004bfe:	f361 4317 	bfi	r3, r1, #16, #8
	*ptr++ = (BYTE)val; val >>= 8;
 8004c02:	0e12      	lsrs	r2, r2, #24
	*ptr++ = (BYTE)val; val >>= 8;
 8004c04:	f362 631f 	bfi	r3, r2, #24, #8
 8004c08:	5173      	str	r3, [r6, r5]
			fs->wflag = 1;
 8004c0a:	2201      	movs	r2, #1
 8004c0c:	70e2      	strb	r2, [r4, #3]
 8004c0e:	2000      	movs	r0, #0
}
 8004c10:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8004c14:	6a86      	ldr	r6, [r0, #40]	; 0x28
	if (sector != fs->winsect) {	/* Window offset changed? */
 8004c16:	f8d0 8034 	ldr.w	r8, [r0, #52]	; 0x34
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8004c1a:	eb06 2611 	add.w	r6, r6, r1, lsr #8
	if (sector != fs->winsect) {	/* Window offset changed? */
 8004c1e:	4546      	cmp	r6, r8
 8004c20:	f100 0938 	add.w	r9, r0, #56	; 0x38
 8004c24:	d02c      	beq.n	8004c80 <put_fat.part.7+0x198>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8004c26:	78c3      	ldrb	r3, [r0, #3]
 8004c28:	7840      	ldrb	r0, [r0, #1]
 8004c2a:	b30b      	cbz	r3, 8004c70 <put_fat.part.7+0x188>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	4642      	mov	r2, r8
 8004c30:	4649      	mov	r1, r9
 8004c32:	f7ff ff11 	bl	8004a58 <disk_write>
 8004c36:	2800      	cmp	r0, #0
 8004c38:	d160      	bne.n	8004cfc <put_fat.part.7+0x214>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8004c3a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8004c3c:	6a23      	ldr	r3, [r4, #32]
			fs->wflag = 0;
 8004c3e:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8004c40:	eba8 0202 	sub.w	r2, r8, r2
 8004c44:	429a      	cmp	r2, r3
 8004c46:	d212      	bcs.n	8004c6e <put_fat.part.7+0x186>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004c48:	f894 a002 	ldrb.w	sl, [r4, #2]
 8004c4c:	f1ba 0f01 	cmp.w	sl, #1
 8004c50:	d801      	bhi.n	8004c56 <put_fat.part.7+0x16e>
 8004c52:	e00c      	b.n	8004c6e <put_fat.part.7+0x186>
 8004c54:	6a23      	ldr	r3, [r4, #32]
					disk_write(fs->drv, fs->win, wsect, 1);
 8004c56:	7860      	ldrb	r0, [r4, #1]
					wsect += fs->fsize;
 8004c58:	4498      	add	r8, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004c5a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
					disk_write(fs->drv, fs->win, wsect, 1);
 8004c5e:	4642      	mov	r2, r8
 8004c60:	2301      	movs	r3, #1
 8004c62:	4649      	mov	r1, r9
 8004c64:	f7ff fef8 	bl	8004a58 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004c68:	f1ba 0f01 	cmp.w	sl, #1
 8004c6c:	d1f2      	bne.n	8004c54 <put_fat.part.7+0x16c>
 8004c6e:	7860      	ldrb	r0, [r4, #1]
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8004c70:	2301      	movs	r3, #1
 8004c72:	4632      	mov	r2, r6
 8004c74:	4649      	mov	r1, r9
 8004c76:	f7ff fee1 	bl	8004a3c <disk_read>
 8004c7a:	2800      	cmp	r0, #0
 8004c7c:	d13b      	bne.n	8004cf6 <put_fat.part.7+0x20e>
			fs->winsect = sector;
 8004c7e:	6366      	str	r6, [r4, #52]	; 0x34
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8004c80:	006d      	lsls	r5, r5, #1
 8004c82:	f405 75ff 	and.w	r5, r5, #510	; 0x1fe
 8004c86:	eb09 0205 	add.w	r2, r9, r5
	*ptr++ = (BYTE)val; val >>= 8;
 8004c8a:	f809 7005 	strb.w	r7, [r9, r5]
 8004c8e:	f3c7 2107 	ubfx	r1, r7, #8, #8
			fs->wflag = 1;
 8004c92:	2301      	movs	r3, #1
	*ptr++ = (BYTE)val;
 8004c94:	7051      	strb	r1, [r2, #1]
			fs->wflag = 1;
 8004c96:	70e3      	strb	r3, [r4, #3]
 8004c98:	2000      	movs	r0, #0
}
 8004c9a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8004c9e:	78c3      	ldrb	r3, [r0, #3]
 8004ca0:	7840      	ldrb	r0, [r0, #1]
 8004ca2:	b30b      	cbz	r3, 8004ce8 <put_fat.part.7+0x200>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	464a      	mov	r2, r9
 8004ca8:	4631      	mov	r1, r6
 8004caa:	f7ff fed5 	bl	8004a58 <disk_write>
 8004cae:	bb28      	cbnz	r0, 8004cfc <put_fat.part.7+0x214>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8004cb0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8004cb2:	6a23      	ldr	r3, [r4, #32]
			fs->wflag = 0;
 8004cb4:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8004cb6:	eba9 0202 	sub.w	r2, r9, r2
 8004cba:	429a      	cmp	r2, r3
 8004cbc:	7860      	ldrb	r0, [r4, #1]
 8004cbe:	d213      	bcs.n	8004ce8 <put_fat.part.7+0x200>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004cc0:	f894 a002 	ldrb.w	sl, [r4, #2]
 8004cc4:	f1ba 0f01 	cmp.w	sl, #1
 8004cc8:	d802      	bhi.n	8004cd0 <put_fat.part.7+0x1e8>
 8004cca:	e00d      	b.n	8004ce8 <put_fat.part.7+0x200>
 8004ccc:	6a23      	ldr	r3, [r4, #32]
 8004cce:	7860      	ldrb	r0, [r4, #1]
					wsect += fs->fsize;
 8004cd0:	4499      	add	r9, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004cd2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
					disk_write(fs->drv, fs->win, wsect, 1);
 8004cd6:	464a      	mov	r2, r9
 8004cd8:	2301      	movs	r3, #1
 8004cda:	4631      	mov	r1, r6
 8004cdc:	f7ff febc 	bl	8004a58 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004ce0:	f1ba 0f01 	cmp.w	sl, #1
 8004ce4:	d1f2      	bne.n	8004ccc <put_fat.part.7+0x1e4>
 8004ce6:	7860      	ldrb	r0, [r4, #1]
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8004ce8:	2301      	movs	r3, #1
 8004cea:	4642      	mov	r2, r8
 8004cec:	4631      	mov	r1, r6
 8004cee:	f7ff fea5 	bl	8004a3c <disk_read>
 8004cf2:	2800      	cmp	r0, #0
 8004cf4:	d04f      	beq.n	8004d96 <put_fat.part.7+0x2ae>
			fs->winsect = sector;
 8004cf6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004cfa:	6363      	str	r3, [r4, #52]	; 0x34
				res = FR_DISK_ERR;
 8004cfc:	2001      	movs	r0, #1
}
 8004cfe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8004d02:	78c2      	ldrb	r2, [r0, #3]
 8004d04:	7840      	ldrb	r0, [r0, #1]
 8004d06:	b302      	cbz	r2, 8004d4a <put_fat.part.7+0x262>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8004d08:	4652      	mov	r2, sl
 8004d0a:	4631      	mov	r1, r6
 8004d0c:	f7ff fea4 	bl	8004a58 <disk_write>
 8004d10:	2800      	cmp	r0, #0
 8004d12:	d1f3      	bne.n	8004cfc <put_fat.part.7+0x214>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8004d14:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8004d16:	6a23      	ldr	r3, [r4, #32]
			fs->wflag = 0;
 8004d18:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8004d1a:	ebaa 0202 	sub.w	r2, sl, r2
 8004d1e:	429a      	cmp	r2, r3
 8004d20:	d212      	bcs.n	8004d48 <put_fat.part.7+0x260>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004d22:	f894 b002 	ldrb.w	fp, [r4, #2]
 8004d26:	f1bb 0f01 	cmp.w	fp, #1
 8004d2a:	d801      	bhi.n	8004d30 <put_fat.part.7+0x248>
 8004d2c:	e00c      	b.n	8004d48 <put_fat.part.7+0x260>
 8004d2e:	6a23      	ldr	r3, [r4, #32]
					disk_write(fs->drv, fs->win, wsect, 1);
 8004d30:	7860      	ldrb	r0, [r4, #1]
					wsect += fs->fsize;
 8004d32:	449a      	add	sl, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004d34:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
					disk_write(fs->drv, fs->win, wsect, 1);
 8004d38:	4652      	mov	r2, sl
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	4631      	mov	r1, r6
 8004d3e:	f7ff fe8b 	bl	8004a58 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004d42:	f1bb 0f01 	cmp.w	fp, #1
 8004d46:	d1f2      	bne.n	8004d2e <put_fat.part.7+0x246>
 8004d48:	7860      	ldrb	r0, [r4, #1]
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	464a      	mov	r2, r9
 8004d4e:	4631      	mov	r1, r6
 8004d50:	f7ff fe74 	bl	8004a3c <disk_read>
 8004d54:	2800      	cmp	r0, #0
 8004d56:	d1ce      	bne.n	8004cf6 <put_fat.part.7+0x20e>
			fs->winsect = sector;
 8004d58:	f8c4 9034 	str.w	r9, [r4, #52]	; 0x34
 8004d5c:	e6e0      	b.n	8004b20 <put_fat.part.7+0x38>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8004d5e:	f806 7008 	strb.w	r7, [r6, r8]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004d62:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	if (sector != fs->winsect) {	/* Window offset changed? */
 8004d64:	f8d4 a034 	ldr.w	sl, [r4, #52]	; 0x34
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004d68:	eb02 0803 	add.w	r8, r2, r3
	if (sector != fs->winsect) {	/* Window offset changed? */
 8004d6c:	45c2      	cmp	sl, r8
			fs->wflag = 1;
 8004d6e:	f04f 0301 	mov.w	r3, #1
 8004d72:	70e3      	strb	r3, [r4, #3]
	if (sector != fs->winsect) {	/* Window offset changed? */
 8004d74:	f47f aef1 	bne.w	8004b5a <put_fat.part.7+0x72>
			p = fs->win + bc % SS(fs);
 8004d78:	f3c9 0908 	ubfx	r9, r9, #0, #9
 8004d7c:	444e      	add	r6, r9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8004d7e:	7833      	ldrb	r3, [r6, #0]
 8004d80:	f3c7 2203 	ubfx	r2, r7, #8, #4
 8004d84:	f023 070f 	bic.w	r7, r3, #15
 8004d88:	4317      	orrs	r7, r2
			fs->wflag = 1;
 8004d8a:	2301      	movs	r3, #1
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8004d8c:	7037      	strb	r7, [r6, #0]
			fs->wflag = 1;
 8004d8e:	70e3      	strb	r3, [r4, #3]
 8004d90:	2000      	movs	r0, #0
}
 8004d92:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			fs->winsect = sector;
 8004d96:	f8c4 8034 	str.w	r8, [r4, #52]	; 0x34
 8004d9a:	e71e      	b.n	8004bda <put_fat.part.7+0xf2>
			p = fs->win + bc % SS(fs);
 8004d9c:	f3c9 0908 	ubfx	r9, r9, #0, #9
 8004da0:	444e      	add	r6, r9
 8004da2:	e70e      	b.n	8004bc2 <put_fat.part.7+0xda>

08004da4 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8004da4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004da8:	b085      	sub	sp, #20
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8004daa:	2901      	cmp	r1, #1
{
 8004dac:	9000      	str	r0, [sp, #0]
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8004dae:	d914      	bls.n	8004dda <remove_chain+0x36>
	FATFS *fs = obj->fs;
 8004db0:	6804      	ldr	r4, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8004db2:	69e3      	ldr	r3, [r4, #28]
 8004db4:	428b      	cmp	r3, r1
 8004db6:	460d      	mov	r5, r1
 8004db8:	4606      	mov	r6, r0
 8004dba:	d90e      	bls.n	8004dda <remove_chain+0x36>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8004dbc:	b98a      	cbnz	r2, 8004de2 <remove_chain+0x3e>
 8004dbe:	46a3      	mov	fp, r4
 8004dc0:	f104 0a38 	add.w	sl, r4, #56	; 0x38
 8004dc4:	465e      	mov	r6, fp
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8004dc6:	429d      	cmp	r5, r3
 8004dc8:	d207      	bcs.n	8004dda <remove_chain+0x36>
		switch (fs->fs_type) {
 8004dca:	7833      	ldrb	r3, [r6, #0]
 8004dcc:	2b02      	cmp	r3, #2
 8004dce:	f000 8135 	beq.w	800503c <remove_chain+0x298>
 8004dd2:	2b03      	cmp	r3, #3
 8004dd4:	d068      	beq.n	8004ea8 <remove_chain+0x104>
 8004dd6:	2b01      	cmp	r3, #1
 8004dd8:	d014      	beq.n	8004e04 <remove_chain+0x60>

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
		if (nxt == 0) break;				/* Empty cluster? */
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8004dda:	2002      	movs	r0, #2
			}
		}
	}
#endif
	return FR_OK;
}
 8004ddc:	b005      	add	sp, #20
 8004dde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8004de2:	2a01      	cmp	r2, #1
 8004de4:	d9f9      	bls.n	8004dda <remove_chain+0x36>
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d9f7      	bls.n	8004dda <remove_chain+0x36>
 8004dea:	4611      	mov	r1, r2
 8004dec:	4620      	mov	r0, r4
 8004dee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004df2:	f7ff fe79 	bl	8004ae8 <put_fat.part.7>
		if (res != FR_OK) return res;
 8004df6:	2800      	cmp	r0, #0
 8004df8:	d1f0      	bne.n	8004ddc <remove_chain+0x38>
 8004dfa:	f8d6 b000 	ldr.w	fp, [r6]
 8004dfe:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004e02:	e7dd      	b.n	8004dc0 <remove_chain+0x1c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004e04:	6ab2      	ldr	r2, [r6, #40]	; 0x28
	if (sector != fs->winsect) {	/* Window offset changed? */
 8004e06:	f8d6 9034 	ldr.w	r9, [r6, #52]	; 0x34
			bc = (UINT)clst; bc += bc / 2;
 8004e0a:	eb05 0755 	add.w	r7, r5, r5, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004e0e:	eb02 2857 	add.w	r8, r2, r7, lsr #9
	if (sector != fs->winsect) {	/* Window offset changed? */
 8004e12:	45c8      	cmp	r8, r9
 8004e14:	f040 8156 	bne.w	80050c4 <remove_chain+0x320>
			wc = fs->win[bc++ % SS(fs)];
 8004e18:	f3c7 0308 	ubfx	r3, r7, #0, #9
 8004e1c:	3701      	adds	r7, #1
 8004e1e:	4433      	add	r3, r6
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004e20:	eb02 2857 	add.w	r8, r2, r7, lsr #9
	if (sector != fs->winsect) {	/* Window offset changed? */
 8004e24:	45c8      	cmp	r8, r9
			wc = fs->win[bc++ % SS(fs)];
 8004e26:	f893 b038 	ldrb.w	fp, [r3, #56]	; 0x38
	if (sector != fs->winsect) {	/* Window offset changed? */
 8004e2a:	f000 8260 	beq.w	80052ee <remove_chain+0x54a>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8004e2e:	78f3      	ldrb	r3, [r6, #3]
 8004e30:	7870      	ldrb	r0, [r6, #1]
 8004e32:	f106 0238 	add.w	r2, r6, #56	; 0x38
 8004e36:	4611      	mov	r1, r2
 8004e38:	9201      	str	r2, [sp, #4]
 8004e3a:	b333      	cbz	r3, 8004e8a <remove_chain+0xe6>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	464a      	mov	r2, r9
 8004e40:	f7ff fe0a 	bl	8004a58 <disk_write>
 8004e44:	2800      	cmp	r0, #0
 8004e46:	f040 81a1 	bne.w	800518c <remove_chain+0x3e8>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8004e4a:	6ab2      	ldr	r2, [r6, #40]	; 0x28
 8004e4c:	6a33      	ldr	r3, [r6, #32]
			fs->wflag = 0;
 8004e4e:	70f0      	strb	r0, [r6, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8004e50:	eba9 0202 	sub.w	r2, r9, r2
 8004e54:	429a      	cmp	r2, r3
 8004e56:	7870      	ldrb	r0, [r6, #1]
 8004e58:	d217      	bcs.n	8004e8a <remove_chain+0xe6>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004e5a:	f896 c002 	ldrb.w	ip, [r6, #2]
 8004e5e:	4662      	mov	r2, ip
 8004e60:	2a01      	cmp	r2, #1
 8004e62:	d912      	bls.n	8004e8a <remove_chain+0xe6>
 8004e64:	9402      	str	r4, [sp, #8]
 8004e66:	9503      	str	r5, [sp, #12]
 8004e68:	4664      	mov	r4, ip
 8004e6a:	9d01      	ldr	r5, [sp, #4]
 8004e6c:	e001      	b.n	8004e72 <remove_chain+0xce>
 8004e6e:	6a33      	ldr	r3, [r6, #32]
 8004e70:	7870      	ldrb	r0, [r6, #1]
					wsect += fs->fsize;
 8004e72:	4499      	add	r9, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004e74:	3c01      	subs	r4, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 8004e76:	464a      	mov	r2, r9
 8004e78:	2301      	movs	r3, #1
 8004e7a:	4629      	mov	r1, r5
 8004e7c:	f7ff fdec 	bl	8004a58 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004e80:	2c01      	cmp	r4, #1
 8004e82:	d1f4      	bne.n	8004e6e <remove_chain+0xca>
 8004e84:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8004e88:	7870      	ldrb	r0, [r6, #1]
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8004e8a:	9901      	ldr	r1, [sp, #4]
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	4642      	mov	r2, r8
 8004e90:	f7ff fdd4 	bl	8004a3c <disk_read>
 8004e94:	2800      	cmp	r0, #0
 8004e96:	f000 8228 	beq.w	80052ea <remove_chain+0x546>
			fs->winsect = sector;
 8004e9a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8004e9e:	2001      	movs	r0, #1
			fs->winsect = sector;
 8004ea0:	6373      	str	r3, [r6, #52]	; 0x34
}
 8004ea2:	b005      	add	sp, #20
 8004ea4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004ea8:	6ab7      	ldr	r7, [r6, #40]	; 0x28
	if (sector != fs->winsect) {	/* Window offset changed? */
 8004eaa:	f8d6 9034 	ldr.w	r9, [r6, #52]	; 0x34
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004eae:	eb07 17d5 	add.w	r7, r7, r5, lsr #7
	if (sector != fs->winsect) {	/* Window offset changed? */
 8004eb2:	454f      	cmp	r7, r9
 8004eb4:	f106 0838 	add.w	r8, r6, #56	; 0x38
 8004eb8:	f040 8136 	bne.w	8005128 <remove_chain+0x384>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8004ebc:	00ab      	lsls	r3, r5, #2
 8004ebe:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8004ec2:	eb08 0203 	add.w	r2, r8, r3
	rv = rv << 8 | ptr[0];
 8004ec6:	f818 7003 	ldrb.w	r7, [r8, r3]
	rv = rv << 8 | ptr[1];
 8004eca:	f892 b001 	ldrb.w	fp, [r2, #1]
	rv = rv << 8 | ptr[2];
 8004ece:	8853      	ldrh	r3, [r2, #2]
	rv = rv << 8 | ptr[1];
 8004ed0:	ea4b 2b03 	orr.w	fp, fp, r3, lsl #8
	rv = rv << 8 | ptr[0];
 8004ed4:	ea47 270b 	orr.w	r7, r7, fp, lsl #8
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8004ed8:	f027 4770 	bic.w	r7, r7, #4026531840	; 0xf0000000
		if (nxt == 0) break;				/* Empty cluster? */
 8004edc:	2f00      	cmp	r7, #0
 8004ede:	f000 8214 	beq.w	800530a <remove_chain+0x566>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8004ee2:	2f01      	cmp	r7, #1
 8004ee4:	f43f af79 	beq.w	8004dda <remove_chain+0x36>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8004ee8:	69e3      	ldr	r3, [r4, #28]
 8004eea:	429d      	cmp	r5, r3
 8004eec:	f4bf af75 	bcs.w	8004dda <remove_chain+0x36>
		switch (fs->fs_type) {
 8004ef0:	7823      	ldrb	r3, [r4, #0]
 8004ef2:	2b02      	cmp	r3, #2
 8004ef4:	f000 8197 	beq.w	8005226 <remove_chain+0x482>
 8004ef8:	2b03      	cmp	r3, #3
 8004efa:	f000 814b 	beq.w	8005194 <remove_chain+0x3f0>
 8004efe:	2b01      	cmp	r3, #1
 8004f00:	f47f af6b 	bne.w	8004dda <remove_chain+0x36>
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004f04:	6aa2      	ldr	r2, [r4, #40]	; 0x28
	if (sector != fs->winsect) {	/* Window offset changed? */
 8004f06:	f8d4 9034 	ldr.w	r9, [r4, #52]	; 0x34
			bc = (UINT)clst; bc += bc / 2;
 8004f0a:	eb05 0655 	add.w	r6, r5, r5, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004f0e:	eb02 2856 	add.w	r8, r2, r6, lsr #9
	if (sector != fs->winsect) {	/* Window offset changed? */
 8004f12:	45c8      	cmp	r8, r9
 8004f14:	d02e      	beq.n	8004f74 <remove_chain+0x1d0>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8004f16:	78e2      	ldrb	r2, [r4, #3]
 8004f18:	7860      	ldrb	r0, [r4, #1]
 8004f1a:	b30a      	cbz	r2, 8004f60 <remove_chain+0x1bc>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8004f1c:	464a      	mov	r2, r9
 8004f1e:	4651      	mov	r1, sl
 8004f20:	f7ff fd9a 	bl	8004a58 <disk_write>
 8004f24:	2800      	cmp	r0, #0
 8004f26:	f040 8131 	bne.w	800518c <remove_chain+0x3e8>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8004f2a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8004f2c:	6a23      	ldr	r3, [r4, #32]
			fs->wflag = 0;
 8004f2e:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8004f30:	eba9 0202 	sub.w	r2, r9, r2
 8004f34:	429a      	cmp	r2, r3
 8004f36:	d212      	bcs.n	8004f5e <remove_chain+0x1ba>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004f38:	f894 b002 	ldrb.w	fp, [r4, #2]
 8004f3c:	f1bb 0f01 	cmp.w	fp, #1
 8004f40:	d801      	bhi.n	8004f46 <remove_chain+0x1a2>
 8004f42:	e00c      	b.n	8004f5e <remove_chain+0x1ba>
 8004f44:	6a23      	ldr	r3, [r4, #32]
					disk_write(fs->drv, fs->win, wsect, 1);
 8004f46:	7860      	ldrb	r0, [r4, #1]
					wsect += fs->fsize;
 8004f48:	4499      	add	r9, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004f4a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
					disk_write(fs->drv, fs->win, wsect, 1);
 8004f4e:	464a      	mov	r2, r9
 8004f50:	2301      	movs	r3, #1
 8004f52:	4651      	mov	r1, sl
 8004f54:	f7ff fd80 	bl	8004a58 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004f58:	f1bb 0f01 	cmp.w	fp, #1
 8004f5c:	d1f2      	bne.n	8004f44 <remove_chain+0x1a0>
 8004f5e:	7860      	ldrb	r0, [r4, #1]
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8004f60:	2301      	movs	r3, #1
 8004f62:	4642      	mov	r2, r8
 8004f64:	4651      	mov	r1, sl
 8004f66:	f7ff fd69 	bl	8004a3c <disk_read>
 8004f6a:	2800      	cmp	r0, #0
 8004f6c:	f040 810b 	bne.w	8005186 <remove_chain+0x3e2>
			fs->winsect = sector;
 8004f70:	f8c4 8034 	str.w	r8, [r4, #52]	; 0x34
			p = fs->win + bc++ % SS(fs);
 8004f74:	f106 0801 	add.w	r8, r6, #1
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8004f78:	f015 0901 	ands.w	r9, r5, #1
			p = fs->win + bc++ % SS(fs);
 8004f7c:	f3c6 0608 	ubfx	r6, r6, #0, #9
 8004f80:	ea4f 2258 	mov.w	r2, r8, lsr #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8004f84:	f000 819e 	beq.w	80052c4 <remove_chain+0x520>
 8004f88:	f81a 3006 	ldrb.w	r3, [sl, r6]
 8004f8c:	f003 030f 	and.w	r3, r3, #15
 8004f90:	f80a 3006 	strb.w	r3, [sl, r6]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004f94:	6aa6      	ldr	r6, [r4, #40]	; 0x28
	if (sector != fs->winsect) {	/* Window offset changed? */
 8004f96:	6b65      	ldr	r5, [r4, #52]	; 0x34
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004f98:	4416      	add	r6, r2
			fs->wflag = 1;
 8004f9a:	f04f 0301 	mov.w	r3, #1
	if (sector != fs->winsect) {	/* Window offset changed? */
 8004f9e:	42b5      	cmp	r5, r6
			fs->wflag = 1;
 8004fa0:	70e3      	strb	r3, [r4, #3]
	if (sector != fs->winsect) {	/* Window offset changed? */
 8004fa2:	f000 81b4 	beq.w	800530e <remove_chain+0x56a>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	462a      	mov	r2, r5
 8004faa:	4651      	mov	r1, sl
 8004fac:	7860      	ldrb	r0, [r4, #1]
 8004fae:	f7ff fd53 	bl	8004a58 <disk_write>
 8004fb2:	2800      	cmp	r0, #0
 8004fb4:	f040 80ea 	bne.w	800518c <remove_chain+0x3e8>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8004fb8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8004fba:	6a23      	ldr	r3, [r4, #32]
			fs->wflag = 0;
 8004fbc:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8004fbe:	1aaa      	subs	r2, r5, r2
 8004fc0:	429a      	cmp	r2, r3
 8004fc2:	d212      	bcs.n	8004fea <remove_chain+0x246>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004fc4:	f894 b002 	ldrb.w	fp, [r4, #2]
 8004fc8:	f1bb 0f01 	cmp.w	fp, #1
 8004fcc:	d801      	bhi.n	8004fd2 <remove_chain+0x22e>
 8004fce:	e00c      	b.n	8004fea <remove_chain+0x246>
 8004fd0:	6a23      	ldr	r3, [r4, #32]
					disk_write(fs->drv, fs->win, wsect, 1);
 8004fd2:	7860      	ldrb	r0, [r4, #1]
					wsect += fs->fsize;
 8004fd4:	441d      	add	r5, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004fd6:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
					disk_write(fs->drv, fs->win, wsect, 1);
 8004fda:	462a      	mov	r2, r5
 8004fdc:	2301      	movs	r3, #1
 8004fde:	4651      	mov	r1, sl
 8004fe0:	f7ff fd3a 	bl	8004a58 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004fe4:	f1bb 0f01 	cmp.w	fp, #1
 8004fe8:	d1f2      	bne.n	8004fd0 <remove_chain+0x22c>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8004fea:	2301      	movs	r3, #1
 8004fec:	4632      	mov	r2, r6
 8004fee:	4651      	mov	r1, sl
 8004ff0:	7860      	ldrb	r0, [r4, #1]
 8004ff2:	f7ff fd23 	bl	8004a3c <disk_read>
 8004ff6:	2800      	cmp	r0, #0
 8004ff8:	f040 80c5 	bne.w	8005186 <remove_chain+0x3e2>
			p = fs->win + bc % SS(fs);
 8004ffc:	f3c8 0808 	ubfx	r8, r8, #0, #9
 8005000:	44d0      	add	r8, sl
			fs->winsect = sector;
 8005002:	6366      	str	r6, [r4, #52]	; 0x34
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8005004:	f1b9 0f00 	cmp.w	r9, #0
 8005008:	f000 816a 	beq.w	80052e0 <remove_chain+0x53c>
			fs->wflag = 1;
 800500c:	f04f 0301 	mov.w	r3, #1
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8005010:	f888 0000 	strb.w	r0, [r8]
			fs->wflag = 1;
 8005014:	70e3      	strb	r3, [r4, #3]
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8005016:	69e2      	ldr	r2, [r4, #28]
 8005018:	6963      	ldr	r3, [r4, #20]
 800501a:	1e91      	subs	r1, r2, #2
 800501c:	428b      	cmp	r3, r1
 800501e:	d205      	bcs.n	800502c <remove_chain+0x288>
			fs->fsi_flag |= 1;
 8005020:	7921      	ldrb	r1, [r4, #4]
			fs->free_clst++;
 8005022:	3301      	adds	r3, #1
			fs->fsi_flag |= 1;
 8005024:	f041 0101 	orr.w	r1, r1, #1
			fs->free_clst++;
 8005028:	6163      	str	r3, [r4, #20]
			fs->fsi_flag |= 1;
 800502a:	7121      	strb	r1, [r4, #4]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800502c:	42ba      	cmp	r2, r7
 800502e:	f240 816c 	bls.w	800530a <remove_chain+0x566>
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8005032:	9b00      	ldr	r3, [sp, #0]
 8005034:	681e      	ldr	r6, [r3, #0]
 8005036:	463d      	mov	r5, r7
 8005038:	69f3      	ldr	r3, [r6, #28]
 800503a:	e6c4      	b.n	8004dc6 <remove_chain+0x22>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800503c:	6ab7      	ldr	r7, [r6, #40]	; 0x28
	if (sector != fs->winsect) {	/* Window offset changed? */
 800503e:	f8d6 9034 	ldr.w	r9, [r6, #52]	; 0x34
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005042:	eb07 2715 	add.w	r7, r7, r5, lsr #8
	if (sector != fs->winsect) {	/* Window offset changed? */
 8005046:	454f      	cmp	r7, r9
 8005048:	f106 0838 	add.w	r8, r6, #56	; 0x38
 800504c:	d02e      	beq.n	80050ac <remove_chain+0x308>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800504e:	78f3      	ldrb	r3, [r6, #3]
 8005050:	7870      	ldrb	r0, [r6, #1]
 8005052:	b313      	cbz	r3, 800509a <remove_chain+0x2f6>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8005054:	2301      	movs	r3, #1
 8005056:	464a      	mov	r2, r9
 8005058:	4641      	mov	r1, r8
 800505a:	f7ff fcfd 	bl	8004a58 <disk_write>
 800505e:	2800      	cmp	r0, #0
 8005060:	f040 8094 	bne.w	800518c <remove_chain+0x3e8>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005064:	6ab2      	ldr	r2, [r6, #40]	; 0x28
 8005066:	6a33      	ldr	r3, [r6, #32]
			fs->wflag = 0;
 8005068:	70f0      	strb	r0, [r6, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800506a:	eba9 0202 	sub.w	r2, r9, r2
 800506e:	429a      	cmp	r2, r3
 8005070:	d212      	bcs.n	8005098 <remove_chain+0x2f4>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005072:	f896 b002 	ldrb.w	fp, [r6, #2]
 8005076:	f1bb 0f01 	cmp.w	fp, #1
 800507a:	d801      	bhi.n	8005080 <remove_chain+0x2dc>
 800507c:	e00c      	b.n	8005098 <remove_chain+0x2f4>
 800507e:	6a33      	ldr	r3, [r6, #32]
					disk_write(fs->drv, fs->win, wsect, 1);
 8005080:	7870      	ldrb	r0, [r6, #1]
					wsect += fs->fsize;
 8005082:	4499      	add	r9, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005084:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
					disk_write(fs->drv, fs->win, wsect, 1);
 8005088:	464a      	mov	r2, r9
 800508a:	2301      	movs	r3, #1
 800508c:	4641      	mov	r1, r8
 800508e:	f7ff fce3 	bl	8004a58 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005092:	f1bb 0f01 	cmp.w	fp, #1
 8005096:	d1f2      	bne.n	800507e <remove_chain+0x2da>
 8005098:	7870      	ldrb	r0, [r6, #1]
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800509a:	2301      	movs	r3, #1
 800509c:	463a      	mov	r2, r7
 800509e:	4641      	mov	r1, r8
 80050a0:	f7ff fccc 	bl	8004a3c <disk_read>
 80050a4:	2800      	cmp	r0, #0
 80050a6:	f47f aef8 	bne.w	8004e9a <remove_chain+0xf6>
			fs->winsect = sector;
 80050aa:	6377      	str	r7, [r6, #52]	; 0x34
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80050ac:	006b      	lsls	r3, r5, #1
 80050ae:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80050b2:	eb08 0203 	add.w	r2, r8, r3
	rv = rv << 8 | ptr[0];
 80050b6:	f818 7003 	ldrb.w	r7, [r8, r3]
 80050ba:	f892 b001 	ldrb.w	fp, [r2, #1]
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80050be:	ea47 270b 	orr.w	r7, r7, fp, lsl #8
 80050c2:	e70b      	b.n	8004edc <remove_chain+0x138>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80050c4:	78f2      	ldrb	r2, [r6, #3]
 80050c6:	7870      	ldrb	r0, [r6, #1]
 80050c8:	f106 0b38 	add.w	fp, r6, #56	; 0x38
 80050cc:	b1fa      	cbz	r2, 800510e <remove_chain+0x36a>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80050ce:	464a      	mov	r2, r9
 80050d0:	4659      	mov	r1, fp
 80050d2:	f7ff fcc1 	bl	8004a58 <disk_write>
 80050d6:	2800      	cmp	r0, #0
 80050d8:	d158      	bne.n	800518c <remove_chain+0x3e8>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80050da:	6ab2      	ldr	r2, [r6, #40]	; 0x28
 80050dc:	6a33      	ldr	r3, [r6, #32]
			fs->wflag = 0;
 80050de:	70f0      	strb	r0, [r6, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80050e0:	eba9 0202 	sub.w	r2, r9, r2
 80050e4:	429a      	cmp	r2, r3
 80050e6:	d211      	bcs.n	800510c <remove_chain+0x368>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80050e8:	78b2      	ldrb	r2, [r6, #2]
 80050ea:	2a01      	cmp	r2, #1
 80050ec:	d90e      	bls.n	800510c <remove_chain+0x368>
 80050ee:	9401      	str	r4, [sp, #4]
 80050f0:	4614      	mov	r4, r2
 80050f2:	e000      	b.n	80050f6 <remove_chain+0x352>
 80050f4:	6a33      	ldr	r3, [r6, #32]
					disk_write(fs->drv, fs->win, wsect, 1);
 80050f6:	7870      	ldrb	r0, [r6, #1]
					wsect += fs->fsize;
 80050f8:	4499      	add	r9, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80050fa:	3c01      	subs	r4, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 80050fc:	464a      	mov	r2, r9
 80050fe:	2301      	movs	r3, #1
 8005100:	4659      	mov	r1, fp
 8005102:	f7ff fca9 	bl	8004a58 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005106:	2c01      	cmp	r4, #1
 8005108:	d1f4      	bne.n	80050f4 <remove_chain+0x350>
 800510a:	9c01      	ldr	r4, [sp, #4]
 800510c:	7870      	ldrb	r0, [r6, #1]
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800510e:	4659      	mov	r1, fp
 8005110:	2301      	movs	r3, #1
 8005112:	4642      	mov	r2, r8
 8005114:	f7ff fc92 	bl	8004a3c <disk_read>
 8005118:	2800      	cmp	r0, #0
 800511a:	f47f aebe 	bne.w	8004e9a <remove_chain+0xf6>
 800511e:	6ab2      	ldr	r2, [r6, #40]	; 0x28
			fs->winsect = sector;
 8005120:	f8c6 8034 	str.w	r8, [r6, #52]	; 0x34
 8005124:	46c1      	mov	r9, r8
 8005126:	e677      	b.n	8004e18 <remove_chain+0x74>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8005128:	78f3      	ldrb	r3, [r6, #3]
 800512a:	7870      	ldrb	r0, [r6, #1]
 800512c:	b30b      	cbz	r3, 8005172 <remove_chain+0x3ce>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800512e:	2301      	movs	r3, #1
 8005130:	464a      	mov	r2, r9
 8005132:	4641      	mov	r1, r8
 8005134:	f7ff fc90 	bl	8004a58 <disk_write>
 8005138:	bb40      	cbnz	r0, 800518c <remove_chain+0x3e8>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800513a:	6ab2      	ldr	r2, [r6, #40]	; 0x28
 800513c:	6a33      	ldr	r3, [r6, #32]
			fs->wflag = 0;
 800513e:	70f0      	strb	r0, [r6, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005140:	eba9 0202 	sub.w	r2, r9, r2
 8005144:	429a      	cmp	r2, r3
 8005146:	7870      	ldrb	r0, [r6, #1]
 8005148:	d213      	bcs.n	8005172 <remove_chain+0x3ce>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800514a:	f896 b002 	ldrb.w	fp, [r6, #2]
 800514e:	f1bb 0f01 	cmp.w	fp, #1
 8005152:	d802      	bhi.n	800515a <remove_chain+0x3b6>
 8005154:	e00d      	b.n	8005172 <remove_chain+0x3ce>
 8005156:	6a33      	ldr	r3, [r6, #32]
 8005158:	7870      	ldrb	r0, [r6, #1]
					wsect += fs->fsize;
 800515a:	4499      	add	r9, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800515c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
					disk_write(fs->drv, fs->win, wsect, 1);
 8005160:	464a      	mov	r2, r9
 8005162:	2301      	movs	r3, #1
 8005164:	4641      	mov	r1, r8
 8005166:	f7ff fc77 	bl	8004a58 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800516a:	f1bb 0f01 	cmp.w	fp, #1
 800516e:	d1f2      	bne.n	8005156 <remove_chain+0x3b2>
 8005170:	7870      	ldrb	r0, [r6, #1]
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8005172:	2301      	movs	r3, #1
 8005174:	463a      	mov	r2, r7
 8005176:	4641      	mov	r1, r8
 8005178:	f7ff fc60 	bl	8004a3c <disk_read>
 800517c:	2800      	cmp	r0, #0
 800517e:	f47f ae8c 	bne.w	8004e9a <remove_chain+0xf6>
			fs->winsect = sector;
 8005182:	6377      	str	r7, [r6, #52]	; 0x34
 8005184:	e69a      	b.n	8004ebc <remove_chain+0x118>
 8005186:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800518a:	6363      	str	r3, [r4, #52]	; 0x34
				res = FR_DISK_ERR;
 800518c:	2001      	movs	r0, #1
}
 800518e:	b005      	add	sp, #20
 8005190:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8005194:	6aa6      	ldr	r6, [r4, #40]	; 0x28
	if (sector != fs->winsect) {	/* Window offset changed? */
 8005196:	f8d4 8034 	ldr.w	r8, [r4, #52]	; 0x34
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800519a:	eb06 16d5 	add.w	r6, r6, r5, lsr #7
	if (sector != fs->winsect) {	/* Window offset changed? */
 800519e:	4546      	cmp	r6, r8
 80051a0:	d02d      	beq.n	80051fe <remove_chain+0x45a>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80051a2:	78e3      	ldrb	r3, [r4, #3]
 80051a4:	7860      	ldrb	r0, [r4, #1]
 80051a6:	b313      	cbz	r3, 80051ee <remove_chain+0x44a>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80051a8:	2301      	movs	r3, #1
 80051aa:	4642      	mov	r2, r8
 80051ac:	4651      	mov	r1, sl
 80051ae:	f7ff fc53 	bl	8004a58 <disk_write>
 80051b2:	2800      	cmp	r0, #0
 80051b4:	d1ea      	bne.n	800518c <remove_chain+0x3e8>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80051b6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80051b8:	6a23      	ldr	r3, [r4, #32]
			fs->wflag = 0;
 80051ba:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80051bc:	eba8 0202 	sub.w	r2, r8, r2
 80051c0:	429a      	cmp	r2, r3
 80051c2:	7860      	ldrb	r0, [r4, #1]
 80051c4:	d213      	bcs.n	80051ee <remove_chain+0x44a>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80051c6:	f894 9002 	ldrb.w	r9, [r4, #2]
 80051ca:	f1b9 0f01 	cmp.w	r9, #1
 80051ce:	d802      	bhi.n	80051d6 <remove_chain+0x432>
 80051d0:	e00d      	b.n	80051ee <remove_chain+0x44a>
 80051d2:	6a23      	ldr	r3, [r4, #32]
 80051d4:	7860      	ldrb	r0, [r4, #1]
					wsect += fs->fsize;
 80051d6:	4498      	add	r8, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80051d8:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
					disk_write(fs->drv, fs->win, wsect, 1);
 80051dc:	4642      	mov	r2, r8
 80051de:	2301      	movs	r3, #1
 80051e0:	4651      	mov	r1, sl
 80051e2:	f7ff fc39 	bl	8004a58 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80051e6:	f1b9 0f01 	cmp.w	r9, #1
 80051ea:	d1f2      	bne.n	80051d2 <remove_chain+0x42e>
 80051ec:	7860      	ldrb	r0, [r4, #1]
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80051ee:	2301      	movs	r3, #1
 80051f0:	4632      	mov	r2, r6
 80051f2:	4651      	mov	r1, sl
 80051f4:	f7ff fc22 	bl	8004a3c <disk_read>
 80051f8:	2800      	cmp	r0, #0
 80051fa:	d1c4      	bne.n	8005186 <remove_chain+0x3e2>
			fs->winsect = sector;
 80051fc:	6366      	str	r6, [r4, #52]	; 0x34
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80051fe:	00ad      	lsls	r5, r5, #2
 8005200:	f405 75fe 	and.w	r5, r5, #508	; 0x1fc
 8005204:	eb0a 0205 	add.w	r2, sl, r5
	*ptr++ = (BYTE)val; val >>= 8;
 8005208:	f04f 0100 	mov.w	r1, #0
	rv = rv << 8 | ptr[2];
 800520c:	8853      	ldrh	r3, [r2, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800520e:	f80a 1005 	strb.w	r1, [sl, r5]
	*ptr++ = (BYTE)val; val >>= 8;
 8005212:	0a1b      	lsrs	r3, r3, #8
 8005214:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	*ptr++ = (BYTE)val;
 8005218:	70d3      	strb	r3, [r2, #3]
			fs->wflag = 1;
 800521a:	f04f 0301 	mov.w	r3, #1
	*ptr++ = (BYTE)val; val >>= 8;
 800521e:	7051      	strb	r1, [r2, #1]
	*ptr++ = (BYTE)val; val >>= 8;
 8005220:	7091      	strb	r1, [r2, #2]
			fs->wflag = 1;
 8005222:	70e3      	strb	r3, [r4, #3]
 8005224:	e6f7      	b.n	8005016 <remove_chain+0x272>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8005226:	6aa6      	ldr	r6, [r4, #40]	; 0x28
	if (sector != fs->winsect) {	/* Window offset changed? */
 8005228:	f8d4 8034 	ldr.w	r8, [r4, #52]	; 0x34
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800522c:	eb06 2615 	add.w	r6, r6, r5, lsr #8
	if (sector != fs->winsect) {	/* Window offset changed? */
 8005230:	4546      	cmp	r6, r8
 8005232:	d039      	beq.n	80052a8 <remove_chain+0x504>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8005234:	78e3      	ldrb	r3, [r4, #3]
 8005236:	7860      	ldrb	r0, [r4, #1]
 8005238:	b30b      	cbz	r3, 800527e <remove_chain+0x4da>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800523a:	2301      	movs	r3, #1
 800523c:	4642      	mov	r2, r8
 800523e:	4651      	mov	r1, sl
 8005240:	f7ff fc0a 	bl	8004a58 <disk_write>
 8005244:	2800      	cmp	r0, #0
 8005246:	d1a1      	bne.n	800518c <remove_chain+0x3e8>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005248:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800524a:	6a23      	ldr	r3, [r4, #32]
			fs->wflag = 0;
 800524c:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800524e:	eba8 0202 	sub.w	r2, r8, r2
 8005252:	429a      	cmp	r2, r3
 8005254:	d212      	bcs.n	800527c <remove_chain+0x4d8>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005256:	f894 9002 	ldrb.w	r9, [r4, #2]
 800525a:	f1b9 0f01 	cmp.w	r9, #1
 800525e:	d801      	bhi.n	8005264 <remove_chain+0x4c0>
 8005260:	e00c      	b.n	800527c <remove_chain+0x4d8>
 8005262:	6a23      	ldr	r3, [r4, #32]
					disk_write(fs->drv, fs->win, wsect, 1);
 8005264:	7860      	ldrb	r0, [r4, #1]
					wsect += fs->fsize;
 8005266:	4498      	add	r8, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005268:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
					disk_write(fs->drv, fs->win, wsect, 1);
 800526c:	4642      	mov	r2, r8
 800526e:	2301      	movs	r3, #1
 8005270:	4651      	mov	r1, sl
 8005272:	f7ff fbf1 	bl	8004a58 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005276:	f1b9 0f01 	cmp.w	r9, #1
 800527a:	d1f2      	bne.n	8005262 <remove_chain+0x4be>
 800527c:	7860      	ldrb	r0, [r4, #1]
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800527e:	2301      	movs	r3, #1
 8005280:	4632      	mov	r2, r6
 8005282:	4651      	mov	r1, sl
 8005284:	f7ff fbda 	bl	8004a3c <disk_read>
 8005288:	2800      	cmp	r0, #0
 800528a:	f47f af7c 	bne.w	8005186 <remove_chain+0x3e2>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800528e:	006d      	lsls	r5, r5, #1
 8005290:	f405 75ff 	and.w	r5, r5, #510	; 0x1fe
 8005294:	eb0a 0305 	add.w	r3, sl, r5
			fs->winsect = sector;
 8005298:	6366      	str	r6, [r4, #52]	; 0x34
	*ptr++ = (BYTE)val; val >>= 8;
 800529a:	f80a 0005 	strb.w	r0, [sl, r5]
	*ptr++ = (BYTE)val;
 800529e:	7058      	strb	r0, [r3, #1]
			fs->wflag = 1;
 80052a0:	f04f 0301 	mov.w	r3, #1
 80052a4:	70e3      	strb	r3, [r4, #3]
 80052a6:	e6b6      	b.n	8005016 <remove_chain+0x272>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80052a8:	006d      	lsls	r5, r5, #1
 80052aa:	f405 75ff 	and.w	r5, r5, #510	; 0x1fe
 80052ae:	eb0a 0305 	add.w	r3, sl, r5
	*ptr++ = (BYTE)val; val >>= 8;
 80052b2:	f04f 0200 	mov.w	r2, #0
 80052b6:	f80a 2005 	strb.w	r2, [sl, r5]
	*ptr++ = (BYTE)val;
 80052ba:	705a      	strb	r2, [r3, #1]
			fs->wflag = 1;
 80052bc:	f04f 0301 	mov.w	r3, #1
 80052c0:	70e3      	strb	r3, [r4, #3]
 80052c2:	e6a8      	b.n	8005016 <remove_chain+0x272>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80052c4:	f80a 9006 	strb.w	r9, [sl, r6]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80052c8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
	if (sector != fs->winsect) {	/* Window offset changed? */
 80052ca:	6b65      	ldr	r5, [r4, #52]	; 0x34
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80052cc:	4416      	add	r6, r2
			fs->wflag = 1;
 80052ce:	f04f 0301 	mov.w	r3, #1
	if (sector != fs->winsect) {	/* Window offset changed? */
 80052d2:	42b5      	cmp	r5, r6
			fs->wflag = 1;
 80052d4:	70e3      	strb	r3, [r4, #3]
	if (sector != fs->winsect) {	/* Window offset changed? */
 80052d6:	f47f ae66 	bne.w	8004fa6 <remove_chain+0x202>
			p = fs->win + bc % SS(fs);
 80052da:	f3c8 0808 	ubfx	r8, r8, #0, #9
 80052de:	44d0      	add	r8, sl
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80052e0:	f898 0000 	ldrb.w	r0, [r8]
 80052e4:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
 80052e8:	e690      	b.n	800500c <remove_chain+0x268>
			fs->winsect = sector;
 80052ea:	f8c6 8034 	str.w	r8, [r6, #52]	; 0x34
			wc |= fs->win[bc % SS(fs)] << 8;
 80052ee:	f3c7 0708 	ubfx	r7, r7, #0, #9
 80052f2:	443e      	add	r6, r7
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80052f4:	07eb      	lsls	r3, r5, #31
			wc |= fs->win[bc % SS(fs)] << 8;
 80052f6:	f896 7038 	ldrb.w	r7, [r6, #56]	; 0x38
 80052fa:	ea4b 2b07 	orr.w	fp, fp, r7, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80052fe:	bf4c      	ite	mi
 8005300:	ea4f 171b 	movmi.w	r7, fp, lsr #4
 8005304:	f3cb 070b 	ubfxpl	r7, fp, #0, #12
 8005308:	e5e8      	b.n	8004edc <remove_chain+0x138>
	return FR_OK;
 800530a:	2000      	movs	r0, #0
 800530c:	e566      	b.n	8004ddc <remove_chain+0x38>
			p = fs->win + bc % SS(fs);
 800530e:	f3c8 0808 	ubfx	r8, r8, #0, #9
 8005312:	44d0      	add	r8, sl
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8005314:	2000      	movs	r0, #0
 8005316:	e679      	b.n	800500c <remove_chain+0x268>

08005318 <dir_sdi.constprop.12>:
/*-----------------------------------------------------------------------*/
/* Directory handling - Set directory index                              */
/*-----------------------------------------------------------------------*/

static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
 8005318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
		return FR_INT_ERR;
	}
	dp->dptr = ofs;				/* Set current offset */
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800531c:	6884      	ldr	r4, [r0, #8]
	FATFS *fs = dp->obj.fs;
 800531e:	f8d0 8000 	ldr.w	r8, [r0]
	dp->dptr = ofs;				/* Set current offset */
 8005322:	2300      	movs	r3, #0
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
 8005324:	b085      	sub	sp, #20
	dp->dptr = ofs;				/* Set current offset */
 8005326:	6143      	str	r3, [r0, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8005328:	bb2c      	cbnz	r4, 8005376 <dir_sdi.constprop.12+0x5e>
 800532a:	f898 3000 	ldrb.w	r3, [r8]
 800532e:	2b02      	cmp	r3, #2
 8005330:	d81c      	bhi.n	800536c <dir_sdi.constprop.12+0x54>
		clst = fs->dirbase;
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8005332:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 8005336:	b1ab      	cbz	r3, 8005364 <dir_sdi.constprop.12+0x4c>
		dp->sect = fs->dirbase;
 8005338:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
 800533c:	61c3      	str	r3, [r0, #28]
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
			ofs -= csz;
		}
		dp->sect = clust2sect(fs, clst);
	}
	dp->clust = clst;					/* Current cluster# */
 800533e:	6184      	str	r4, [r0, #24]
	if (!dp->sect) return FR_INT_ERR;
 8005340:	b183      	cbz	r3, 8005364 <dir_sdi.constprop.12+0x4c>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8005342:	f108 0338 	add.w	r3, r8, #56	; 0x38
 8005346:	6203      	str	r3, [r0, #32]

	return FR_OK;
 8005348:	2000      	movs	r0, #0
}
 800534a:	b005      	add	sp, #20
 800534c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8005350:	f8d8 201c 	ldr.w	r2, [r8, #28]
	clst -= 2;
 8005354:	1ea1      	subs	r1, r4, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8005356:	3a02      	subs	r2, #2
 8005358:	4291      	cmp	r1, r2
 800535a:	f0c0 814d 	bcc.w	80055f8 <dir_sdi.constprop.12+0x2e0>
		dp->sect = clust2sect(fs, clst);
 800535e:	2300      	movs	r3, #0
 8005360:	e9c0 4306 	strd	r4, r3, [r0, #24]
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8005364:	2002      	movs	r0, #2
}
 8005366:	b005      	add	sp, #20
 8005368:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		clst = fs->dirbase;
 800536c:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8005370:	2b00      	cmp	r3, #0
 8005372:	d0de      	beq.n	8005332 <dir_sdi.constprop.12+0x1a>
 8005374:	461c      	mov	r4, r3
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8005376:	f8b8 300a 	ldrh.w	r3, [r8, #10]
		while (ofs >= csz) {				/* Follow cluster chain */
 800537a:	2b00      	cmp	r3, #0
 800537c:	d1e8      	bne.n	8005350 <dir_sdi.constprop.12+0x38>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800537e:	2c01      	cmp	r4, #1
 8005380:	d9f0      	bls.n	8005364 <dir_sdi.constprop.12+0x4c>
 8005382:	f8d8 301c 	ldr.w	r3, [r8, #28]
 8005386:	42a3      	cmp	r3, r4
 8005388:	d9ec      	bls.n	8005364 <dir_sdi.constprop.12+0x4c>
 800538a:	4645      	mov	r5, r8
 800538c:	4607      	mov	r7, r0
		switch (fs->fs_type) {
 800538e:	782b      	ldrb	r3, [r5, #0]
 8005390:	2b02      	cmp	r3, #2
 8005392:	f000 809a 	beq.w	80054ca <dir_sdi.constprop.12+0x1b2>
 8005396:	2b03      	cmp	r3, #3
 8005398:	d040      	beq.n	800541c <dir_sdi.constprop.12+0x104>
 800539a:	2b01      	cmp	r3, #1
 800539c:	d1e2      	bne.n	8005364 <dir_sdi.constprop.12+0x4c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800539e:	6aaa      	ldr	r2, [r5, #40]	; 0x28
	if (sector != fs->winsect) {	/* Window offset changed? */
 80053a0:	f8d5 9034 	ldr.w	r9, [r5, #52]	; 0x34
			bc = (UINT)clst; bc += bc / 2;
 80053a4:	eb04 0654 	add.w	r6, r4, r4, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80053a8:	eb02 2a56 	add.w	sl, r2, r6, lsr #9
	if (sector != fs->winsect) {	/* Window offset changed? */
 80053ac:	45ca      	cmp	sl, r9
 80053ae:	f000 80d2 	beq.w	8005556 <dir_sdi.constprop.12+0x23e>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80053b2:	78ea      	ldrb	r2, [r5, #3]
 80053b4:	7868      	ldrb	r0, [r5, #1]
 80053b6:	f105 0b38 	add.w	fp, r5, #56	; 0x38
 80053ba:	b312      	cbz	r2, 8005402 <dir_sdi.constprop.12+0xea>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80053bc:	464a      	mov	r2, r9
 80053be:	4659      	mov	r1, fp
 80053c0:	f7ff fb4a 	bl	8004a58 <disk_write>
 80053c4:	bb40      	cbnz	r0, 8005418 <dir_sdi.constprop.12+0x100>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80053c6:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 80053c8:	6a2b      	ldr	r3, [r5, #32]
			fs->wflag = 0;
 80053ca:	70e8      	strb	r0, [r5, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80053cc:	eba9 0202 	sub.w	r2, r9, r2
 80053d0:	429a      	cmp	r2, r3
 80053d2:	d215      	bcs.n	8005400 <dir_sdi.constprop.12+0xe8>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80053d4:	78aa      	ldrb	r2, [r5, #2]
 80053d6:	2a01      	cmp	r2, #1
 80053d8:	d912      	bls.n	8005400 <dir_sdi.constprop.12+0xe8>
 80053da:	f8cd 8004 	str.w	r8, [sp, #4]
 80053de:	4690      	mov	r8, r2
 80053e0:	e000      	b.n	80053e4 <dir_sdi.constprop.12+0xcc>
 80053e2:	6a2b      	ldr	r3, [r5, #32]
					disk_write(fs->drv, fs->win, wsect, 1);
 80053e4:	7868      	ldrb	r0, [r5, #1]
					wsect += fs->fsize;
 80053e6:	4499      	add	r9, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80053e8:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
					disk_write(fs->drv, fs->win, wsect, 1);
 80053ec:	464a      	mov	r2, r9
 80053ee:	2301      	movs	r3, #1
 80053f0:	4659      	mov	r1, fp
 80053f2:	f7ff fb31 	bl	8004a58 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80053f6:	f1b8 0f01 	cmp.w	r8, #1
 80053fa:	d1f2      	bne.n	80053e2 <dir_sdi.constprop.12+0xca>
 80053fc:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8005400:	7868      	ldrb	r0, [r5, #1]
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8005402:	4659      	mov	r1, fp
 8005404:	2301      	movs	r3, #1
 8005406:	4652      	mov	r2, sl
 8005408:	f7ff fb18 	bl	8004a3c <disk_read>
 800540c:	2800      	cmp	r0, #0
 800540e:	f000 809e 	beq.w	800554e <dir_sdi.constprop.12+0x236>
			fs->winsect = sector;
 8005412:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005416:	636b      	str	r3, [r5, #52]	; 0x34
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005418:	2001      	movs	r0, #1
 800541a:	e796      	b.n	800534a <dir_sdi.constprop.12+0x32>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800541c:	6aae      	ldr	r6, [r5, #40]	; 0x28
	if (sector != fs->winsect) {	/* Window offset changed? */
 800541e:	f8d5 a034 	ldr.w	sl, [r5, #52]	; 0x34
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005422:	eb06 16d4 	add.w	r6, r6, r4, lsr #7
	if (sector != fs->winsect) {	/* Window offset changed? */
 8005426:	4556      	cmp	r6, sl
 8005428:	f105 0938 	add.w	r9, r5, #56	; 0x38
 800542c:	d02d      	beq.n	800548a <dir_sdi.constprop.12+0x172>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800542e:	78eb      	ldrb	r3, [r5, #3]
 8005430:	7868      	ldrb	r0, [r5, #1]
 8005432:	b313      	cbz	r3, 800547a <dir_sdi.constprop.12+0x162>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8005434:	2301      	movs	r3, #1
 8005436:	4652      	mov	r2, sl
 8005438:	4649      	mov	r1, r9
 800543a:	f7ff fb0d 	bl	8004a58 <disk_write>
 800543e:	2800      	cmp	r0, #0
 8005440:	d1ea      	bne.n	8005418 <dir_sdi.constprop.12+0x100>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005442:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8005444:	6a2b      	ldr	r3, [r5, #32]
			fs->wflag = 0;
 8005446:	70e8      	strb	r0, [r5, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005448:	ebaa 0202 	sub.w	r2, sl, r2
 800544c:	429a      	cmp	r2, r3
 800544e:	7868      	ldrb	r0, [r5, #1]
 8005450:	d213      	bcs.n	800547a <dir_sdi.constprop.12+0x162>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005452:	f895 b002 	ldrb.w	fp, [r5, #2]
 8005456:	f1bb 0f01 	cmp.w	fp, #1
 800545a:	d802      	bhi.n	8005462 <dir_sdi.constprop.12+0x14a>
 800545c:	e00d      	b.n	800547a <dir_sdi.constprop.12+0x162>
 800545e:	6a2b      	ldr	r3, [r5, #32]
 8005460:	7868      	ldrb	r0, [r5, #1]
					wsect += fs->fsize;
 8005462:	449a      	add	sl, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005464:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
					disk_write(fs->drv, fs->win, wsect, 1);
 8005468:	4652      	mov	r2, sl
 800546a:	2301      	movs	r3, #1
 800546c:	4649      	mov	r1, r9
 800546e:	f7ff faf3 	bl	8004a58 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005472:	f1bb 0f01 	cmp.w	fp, #1
 8005476:	d1f2      	bne.n	800545e <dir_sdi.constprop.12+0x146>
 8005478:	7868      	ldrb	r0, [r5, #1]
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800547a:	2301      	movs	r3, #1
 800547c:	4632      	mov	r2, r6
 800547e:	4649      	mov	r1, r9
 8005480:	f7ff fadc 	bl	8004a3c <disk_read>
 8005484:	2800      	cmp	r0, #0
 8005486:	d1c4      	bne.n	8005412 <dir_sdi.constprop.12+0xfa>
			fs->winsect = sector;
 8005488:	636e      	str	r6, [r5, #52]	; 0x34
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800548a:	00a4      	lsls	r4, r4, #2
 800548c:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
 8005490:	eb09 0204 	add.w	r2, r9, r4
	rv = rv << 8 | ptr[0];
 8005494:	f819 4004 	ldrb.w	r4, [r9, r4]
	rv = rv << 8 | ptr[2];
 8005498:	8851      	ldrh	r1, [r2, #2]
	rv = rv << 8 | ptr[1];
 800549a:	7853      	ldrb	r3, [r2, #1]
 800549c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	rv = rv << 8 | ptr[0];
 80054a0:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80054a4:	f024 4470 	bic.w	r4, r4, #4026531840	; 0xf0000000
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80054a8:	2c01      	cmp	r4, #1
 80054aa:	f67f af5b 	bls.w	8005364 <dir_sdi.constprop.12+0x4c>
 80054ae:	f8d8 301c 	ldr.w	r3, [r8, #28]
 80054b2:	42a3      	cmp	r3, r4
 80054b4:	f67f af56 	bls.w	8005364 <dir_sdi.constprop.12+0x4c>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80054b8:	683d      	ldr	r5, [r7, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80054ba:	69eb      	ldr	r3, [r5, #28]
 80054bc:	42a3      	cmp	r3, r4
 80054be:	f67f af51 	bls.w	8005364 <dir_sdi.constprop.12+0x4c>
		switch (fs->fs_type) {
 80054c2:	782b      	ldrb	r3, [r5, #0]
 80054c4:	2b02      	cmp	r3, #2
 80054c6:	f47f af66 	bne.w	8005396 <dir_sdi.constprop.12+0x7e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80054ca:	6aae      	ldr	r6, [r5, #40]	; 0x28
	if (sector != fs->winsect) {	/* Window offset changed? */
 80054cc:	f8d5 a034 	ldr.w	sl, [r5, #52]	; 0x34
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80054d0:	eb06 2614 	add.w	r6, r6, r4, lsr #8
	if (sector != fs->winsect) {	/* Window offset changed? */
 80054d4:	4556      	cmp	r6, sl
 80054d6:	f105 0938 	add.w	r9, r5, #56	; 0x38
 80054da:	d02d      	beq.n	8005538 <dir_sdi.constprop.12+0x220>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80054dc:	78eb      	ldrb	r3, [r5, #3]
 80054de:	7868      	ldrb	r0, [r5, #1]
 80054e0:	b30b      	cbz	r3, 8005526 <dir_sdi.constprop.12+0x20e>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80054e2:	2301      	movs	r3, #1
 80054e4:	4652      	mov	r2, sl
 80054e6:	4649      	mov	r1, r9
 80054e8:	f7ff fab6 	bl	8004a58 <disk_write>
 80054ec:	2800      	cmp	r0, #0
 80054ee:	d193      	bne.n	8005418 <dir_sdi.constprop.12+0x100>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80054f0:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 80054f2:	6a2b      	ldr	r3, [r5, #32]
			fs->wflag = 0;
 80054f4:	70e8      	strb	r0, [r5, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80054f6:	ebaa 0202 	sub.w	r2, sl, r2
 80054fa:	429a      	cmp	r2, r3
 80054fc:	d212      	bcs.n	8005524 <dir_sdi.constprop.12+0x20c>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80054fe:	f895 b002 	ldrb.w	fp, [r5, #2]
 8005502:	f1bb 0f01 	cmp.w	fp, #1
 8005506:	d801      	bhi.n	800550c <dir_sdi.constprop.12+0x1f4>
 8005508:	e00c      	b.n	8005524 <dir_sdi.constprop.12+0x20c>
 800550a:	6a2b      	ldr	r3, [r5, #32]
					disk_write(fs->drv, fs->win, wsect, 1);
 800550c:	7868      	ldrb	r0, [r5, #1]
					wsect += fs->fsize;
 800550e:	449a      	add	sl, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005510:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
					disk_write(fs->drv, fs->win, wsect, 1);
 8005514:	4652      	mov	r2, sl
 8005516:	2301      	movs	r3, #1
 8005518:	4649      	mov	r1, r9
 800551a:	f7ff fa9d 	bl	8004a58 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800551e:	f1bb 0f01 	cmp.w	fp, #1
 8005522:	d1f2      	bne.n	800550a <dir_sdi.constprop.12+0x1f2>
 8005524:	7868      	ldrb	r0, [r5, #1]
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8005526:	2301      	movs	r3, #1
 8005528:	4632      	mov	r2, r6
 800552a:	4649      	mov	r1, r9
 800552c:	f7ff fa86 	bl	8004a3c <disk_read>
 8005530:	2800      	cmp	r0, #0
 8005532:	f47f af6e 	bne.w	8005412 <dir_sdi.constprop.12+0xfa>
			fs->winsect = sector;
 8005536:	636e      	str	r6, [r5, #52]	; 0x34
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8005538:	0064      	lsls	r4, r4, #1
 800553a:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
 800553e:	eb09 0304 	add.w	r3, r9, r4
	rv = rv << 8 | ptr[0];
 8005542:	f819 4004 	ldrb.w	r4, [r9, r4]
 8005546:	785b      	ldrb	r3, [r3, #1]
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8005548:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 800554c:	e7ac      	b.n	80054a8 <dir_sdi.constprop.12+0x190>
 800554e:	6aaa      	ldr	r2, [r5, #40]	; 0x28
			fs->winsect = sector;
 8005550:	f8c5 a034 	str.w	sl, [r5, #52]	; 0x34
 8005554:	46d1      	mov	r9, sl
			wc = fs->win[bc++ % SS(fs)];
 8005556:	f3c6 0308 	ubfx	r3, r6, #0, #9
 800555a:	3601      	adds	r6, #1
 800555c:	442b      	add	r3, r5
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800555e:	eb02 2a56 	add.w	sl, r2, r6, lsr #9
	if (sector != fs->winsect) {	/* Window offset changed? */
 8005562:	45ca      	cmp	sl, r9
			wc = fs->win[bc++ % SS(fs)];
 8005564:	f893 b038 	ldrb.w	fp, [r3, #56]	; 0x38
	if (sector != fs->winsect) {	/* Window offset changed? */
 8005568:	d039      	beq.n	80055de <dir_sdi.constprop.12+0x2c6>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800556a:	78eb      	ldrb	r3, [r5, #3]
 800556c:	7868      	ldrb	r0, [r5, #1]
 800556e:	f105 0238 	add.w	r2, r5, #56	; 0x38
 8005572:	4611      	mov	r1, r2
 8005574:	9201      	str	r2, [sp, #4]
 8005576:	b343      	cbz	r3, 80055ca <dir_sdi.constprop.12+0x2b2>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8005578:	2301      	movs	r3, #1
 800557a:	464a      	mov	r2, r9
 800557c:	f7ff fa6c 	bl	8004a58 <disk_write>
 8005580:	2800      	cmp	r0, #0
 8005582:	f47f af49 	bne.w	8005418 <dir_sdi.constprop.12+0x100>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005586:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8005588:	6a2b      	ldr	r3, [r5, #32]
			fs->wflag = 0;
 800558a:	70e8      	strb	r0, [r5, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800558c:	eba9 0202 	sub.w	r2, r9, r2
 8005590:	429a      	cmp	r2, r3
 8005592:	7868      	ldrb	r0, [r5, #1]
 8005594:	d219      	bcs.n	80055ca <dir_sdi.constprop.12+0x2b2>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005596:	f895 c002 	ldrb.w	ip, [r5, #2]
 800559a:	4662      	mov	r2, ip
 800559c:	2a01      	cmp	r2, #1
 800559e:	d914      	bls.n	80055ca <dir_sdi.constprop.12+0x2b2>
 80055a0:	e9cd 8402 	strd	r8, r4, [sp, #8]
 80055a4:	46e0      	mov	r8, ip
 80055a6:	9c01      	ldr	r4, [sp, #4]
 80055a8:	e001      	b.n	80055ae <dir_sdi.constprop.12+0x296>
 80055aa:	6a2b      	ldr	r3, [r5, #32]
 80055ac:	7868      	ldrb	r0, [r5, #1]
					wsect += fs->fsize;
 80055ae:	4499      	add	r9, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80055b0:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
					disk_write(fs->drv, fs->win, wsect, 1);
 80055b4:	464a      	mov	r2, r9
 80055b6:	2301      	movs	r3, #1
 80055b8:	4621      	mov	r1, r4
 80055ba:	f7ff fa4d 	bl	8004a58 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80055be:	f1b8 0f01 	cmp.w	r8, #1
 80055c2:	d1f2      	bne.n	80055aa <dir_sdi.constprop.12+0x292>
 80055c4:	e9dd 8402 	ldrd	r8, r4, [sp, #8]
 80055c8:	7868      	ldrb	r0, [r5, #1]
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80055ca:	9901      	ldr	r1, [sp, #4]
 80055cc:	2301      	movs	r3, #1
 80055ce:	4652      	mov	r2, sl
 80055d0:	f7ff fa34 	bl	8004a3c <disk_read>
 80055d4:	2800      	cmp	r0, #0
 80055d6:	f47f af1c 	bne.w	8005412 <dir_sdi.constprop.12+0xfa>
			fs->winsect = sector;
 80055da:	f8c5 a034 	str.w	sl, [r5, #52]	; 0x34
			wc |= fs->win[bc % SS(fs)] << 8;
 80055de:	f3c6 0608 	ubfx	r6, r6, #0, #9
 80055e2:	4435      	add	r5, r6
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80055e4:	07e2      	lsls	r2, r4, #31
			wc |= fs->win[bc % SS(fs)] << 8;
 80055e6:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
 80055ea:	ea4b 2303 	orr.w	r3, fp, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80055ee:	bf4c      	ite	mi
 80055f0:	091c      	lsrmi	r4, r3, #4
 80055f2:	f3c3 040b 	ubfxpl	r4, r3, #0, #12
 80055f6:	e757      	b.n	80054a8 <dir_sdi.constprop.12+0x190>
	return clst * fs->csize + fs->database;
 80055f8:	f8d8 2030 	ldr.w	r2, [r8, #48]	; 0x30
 80055fc:	fb01 2303 	mla	r3, r1, r3, r2
		dp->sect = clust2sect(fs, clst);
 8005600:	61c3      	str	r3, [r0, #28]
 8005602:	e69c      	b.n	800533e <dir_sdi.constprop.12+0x26>

08005604 <dir_sdi>:
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8005604:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8005608:	d239      	bcs.n	800567e <dir_sdi+0x7a>
{
 800560a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800560e:	460d      	mov	r5, r1
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8005610:	06e9      	lsls	r1, r5, #27
{
 8005612:	b085      	sub	sp, #20
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8005614:	d12f      	bne.n	8005676 <dir_sdi+0x72>
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8005616:	6884      	ldr	r4, [r0, #8]
	dp->dptr = ofs;				/* Set current offset */
 8005618:	6145      	str	r5, [r0, #20]
 800561a:	4680      	mov	r8, r0
	FATFS *fs = dp->obj.fs;
 800561c:	f8d0 b000 	ldr.w	fp, [r0]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8005620:	bb84      	cbnz	r4, 8005684 <dir_sdi+0x80>
 8005622:	f89b 3000 	ldrb.w	r3, [fp]
 8005626:	2b02      	cmp	r3, #2
 8005628:	d902      	bls.n	8005630 <dir_sdi+0x2c>
		clst = fs->dirbase;
 800562a:	f8db 302c 	ldr.w	r3, [fp, #44]	; 0x2c
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800562e:	bb43      	cbnz	r3, 8005682 <dir_sdi+0x7e>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8005630:	f8bb 3008 	ldrh.w	r3, [fp, #8]
 8005634:	ebb3 1f55 	cmp.w	r3, r5, lsr #5
 8005638:	d91d      	bls.n	8005676 <dir_sdi+0x72>
		dp->sect = fs->dirbase;
 800563a:	f8db 202c 	ldr.w	r2, [fp, #44]	; 0x2c
 800563e:	f8c8 201c 	str.w	r2, [r8, #28]
	dp->clust = clst;					/* Current cluster# */
 8005642:	f8c8 4018 	str.w	r4, [r8, #24]
	if (!dp->sect) return FR_INT_ERR;
 8005646:	b1b2      	cbz	r2, 8005676 <dir_sdi+0x72>
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8005648:	f3c5 0108 	ubfx	r1, r5, #0, #9
 800564c:	f10b 0338 	add.w	r3, fp, #56	; 0x38
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8005650:	eb02 2555 	add.w	r5, r2, r5, lsr #9
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8005654:	440b      	add	r3, r1
	return FR_OK;
 8005656:	2000      	movs	r0, #0
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8005658:	e9c8 5307 	strd	r5, r3, [r8, #28]
}
 800565c:	b005      	add	sp, #20
 800565e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005662:	f8dd 8000 	ldr.w	r8, [sp]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8005666:	3b02      	subs	r3, #2
	clst -= 2;
 8005668:	1ea1      	subs	r1, r4, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800566a:	4299      	cmp	r1, r3
 800566c:	f0c0 8150 	bcc.w	8005910 <dir_sdi+0x30c>
		dp->sect = clust2sect(fs, clst);
 8005670:	2300      	movs	r3, #0
 8005672:	e9c8 4306 	strd	r4, r3, [r8, #24]
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8005676:	2002      	movs	r0, #2
}
 8005678:	b005      	add	sp, #20
 800567a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return FR_INT_ERR;
 800567e:	2002      	movs	r0, #2
}
 8005680:	4770      	bx	lr
 8005682:	461c      	mov	r4, r3
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8005684:	f8bb 300a 	ldrh.w	r3, [fp, #10]
 8005688:	ea4f 2a43 	mov.w	sl, r3, lsl #9
		while (ofs >= csz) {				/* Follow cluster chain */
 800568c:	4555      	cmp	r5, sl
 800568e:	f0c0 8148 	bcc.w	8005922 <dir_sdi+0x31e>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8005692:	2c01      	cmp	r4, #1
 8005694:	d9ef      	bls.n	8005676 <dir_sdi+0x72>
 8005696:	f8db 301c 	ldr.w	r3, [fp, #28]
 800569a:	42a3      	cmp	r3, r4
 800569c:	d9eb      	bls.n	8005676 <dir_sdi+0x72>
 800569e:	465e      	mov	r6, fp
 80056a0:	f8cd 8000 	str.w	r8, [sp]
		switch (fs->fs_type) {
 80056a4:	7833      	ldrb	r3, [r6, #0]
 80056a6:	2b02      	cmp	r3, #2
 80056a8:	f000 80a0 	beq.w	80057ec <dir_sdi+0x1e8>
 80056ac:	2b03      	cmp	r3, #3
 80056ae:	d041      	beq.n	8005734 <dir_sdi+0x130>
 80056b0:	2b01      	cmp	r3, #1
 80056b2:	d1e0      	bne.n	8005676 <dir_sdi+0x72>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80056b4:	6ab2      	ldr	r2, [r6, #40]	; 0x28
	if (sector != fs->winsect) {	/* Window offset changed? */
 80056b6:	f8d6 8034 	ldr.w	r8, [r6, #52]	; 0x34
			bc = (UINT)clst; bc += bc / 2;
 80056ba:	eb04 0754 	add.w	r7, r4, r4, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80056be:	eb02 2957 	add.w	r9, r2, r7, lsr #9
	if (sector != fs->winsect) {	/* Window offset changed? */
 80056c2:	45c1      	cmp	r9, r8
 80056c4:	f000 80d7 	beq.w	8005876 <dir_sdi+0x272>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80056c8:	78f2      	ldrb	r2, [r6, #3]
 80056ca:	7870      	ldrb	r0, [r6, #1]
 80056cc:	f106 0138 	add.w	r1, r6, #56	; 0x38
 80056d0:	9101      	str	r1, [sp, #4]
 80056d2:	b30a      	cbz	r2, 8005718 <dir_sdi+0x114>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80056d4:	4642      	mov	r2, r8
 80056d6:	f7ff f9bf 	bl	8004a58 <disk_write>
 80056da:	bb38      	cbnz	r0, 800572c <dir_sdi+0x128>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80056dc:	6ab2      	ldr	r2, [r6, #40]	; 0x28
 80056de:	6a33      	ldr	r3, [r6, #32]
			fs->wflag = 0;
 80056e0:	70f0      	strb	r0, [r6, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80056e2:	eba8 0202 	sub.w	r2, r8, r2
 80056e6:	429a      	cmp	r2, r3
 80056e8:	d214      	bcs.n	8005714 <dir_sdi+0x110>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80056ea:	78b2      	ldrb	r2, [r6, #2]
 80056ec:	2a01      	cmp	r2, #1
 80056ee:	d911      	bls.n	8005714 <dir_sdi+0x110>
 80056f0:	9402      	str	r4, [sp, #8]
 80056f2:	9503      	str	r5, [sp, #12]
 80056f4:	4614      	mov	r4, r2
 80056f6:	9d01      	ldr	r5, [sp, #4]
 80056f8:	e000      	b.n	80056fc <dir_sdi+0xf8>
 80056fa:	6a33      	ldr	r3, [r6, #32]
					disk_write(fs->drv, fs->win, wsect, 1);
 80056fc:	7870      	ldrb	r0, [r6, #1]
					wsect += fs->fsize;
 80056fe:	4498      	add	r8, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005700:	3c01      	subs	r4, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 8005702:	4642      	mov	r2, r8
 8005704:	2301      	movs	r3, #1
 8005706:	4629      	mov	r1, r5
 8005708:	f7ff f9a6 	bl	8004a58 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800570c:	2c01      	cmp	r4, #1
 800570e:	d1f4      	bne.n	80056fa <dir_sdi+0xf6>
 8005710:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005714:	7870      	ldrb	r0, [r6, #1]
 8005716:	9901      	ldr	r1, [sp, #4]
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8005718:	2301      	movs	r3, #1
 800571a:	464a      	mov	r2, r9
 800571c:	f7ff f98e 	bl	8004a3c <disk_read>
 8005720:	2800      	cmp	r0, #0
 8005722:	f000 80a4 	beq.w	800586e <dir_sdi+0x26a>
			fs->winsect = sector;
 8005726:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800572a:	6373      	str	r3, [r6, #52]	; 0x34
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800572c:	2001      	movs	r0, #1
}
 800572e:	b005      	add	sp, #20
 8005730:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005734:	6ab7      	ldr	r7, [r6, #40]	; 0x28
	if (sector != fs->winsect) {	/* Window offset changed? */
 8005736:	f8d6 9034 	ldr.w	r9, [r6, #52]	; 0x34
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800573a:	eb07 17d4 	add.w	r7, r7, r4, lsr #7
	if (sector != fs->winsect) {	/* Window offset changed? */
 800573e:	454f      	cmp	r7, r9
 8005740:	f106 0838 	add.w	r8, r6, #56	; 0x38
 8005744:	d02c      	beq.n	80057a0 <dir_sdi+0x19c>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8005746:	78f3      	ldrb	r3, [r6, #3]
 8005748:	7870      	ldrb	r0, [r6, #1]
 800574a:	b30b      	cbz	r3, 8005790 <dir_sdi+0x18c>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800574c:	2301      	movs	r3, #1
 800574e:	464a      	mov	r2, r9
 8005750:	4641      	mov	r1, r8
 8005752:	f7ff f981 	bl	8004a58 <disk_write>
 8005756:	2800      	cmp	r0, #0
 8005758:	d1e8      	bne.n	800572c <dir_sdi+0x128>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800575a:	6ab2      	ldr	r2, [r6, #40]	; 0x28
 800575c:	6a33      	ldr	r3, [r6, #32]
			fs->wflag = 0;
 800575e:	70f0      	strb	r0, [r6, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005760:	eba9 0202 	sub.w	r2, r9, r2
 8005764:	429a      	cmp	r2, r3
 8005766:	7870      	ldrb	r0, [r6, #1]
 8005768:	d212      	bcs.n	8005790 <dir_sdi+0x18c>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800576a:	78b2      	ldrb	r2, [r6, #2]
 800576c:	2a01      	cmp	r2, #1
 800576e:	d90f      	bls.n	8005790 <dir_sdi+0x18c>
 8005770:	9401      	str	r4, [sp, #4]
 8005772:	4614      	mov	r4, r2
 8005774:	e001      	b.n	800577a <dir_sdi+0x176>
 8005776:	6a33      	ldr	r3, [r6, #32]
 8005778:	7870      	ldrb	r0, [r6, #1]
					wsect += fs->fsize;
 800577a:	4499      	add	r9, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800577c:	3c01      	subs	r4, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 800577e:	464a      	mov	r2, r9
 8005780:	2301      	movs	r3, #1
 8005782:	4641      	mov	r1, r8
 8005784:	f7ff f968 	bl	8004a58 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005788:	2c01      	cmp	r4, #1
 800578a:	d1f4      	bne.n	8005776 <dir_sdi+0x172>
 800578c:	9c01      	ldr	r4, [sp, #4]
 800578e:	7870      	ldrb	r0, [r6, #1]
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8005790:	2301      	movs	r3, #1
 8005792:	463a      	mov	r2, r7
 8005794:	4641      	mov	r1, r8
 8005796:	f7ff f951 	bl	8004a3c <disk_read>
 800579a:	2800      	cmp	r0, #0
 800579c:	d1c3      	bne.n	8005726 <dir_sdi+0x122>
			fs->winsect = sector;
 800579e:	6377      	str	r7, [r6, #52]	; 0x34
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80057a0:	00a4      	lsls	r4, r4, #2
 80057a2:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
 80057a6:	eb08 0204 	add.w	r2, r8, r4
	rv = rv << 8 | ptr[0];
 80057aa:	f818 4004 	ldrb.w	r4, [r8, r4]
	rv = rv << 8 | ptr[2];
 80057ae:	8851      	ldrh	r1, [r2, #2]
	rv = rv << 8 | ptr[1];
 80057b0:	7853      	ldrb	r3, [r2, #1]
 80057b2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	rv = rv << 8 | ptr[0];
 80057b6:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80057ba:	f024 4470 	bic.w	r4, r4, #4026531840	; 0xf0000000
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80057be:	2c01      	cmp	r4, #1
 80057c0:	f67f af59 	bls.w	8005676 <dir_sdi+0x72>
 80057c4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80057c8:	42a3      	cmp	r3, r4
 80057ca:	f67f af54 	bls.w	8005676 <dir_sdi+0x72>
			ofs -= csz;
 80057ce:	eba5 050a 	sub.w	r5, r5, sl
		while (ofs >= csz) {				/* Follow cluster chain */
 80057d2:	45aa      	cmp	sl, r5
 80057d4:	f63f af45 	bhi.w	8005662 <dir_sdi+0x5e>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80057d8:	9b00      	ldr	r3, [sp, #0]
 80057da:	681e      	ldr	r6, [r3, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80057dc:	69f3      	ldr	r3, [r6, #28]
 80057de:	42a3      	cmp	r3, r4
 80057e0:	f67f af49 	bls.w	8005676 <dir_sdi+0x72>
		switch (fs->fs_type) {
 80057e4:	7833      	ldrb	r3, [r6, #0]
 80057e6:	2b02      	cmp	r3, #2
 80057e8:	f47f af60 	bne.w	80056ac <dir_sdi+0xa8>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80057ec:	6ab7      	ldr	r7, [r6, #40]	; 0x28
	if (sector != fs->winsect) {	/* Window offset changed? */
 80057ee:	f8d6 9034 	ldr.w	r9, [r6, #52]	; 0x34
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80057f2:	eb07 2714 	add.w	r7, r7, r4, lsr #8
	if (sector != fs->winsect) {	/* Window offset changed? */
 80057f6:	454f      	cmp	r7, r9
 80057f8:	f106 0838 	add.w	r8, r6, #56	; 0x38
 80057fc:	d02c      	beq.n	8005858 <dir_sdi+0x254>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80057fe:	78f3      	ldrb	r3, [r6, #3]
 8005800:	7870      	ldrb	r0, [r6, #1]
 8005802:	b303      	cbz	r3, 8005846 <dir_sdi+0x242>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8005804:	2301      	movs	r3, #1
 8005806:	464a      	mov	r2, r9
 8005808:	4641      	mov	r1, r8
 800580a:	f7ff f925 	bl	8004a58 <disk_write>
 800580e:	2800      	cmp	r0, #0
 8005810:	d18c      	bne.n	800572c <dir_sdi+0x128>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005812:	6ab2      	ldr	r2, [r6, #40]	; 0x28
 8005814:	6a33      	ldr	r3, [r6, #32]
			fs->wflag = 0;
 8005816:	70f0      	strb	r0, [r6, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005818:	eba9 0202 	sub.w	r2, r9, r2
 800581c:	429a      	cmp	r2, r3
 800581e:	d211      	bcs.n	8005844 <dir_sdi+0x240>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005820:	78b2      	ldrb	r2, [r6, #2]
 8005822:	2a01      	cmp	r2, #1
 8005824:	d90e      	bls.n	8005844 <dir_sdi+0x240>
 8005826:	9401      	str	r4, [sp, #4]
 8005828:	4614      	mov	r4, r2
 800582a:	e000      	b.n	800582e <dir_sdi+0x22a>
 800582c:	6a33      	ldr	r3, [r6, #32]
					disk_write(fs->drv, fs->win, wsect, 1);
 800582e:	7870      	ldrb	r0, [r6, #1]
					wsect += fs->fsize;
 8005830:	4499      	add	r9, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005832:	3c01      	subs	r4, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 8005834:	464a      	mov	r2, r9
 8005836:	2301      	movs	r3, #1
 8005838:	4641      	mov	r1, r8
 800583a:	f7ff f90d 	bl	8004a58 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800583e:	2c01      	cmp	r4, #1
 8005840:	d1f4      	bne.n	800582c <dir_sdi+0x228>
 8005842:	9c01      	ldr	r4, [sp, #4]
 8005844:	7870      	ldrb	r0, [r6, #1]
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8005846:	2301      	movs	r3, #1
 8005848:	463a      	mov	r2, r7
 800584a:	4641      	mov	r1, r8
 800584c:	f7ff f8f6 	bl	8004a3c <disk_read>
 8005850:	2800      	cmp	r0, #0
 8005852:	f47f af68 	bne.w	8005726 <dir_sdi+0x122>
			fs->winsect = sector;
 8005856:	6377      	str	r7, [r6, #52]	; 0x34
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8005858:	0064      	lsls	r4, r4, #1
 800585a:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
 800585e:	eb08 0304 	add.w	r3, r8, r4
	rv = rv << 8 | ptr[0];
 8005862:	f818 4004 	ldrb.w	r4, [r8, r4]
 8005866:	785b      	ldrb	r3, [r3, #1]
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8005868:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 800586c:	e7a7      	b.n	80057be <dir_sdi+0x1ba>
 800586e:	6ab2      	ldr	r2, [r6, #40]	; 0x28
			fs->winsect = sector;
 8005870:	f8c6 9034 	str.w	r9, [r6, #52]	; 0x34
 8005874:	46c8      	mov	r8, r9
			wc = fs->win[bc++ % SS(fs)];
 8005876:	f3c7 0308 	ubfx	r3, r7, #0, #9
 800587a:	1c79      	adds	r1, r7, #1
 800587c:	4433      	add	r3, r6
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800587e:	eb02 2951 	add.w	r9, r2, r1, lsr #9
			wc = fs->win[bc++ % SS(fs)];
 8005882:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005886:	9101      	str	r1, [sp, #4]
	if (sector != fs->winsect) {	/* Window offset changed? */
 8005888:	45c1      	cmp	r9, r8
			wc = fs->win[bc++ % SS(fs)];
 800588a:	9302      	str	r3, [sp, #8]
	if (sector != fs->winsect) {	/* Window offset changed? */
 800588c:	d031      	beq.n	80058f2 <dir_sdi+0x2ee>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800588e:	78f3      	ldrb	r3, [r6, #3]
 8005890:	7870      	ldrb	r0, [r6, #1]
 8005892:	f106 0738 	add.w	r7, r6, #56	; 0x38
 8005896:	b313      	cbz	r3, 80058de <dir_sdi+0x2da>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8005898:	2301      	movs	r3, #1
 800589a:	4642      	mov	r2, r8
 800589c:	4639      	mov	r1, r7
 800589e:	f7ff f8db 	bl	8004a58 <disk_write>
 80058a2:	2800      	cmp	r0, #0
 80058a4:	f47f af42 	bne.w	800572c <dir_sdi+0x128>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80058a8:	6ab2      	ldr	r2, [r6, #40]	; 0x28
 80058aa:	6a33      	ldr	r3, [r6, #32]
			fs->wflag = 0;
 80058ac:	70f0      	strb	r0, [r6, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80058ae:	eba8 0202 	sub.w	r2, r8, r2
 80058b2:	429a      	cmp	r2, r3
 80058b4:	7870      	ldrb	r0, [r6, #1]
 80058b6:	d212      	bcs.n	80058de <dir_sdi+0x2da>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80058b8:	78b2      	ldrb	r2, [r6, #2]
 80058ba:	2a01      	cmp	r2, #1
 80058bc:	d90f      	bls.n	80058de <dir_sdi+0x2da>
 80058be:	9403      	str	r4, [sp, #12]
 80058c0:	4614      	mov	r4, r2
 80058c2:	e001      	b.n	80058c8 <dir_sdi+0x2c4>
 80058c4:	6a33      	ldr	r3, [r6, #32]
 80058c6:	7870      	ldrb	r0, [r6, #1]
					wsect += fs->fsize;
 80058c8:	4498      	add	r8, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80058ca:	3c01      	subs	r4, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 80058cc:	4642      	mov	r2, r8
 80058ce:	2301      	movs	r3, #1
 80058d0:	4639      	mov	r1, r7
 80058d2:	f7ff f8c1 	bl	8004a58 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80058d6:	2c01      	cmp	r4, #1
 80058d8:	d1f4      	bne.n	80058c4 <dir_sdi+0x2c0>
 80058da:	9c03      	ldr	r4, [sp, #12]
 80058dc:	7870      	ldrb	r0, [r6, #1]
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80058de:	4639      	mov	r1, r7
 80058e0:	2301      	movs	r3, #1
 80058e2:	464a      	mov	r2, r9
 80058e4:	f7ff f8aa 	bl	8004a3c <disk_read>
 80058e8:	2800      	cmp	r0, #0
 80058ea:	f47f af1c 	bne.w	8005726 <dir_sdi+0x122>
			fs->winsect = sector;
 80058ee:	f8c6 9034 	str.w	r9, [r6, #52]	; 0x34
			wc |= fs->win[bc % SS(fs)] << 8;
 80058f2:	9b01      	ldr	r3, [sp, #4]
 80058f4:	9a02      	ldr	r2, [sp, #8]
 80058f6:	f3c3 0708 	ubfx	r7, r3, #0, #9
 80058fa:	443e      	add	r6, r7
 80058fc:	f896 3038 	ldrb.w	r3, [r6, #56]	; 0x38
 8005900:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8005904:	07e2      	lsls	r2, r4, #31
 8005906:	bf4c      	ite	mi
 8005908:	091c      	lsrmi	r4, r3, #4
 800590a:	f3c3 040b 	ubfxpl	r4, r3, #0, #12
 800590e:	e756      	b.n	80057be <dir_sdi+0x1ba>
	return clst * fs->csize + fs->database;
 8005910:	f8bb 200a 	ldrh.w	r2, [fp, #10]
 8005914:	f8db 3030 	ldr.w	r3, [fp, #48]	; 0x30
 8005918:	fb01 3202 	mla	r2, r1, r2, r3
		dp->sect = clust2sect(fs, clst);
 800591c:	f8c8 201c 	str.w	r2, [r8, #28]
 8005920:	e68f      	b.n	8005642 <dir_sdi+0x3e>
 8005922:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005926:	e69e      	b.n	8005666 <dir_sdi+0x62>

08005928 <get_fat.isra.8>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8005928:	2901      	cmp	r1, #1
 800592a:	d932      	bls.n	8005992 <get_fat.isra.8+0x6a>
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
 800592c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8005930:	69c3      	ldr	r3, [r0, #28]
 8005932:	4299      	cmp	r1, r3
 8005934:	d22a      	bcs.n	800598c <get_fat.isra.8+0x64>
		switch (fs->fs_type) {
 8005936:	7803      	ldrb	r3, [r0, #0]
 8005938:	2b02      	cmp	r3, #2
 800593a:	4606      	mov	r6, r0
 800593c:	460c      	mov	r4, r1
 800593e:	d041      	beq.n	80059c4 <get_fat.isra.8+0x9c>
 8005940:	2b03      	cmp	r3, #3
 8005942:	d028      	beq.n	8005996 <get_fat.isra.8+0x6e>
 8005944:	2b01      	cmp	r3, #1
 8005946:	d121      	bne.n	800598c <get_fat.isra.8+0x64>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005948:	6a82      	ldr	r2, [r0, #40]	; 0x28
	if (sector != fs->winsect) {	/* Window offset changed? */
 800594a:	f8d0 8034 	ldr.w	r8, [r0, #52]	; 0x34
			bc = (UINT)clst; bc += bc / 2;
 800594e:	eb01 0551 	add.w	r5, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005952:	eb02 2755 	add.w	r7, r2, r5, lsr #9
	if (sector != fs->winsect) {	/* Window offset changed? */
 8005956:	4547      	cmp	r7, r8
 8005958:	f040 80a5 	bne.w	8005aa6 <get_fat.isra.8+0x17e>
			wc = fs->win[bc++ % SS(fs)];
 800595c:	f3c5 0308 	ubfx	r3, r5, #0, #9
 8005960:	1c6f      	adds	r7, r5, #1
 8005962:	4433      	add	r3, r6
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005964:	eb02 2957 	add.w	r9, r2, r7, lsr #9
	if (sector != fs->winsect) {	/* Window offset changed? */
 8005968:	45c1      	cmp	r9, r8
			wc = fs->win[bc++ % SS(fs)];
 800596a:	f893 5038 	ldrb.w	r5, [r3, #56]	; 0x38
	if (sector != fs->winsect) {	/* Window offset changed? */
 800596e:	f040 80ca 	bne.w	8005b06 <get_fat.isra.8+0x1de>
			wc |= fs->win[bc % SS(fs)] << 8;
 8005972:	f3c7 0008 	ubfx	r0, r7, #0, #9
 8005976:	4430      	add	r0, r6
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8005978:	07e3      	lsls	r3, r4, #31
			wc |= fs->win[bc % SS(fs)] << 8;
 800597a:	f890 0038 	ldrb.w	r0, [r0, #56]	; 0x38
 800597e:	ea45 2000 	orr.w	r0, r5, r0, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8005982:	bf4c      	ite	mi
 8005984:	0900      	lsrmi	r0, r0, #4
 8005986:	f3c0 000b 	ubfxpl	r0, r0, #0, #12
 800598a:	e000      	b.n	800598e <get_fat.isra.8+0x66>
			val = 1;	/* Internal error */
 800598c:	2001      	movs	r0, #1
}
 800598e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		val = 1;	/* Internal error */
 8005992:	2001      	movs	r0, #1
}
 8005994:	4770      	bx	lr
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005996:	6a85      	ldr	r5, [r0, #40]	; 0x28
	if (sector != fs->winsect) {	/* Window offset changed? */
 8005998:	f8d0 8034 	ldr.w	r8, [r0, #52]	; 0x34
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800599c:	eb05 15d1 	add.w	r5, r5, r1, lsr #7
	if (sector != fs->winsect) {	/* Window offset changed? */
 80059a0:	4545      	cmp	r5, r8
 80059a2:	f100 0738 	add.w	r7, r0, #56	; 0x38
 80059a6:	d14e      	bne.n	8005a46 <get_fat.isra.8+0x11e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80059a8:	00a1      	lsls	r1, r4, #2
 80059aa:	f401 71fe 	and.w	r1, r1, #508	; 0x1fc
 80059ae:	187a      	adds	r2, r7, r1
	rv = rv << 8 | ptr[0];
 80059b0:	5c78      	ldrb	r0, [r7, r1]
	rv = rv << 8 | ptr[1];
 80059b2:	7853      	ldrb	r3, [r2, #1]
	rv = rv << 8 | ptr[2];
 80059b4:	8851      	ldrh	r1, [r2, #2]
	rv = rv << 8 | ptr[1];
 80059b6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	rv = rv << 8 | ptr[0];
 80059ba:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80059be:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
 80059c2:	e7e4      	b.n	800598e <get_fat.isra.8+0x66>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80059c4:	6a85      	ldr	r5, [r0, #40]	; 0x28
	if (sector != fs->winsect) {	/* Window offset changed? */
 80059c6:	f8d0 8034 	ldr.w	r8, [r0, #52]	; 0x34
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80059ca:	eb05 2511 	add.w	r5, r5, r1, lsr #8
	if (sector != fs->winsect) {	/* Window offset changed? */
 80059ce:	4545      	cmp	r5, r8
 80059d0:	f100 0738 	add.w	r7, r0, #56	; 0x38
 80059d4:	d02e      	beq.n	8005a34 <get_fat.isra.8+0x10c>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80059d6:	78c3      	ldrb	r3, [r0, #3]
 80059d8:	7840      	ldrb	r0, [r0, #1]
 80059da:	b313      	cbz	r3, 8005a22 <get_fat.isra.8+0xfa>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80059dc:	2301      	movs	r3, #1
 80059de:	4642      	mov	r2, r8
 80059e0:	4639      	mov	r1, r7
 80059e2:	f7ff f839 	bl	8004a58 <disk_write>
 80059e6:	2800      	cmp	r0, #0
 80059e8:	f040 80c1 	bne.w	8005b6e <get_fat.isra.8+0x246>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80059ec:	6ab2      	ldr	r2, [r6, #40]	; 0x28
 80059ee:	6a33      	ldr	r3, [r6, #32]
			fs->wflag = 0;
 80059f0:	70f0      	strb	r0, [r6, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80059f2:	eba8 0202 	sub.w	r2, r8, r2
 80059f6:	429a      	cmp	r2, r3
 80059f8:	d212      	bcs.n	8005a20 <get_fat.isra.8+0xf8>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80059fa:	f896 9002 	ldrb.w	r9, [r6, #2]
 80059fe:	f1b9 0f01 	cmp.w	r9, #1
 8005a02:	d801      	bhi.n	8005a08 <get_fat.isra.8+0xe0>
 8005a04:	e00c      	b.n	8005a20 <get_fat.isra.8+0xf8>
 8005a06:	6a33      	ldr	r3, [r6, #32]
					disk_write(fs->drv, fs->win, wsect, 1);
 8005a08:	7870      	ldrb	r0, [r6, #1]
					wsect += fs->fsize;
 8005a0a:	4498      	add	r8, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005a0c:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
					disk_write(fs->drv, fs->win, wsect, 1);
 8005a10:	4642      	mov	r2, r8
 8005a12:	2301      	movs	r3, #1
 8005a14:	4639      	mov	r1, r7
 8005a16:	f7ff f81f 	bl	8004a58 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005a1a:	f1b9 0f01 	cmp.w	r9, #1
 8005a1e:	d1f2      	bne.n	8005a06 <get_fat.isra.8+0xde>
 8005a20:	7870      	ldrb	r0, [r6, #1]
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8005a22:	2301      	movs	r3, #1
 8005a24:	462a      	mov	r2, r5
 8005a26:	4639      	mov	r1, r7
 8005a28:	f7ff f808 	bl	8004a3c <disk_read>
 8005a2c:	2800      	cmp	r0, #0
 8005a2e:	f040 809a 	bne.w	8005b66 <get_fat.isra.8+0x23e>
			fs->winsect = sector;
 8005a32:	6375      	str	r5, [r6, #52]	; 0x34
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8005a34:	0061      	lsls	r1, r4, #1
 8005a36:	f401 71ff 	and.w	r1, r1, #510	; 0x1fe
 8005a3a:	187b      	adds	r3, r7, r1
	rv = rv << 8 | ptr[0];
 8005a3c:	5c78      	ldrb	r0, [r7, r1]
 8005a3e:	785b      	ldrb	r3, [r3, #1]
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8005a40:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8005a44:	e7a3      	b.n	800598e <get_fat.isra.8+0x66>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8005a46:	78c3      	ldrb	r3, [r0, #3]
 8005a48:	7840      	ldrb	r0, [r0, #1]
 8005a4a:	b31b      	cbz	r3, 8005a94 <get_fat.isra.8+0x16c>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	4642      	mov	r2, r8
 8005a50:	4639      	mov	r1, r7
 8005a52:	f7ff f801 	bl	8004a58 <disk_write>
 8005a56:	2800      	cmp	r0, #0
 8005a58:	f040 8089 	bne.w	8005b6e <get_fat.isra.8+0x246>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005a5c:	6ab2      	ldr	r2, [r6, #40]	; 0x28
 8005a5e:	6a33      	ldr	r3, [r6, #32]
			fs->wflag = 0;
 8005a60:	70f0      	strb	r0, [r6, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005a62:	eba8 0202 	sub.w	r2, r8, r2
 8005a66:	429a      	cmp	r2, r3
 8005a68:	7870      	ldrb	r0, [r6, #1]
 8005a6a:	d213      	bcs.n	8005a94 <get_fat.isra.8+0x16c>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005a6c:	f896 9002 	ldrb.w	r9, [r6, #2]
 8005a70:	f1b9 0f01 	cmp.w	r9, #1
 8005a74:	d802      	bhi.n	8005a7c <get_fat.isra.8+0x154>
 8005a76:	e00d      	b.n	8005a94 <get_fat.isra.8+0x16c>
 8005a78:	6a33      	ldr	r3, [r6, #32]
 8005a7a:	7870      	ldrb	r0, [r6, #1]
					wsect += fs->fsize;
 8005a7c:	4498      	add	r8, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005a7e:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
					disk_write(fs->drv, fs->win, wsect, 1);
 8005a82:	4642      	mov	r2, r8
 8005a84:	2301      	movs	r3, #1
 8005a86:	4639      	mov	r1, r7
 8005a88:	f7fe ffe6 	bl	8004a58 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005a8c:	f1b9 0f01 	cmp.w	r9, #1
 8005a90:	d1f2      	bne.n	8005a78 <get_fat.isra.8+0x150>
 8005a92:	7870      	ldrb	r0, [r6, #1]
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8005a94:	2301      	movs	r3, #1
 8005a96:	462a      	mov	r2, r5
 8005a98:	4639      	mov	r1, r7
 8005a9a:	f7fe ffcf 	bl	8004a3c <disk_read>
 8005a9e:	2800      	cmp	r0, #0
 8005aa0:	d161      	bne.n	8005b66 <get_fat.isra.8+0x23e>
			fs->winsect = sector;
 8005aa2:	6375      	str	r5, [r6, #52]	; 0x34
 8005aa4:	e780      	b.n	80059a8 <get_fat.isra.8+0x80>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8005aa6:	78c2      	ldrb	r2, [r0, #3]
 8005aa8:	7840      	ldrb	r0, [r0, #1]
 8005aaa:	f106 0938 	add.w	r9, r6, #56	; 0x38
 8005aae:	b302      	cbz	r2, 8005af2 <get_fat.isra.8+0x1ca>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8005ab0:	4642      	mov	r2, r8
 8005ab2:	4649      	mov	r1, r9
 8005ab4:	f7fe ffd0 	bl	8004a58 <disk_write>
 8005ab8:	2800      	cmp	r0, #0
 8005aba:	d158      	bne.n	8005b6e <get_fat.isra.8+0x246>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005abc:	6ab2      	ldr	r2, [r6, #40]	; 0x28
 8005abe:	6a33      	ldr	r3, [r6, #32]
			fs->wflag = 0;
 8005ac0:	70f0      	strb	r0, [r6, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005ac2:	eba8 0202 	sub.w	r2, r8, r2
 8005ac6:	429a      	cmp	r2, r3
 8005ac8:	d212      	bcs.n	8005af0 <get_fat.isra.8+0x1c8>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005aca:	f896 a002 	ldrb.w	sl, [r6, #2]
 8005ace:	f1ba 0f01 	cmp.w	sl, #1
 8005ad2:	d801      	bhi.n	8005ad8 <get_fat.isra.8+0x1b0>
 8005ad4:	e00c      	b.n	8005af0 <get_fat.isra.8+0x1c8>
 8005ad6:	6a33      	ldr	r3, [r6, #32]
					disk_write(fs->drv, fs->win, wsect, 1);
 8005ad8:	7870      	ldrb	r0, [r6, #1]
					wsect += fs->fsize;
 8005ada:	4498      	add	r8, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005adc:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
					disk_write(fs->drv, fs->win, wsect, 1);
 8005ae0:	4642      	mov	r2, r8
 8005ae2:	2301      	movs	r3, #1
 8005ae4:	4649      	mov	r1, r9
 8005ae6:	f7fe ffb7 	bl	8004a58 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005aea:	f1ba 0f01 	cmp.w	sl, #1
 8005aee:	d1f2      	bne.n	8005ad6 <get_fat.isra.8+0x1ae>
 8005af0:	7870      	ldrb	r0, [r6, #1]
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8005af2:	4649      	mov	r1, r9
 8005af4:	2301      	movs	r3, #1
 8005af6:	463a      	mov	r2, r7
 8005af8:	f7fe ffa0 	bl	8004a3c <disk_read>
 8005afc:	bb98      	cbnz	r0, 8005b66 <get_fat.isra.8+0x23e>
 8005afe:	6ab2      	ldr	r2, [r6, #40]	; 0x28
			fs->winsect = sector;
 8005b00:	6377      	str	r7, [r6, #52]	; 0x34
 8005b02:	46b8      	mov	r8, r7
 8005b04:	e72a      	b.n	800595c <get_fat.isra.8+0x34>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8005b06:	78f3      	ldrb	r3, [r6, #3]
 8005b08:	7870      	ldrb	r0, [r6, #1]
 8005b0a:	f106 0a38 	add.w	sl, r6, #56	; 0x38
 8005b0e:	b30b      	cbz	r3, 8005b54 <get_fat.isra.8+0x22c>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8005b10:	2301      	movs	r3, #1
 8005b12:	4642      	mov	r2, r8
 8005b14:	4651      	mov	r1, sl
 8005b16:	f7fe ff9f 	bl	8004a58 <disk_write>
 8005b1a:	bb40      	cbnz	r0, 8005b6e <get_fat.isra.8+0x246>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005b1c:	6ab2      	ldr	r2, [r6, #40]	; 0x28
 8005b1e:	6a33      	ldr	r3, [r6, #32]
			fs->wflag = 0;
 8005b20:	70f0      	strb	r0, [r6, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005b22:	eba8 0202 	sub.w	r2, r8, r2
 8005b26:	429a      	cmp	r2, r3
 8005b28:	7870      	ldrb	r0, [r6, #1]
 8005b2a:	d213      	bcs.n	8005b54 <get_fat.isra.8+0x22c>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005b2c:	f896 b002 	ldrb.w	fp, [r6, #2]
 8005b30:	f1bb 0f01 	cmp.w	fp, #1
 8005b34:	d802      	bhi.n	8005b3c <get_fat.isra.8+0x214>
 8005b36:	e00d      	b.n	8005b54 <get_fat.isra.8+0x22c>
 8005b38:	6a33      	ldr	r3, [r6, #32]
 8005b3a:	7870      	ldrb	r0, [r6, #1]
					wsect += fs->fsize;
 8005b3c:	4498      	add	r8, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005b3e:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
					disk_write(fs->drv, fs->win, wsect, 1);
 8005b42:	4642      	mov	r2, r8
 8005b44:	2301      	movs	r3, #1
 8005b46:	4651      	mov	r1, sl
 8005b48:	f7fe ff86 	bl	8004a58 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005b4c:	f1bb 0f01 	cmp.w	fp, #1
 8005b50:	d1f2      	bne.n	8005b38 <get_fat.isra.8+0x210>
 8005b52:	7870      	ldrb	r0, [r6, #1]
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8005b54:	4651      	mov	r1, sl
 8005b56:	2301      	movs	r3, #1
 8005b58:	464a      	mov	r2, r9
 8005b5a:	f7fe ff6f 	bl	8004a3c <disk_read>
 8005b5e:	b910      	cbnz	r0, 8005b66 <get_fat.isra.8+0x23e>
			fs->winsect = sector;
 8005b60:	f8c6 9034 	str.w	r9, [r6, #52]	; 0x34
 8005b64:	e705      	b.n	8005972 <get_fat.isra.8+0x4a>
 8005b66:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005b6a:	6370      	str	r0, [r6, #52]	; 0x34
 8005b6c:	e70f      	b.n	800598e <get_fat.isra.8+0x66>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8005b6e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005b72:	e70c      	b.n	800598e <get_fat.isra.8+0x66>

08005b74 <create_chain>:
{
 8005b74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b78:	b087      	sub	sp, #28
 8005b7a:	4682      	mov	sl, r0
	if (clst == 0) {	/* Create a new chain */
 8005b7c:	9101      	str	r1, [sp, #4]
	FATFS *fs = obj->fs;
 8005b7e:	f8d0 b000 	ldr.w	fp, [r0]
	if (clst == 0) {	/* Create a new chain */
 8005b82:	2900      	cmp	r1, #0
 8005b84:	f040 815e 	bne.w	8005e44 <create_chain+0x2d0>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8005b88:	f8db 8010 	ldr.w	r8, [fp, #16]
 8005b8c:	f8db 301c 	ldr.w	r3, [fp, #28]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8005b90:	f1b8 0f00 	cmp.w	r8, #0
 8005b94:	d11d      	bne.n	8005bd2 <create_chain+0x5e>
 8005b96:	f04f 0801 	mov.w	r8, #1
 8005b9a:	4644      	mov	r4, r8
			ncl++;							/* Next cluster */
 8005b9c:	3401      	adds	r4, #1
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8005b9e:	429c      	cmp	r4, r3
 8005ba0:	d31c      	bcc.n	8005bdc <create_chain+0x68>
				if (ncl > scl) return 0;	/* No free cluster */
 8005ba2:	f1b8 0f01 	cmp.w	r8, #1
 8005ba6:	f240 8173 	bls.w	8005e90 <create_chain+0x31c>
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8005baa:	f8da 5000 	ldr.w	r5, [sl]
				ncl = 2;
 8005bae:	2402      	movs	r4, #2
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8005bb0:	69eb      	ldr	r3, [r5, #28]
 8005bb2:	42a3      	cmp	r3, r4
 8005bb4:	d908      	bls.n	8005bc8 <create_chain+0x54>
		switch (fs->fs_type) {
 8005bb6:	782b      	ldrb	r3, [r5, #0]
 8005bb8:	2b02      	cmp	r3, #2
 8005bba:	f000 80fb 	beq.w	8005db4 <create_chain+0x240>
 8005bbe:	2b03      	cmp	r3, #3
 8005bc0:	f000 80af 	beq.w	8005d22 <create_chain+0x1ae>
 8005bc4:	2b01      	cmp	r3, #1
 8005bc6:	d00e      	beq.n	8005be6 <create_chain+0x72>
 8005bc8:	2401      	movs	r4, #1
}
 8005bca:	4620      	mov	r0, r4
 8005bcc:	b007      	add	sp, #28
 8005bce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8005bd2:	4598      	cmp	r8, r3
 8005bd4:	bf28      	it	cs
 8005bd6:	f04f 0801 	movcs.w	r8, #1
 8005bda:	e7de      	b.n	8005b9a <create_chain+0x26>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8005bdc:	2c01      	cmp	r4, #1
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8005bde:	f8da 5000 	ldr.w	r5, [sl]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8005be2:	d9f1      	bls.n	8005bc8 <create_chain+0x54>
 8005be4:	e7e4      	b.n	8005bb0 <create_chain+0x3c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005be6:	6aaa      	ldr	r2, [r5, #40]	; 0x28
	if (sector != fs->winsect) {	/* Window offset changed? */
 8005be8:	f8d5 9034 	ldr.w	r9, [r5, #52]	; 0x34
			bc = (UINT)clst; bc += bc / 2;
 8005bec:	eb04 0654 	add.w	r6, r4, r4, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005bf0:	eb02 2756 	add.w	r7, r2, r6, lsr #9
	if (sector != fs->winsect) {	/* Window offset changed? */
 8005bf4:	454f      	cmp	r7, r9
 8005bf6:	d036      	beq.n	8005c66 <create_chain+0xf2>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8005bf8:	78ea      	ldrb	r2, [r5, #3]
 8005bfa:	7868      	ldrb	r0, [r5, #1]
 8005bfc:	f105 0138 	add.w	r1, r5, #56	; 0x38
 8005c00:	9102      	str	r1, [sp, #8]
 8005c02:	b332      	cbz	r2, 8005c52 <create_chain+0xde>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8005c04:	464a      	mov	r2, r9
 8005c06:	f7fe ff27 	bl	8004a58 <disk_write>
 8005c0a:	2800      	cmp	r0, #0
 8005c0c:	f040 813a 	bne.w	8005e84 <create_chain+0x310>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005c10:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8005c12:	6a2b      	ldr	r3, [r5, #32]
			fs->wflag = 0;
 8005c14:	70e8      	strb	r0, [r5, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005c16:	eba9 0202 	sub.w	r2, r9, r2
 8005c1a:	429a      	cmp	r2, r3
 8005c1c:	d217      	bcs.n	8005c4e <create_chain+0xda>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005c1e:	78aa      	ldrb	r2, [r5, #2]
 8005c20:	2a01      	cmp	r2, #1
 8005c22:	d914      	bls.n	8005c4e <create_chain+0xda>
 8005c24:	f8cd 800c 	str.w	r8, [sp, #12]
 8005c28:	9404      	str	r4, [sp, #16]
 8005c2a:	4690      	mov	r8, r2
 8005c2c:	9c02      	ldr	r4, [sp, #8]
 8005c2e:	e000      	b.n	8005c32 <create_chain+0xbe>
 8005c30:	6a2b      	ldr	r3, [r5, #32]
					disk_write(fs->drv, fs->win, wsect, 1);
 8005c32:	7868      	ldrb	r0, [r5, #1]
					wsect += fs->fsize;
 8005c34:	4499      	add	r9, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005c36:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
					disk_write(fs->drv, fs->win, wsect, 1);
 8005c3a:	464a      	mov	r2, r9
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	4621      	mov	r1, r4
 8005c40:	f7fe ff0a 	bl	8004a58 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005c44:	f1b8 0f01 	cmp.w	r8, #1
 8005c48:	d1f2      	bne.n	8005c30 <create_chain+0xbc>
 8005c4a:	e9dd 8403 	ldrd	r8, r4, [sp, #12]
 8005c4e:	7868      	ldrb	r0, [r5, #1]
 8005c50:	9902      	ldr	r1, [sp, #8]
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8005c52:	2301      	movs	r3, #1
 8005c54:	463a      	mov	r2, r7
 8005c56:	f7fe fef1 	bl	8004a3c <disk_read>
 8005c5a:	2800      	cmp	r0, #0
 8005c5c:	f040 80e1 	bne.w	8005e22 <create_chain+0x2ae>
 8005c60:	6aaa      	ldr	r2, [r5, #40]	; 0x28
			fs->winsect = sector;
 8005c62:	636f      	str	r7, [r5, #52]	; 0x34
 8005c64:	46b9      	mov	r9, r7
			wc = fs->win[bc++ % SS(fs)];
 8005c66:	f3c6 0308 	ubfx	r3, r6, #0, #9
 8005c6a:	3601      	adds	r6, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005c6c:	eb02 2256 	add.w	r2, r2, r6, lsr #9
			wc = fs->win[bc++ % SS(fs)];
 8005c70:	442b      	add	r3, r5
	if (sector != fs->winsect) {	/* Window offset changed? */
 8005c72:	454a      	cmp	r2, r9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005c74:	9202      	str	r2, [sp, #8]
			wc = fs->win[bc++ % SS(fs)];
 8005c76:	f893 7038 	ldrb.w	r7, [r3, #56]	; 0x38
	if (sector != fs->winsect) {	/* Window offset changed? */
 8005c7a:	d03a      	beq.n	8005cf2 <create_chain+0x17e>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8005c7c:	78eb      	ldrb	r3, [r5, #3]
 8005c7e:	7868      	ldrb	r0, [r5, #1]
 8005c80:	f105 0238 	add.w	r2, r5, #56	; 0x38
 8005c84:	4611      	mov	r1, r2
 8005c86:	9203      	str	r2, [sp, #12]
 8005c88:	b34b      	cbz	r3, 8005cde <create_chain+0x16a>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	464a      	mov	r2, r9
 8005c8e:	f7fe fee3 	bl	8004a58 <disk_write>
 8005c92:	2800      	cmp	r0, #0
 8005c94:	f040 80f6 	bne.w	8005e84 <create_chain+0x310>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005c98:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8005c9a:	6a2b      	ldr	r3, [r5, #32]
			fs->wflag = 0;
 8005c9c:	70e8      	strb	r0, [r5, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005c9e:	eba9 0202 	sub.w	r2, r9, r2
 8005ca2:	429a      	cmp	r2, r3
 8005ca4:	7868      	ldrb	r0, [r5, #1]
 8005ca6:	d21a      	bcs.n	8005cde <create_chain+0x16a>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005ca8:	f895 c002 	ldrb.w	ip, [r5, #2]
 8005cac:	4662      	mov	r2, ip
 8005cae:	2a01      	cmp	r2, #1
 8005cb0:	d915      	bls.n	8005cde <create_chain+0x16a>
 8005cb2:	f8cd 8010 	str.w	r8, [sp, #16]
 8005cb6:	9405      	str	r4, [sp, #20]
 8005cb8:	46e0      	mov	r8, ip
 8005cba:	9c03      	ldr	r4, [sp, #12]
 8005cbc:	e001      	b.n	8005cc2 <create_chain+0x14e>
 8005cbe:	6a2b      	ldr	r3, [r5, #32]
 8005cc0:	7868      	ldrb	r0, [r5, #1]
					wsect += fs->fsize;
 8005cc2:	4499      	add	r9, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005cc4:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
					disk_write(fs->drv, fs->win, wsect, 1);
 8005cc8:	464a      	mov	r2, r9
 8005cca:	2301      	movs	r3, #1
 8005ccc:	4621      	mov	r1, r4
 8005cce:	f7fe fec3 	bl	8004a58 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005cd2:	f1b8 0f01 	cmp.w	r8, #1
 8005cd6:	d1f2      	bne.n	8005cbe <create_chain+0x14a>
 8005cd8:	e9dd 8404 	ldrd	r8, r4, [sp, #16]
 8005cdc:	7868      	ldrb	r0, [r5, #1]
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8005cde:	9903      	ldr	r1, [sp, #12]
 8005ce0:	9a02      	ldr	r2, [sp, #8]
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	f7fe feaa 	bl	8004a3c <disk_read>
 8005ce8:	2800      	cmp	r0, #0
 8005cea:	f040 809a 	bne.w	8005e22 <create_chain+0x2ae>
			fs->winsect = sector;
 8005cee:	9b02      	ldr	r3, [sp, #8]
 8005cf0:	636b      	str	r3, [r5, #52]	; 0x34
			wc |= fs->win[bc % SS(fs)] << 8;
 8005cf2:	f3c6 0608 	ubfx	r6, r6, #0, #9
 8005cf6:	4435      	add	r5, r6
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8005cf8:	07e2      	lsls	r2, r4, #31
			wc |= fs->win[bc % SS(fs)] << 8;
 8005cfa:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
 8005cfe:	ea47 2303 	orr.w	r3, r7, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8005d02:	bf4c      	ite	mi
 8005d04:	091b      	lsrmi	r3, r3, #4
 8005d06:	f3c3 030b 	ubfxpl	r3, r3, #0, #12
			if (cs == 0) break;				/* Found a free cluster */
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	f000 80ab 	beq.w	8005e66 <create_chain+0x2f2>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8005d10:	2b01      	cmp	r3, #1
 8005d12:	f43f af59 	beq.w	8005bc8 <create_chain+0x54>
			if (ncl == scl) return 0;		/* No free cluster */
 8005d16:	45a0      	cmp	r8, r4
 8005d18:	f000 80ba 	beq.w	8005e90 <create_chain+0x31c>
 8005d1c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005d20:	e73c      	b.n	8005b9c <create_chain+0x28>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005d22:	6aae      	ldr	r6, [r5, #40]	; 0x28
	if (sector != fs->winsect) {	/* Window offset changed? */
 8005d24:	f8d5 9034 	ldr.w	r9, [r5, #52]	; 0x34
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005d28:	eb06 16d4 	add.w	r6, r6, r4, lsr #7
	if (sector != fs->winsect) {	/* Window offset changed? */
 8005d2c:	454e      	cmp	r6, r9
 8005d2e:	f105 0738 	add.w	r7, r5, #56	; 0x38
 8005d32:	d031      	beq.n	8005d98 <create_chain+0x224>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8005d34:	78eb      	ldrb	r3, [r5, #3]
 8005d36:	7868      	ldrb	r0, [r5, #1]
 8005d38:	b333      	cbz	r3, 8005d88 <create_chain+0x214>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8005d3a:	2301      	movs	r3, #1
 8005d3c:	464a      	mov	r2, r9
 8005d3e:	4639      	mov	r1, r7
 8005d40:	f7fe fe8a 	bl	8004a58 <disk_write>
 8005d44:	2800      	cmp	r0, #0
 8005d46:	f040 809d 	bne.w	8005e84 <create_chain+0x310>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005d4a:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8005d4c:	6a2b      	ldr	r3, [r5, #32]
			fs->wflag = 0;
 8005d4e:	70e8      	strb	r0, [r5, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005d50:	eba9 0202 	sub.w	r2, r9, r2
 8005d54:	429a      	cmp	r2, r3
 8005d56:	7868      	ldrb	r0, [r5, #1]
 8005d58:	d216      	bcs.n	8005d88 <create_chain+0x214>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005d5a:	78aa      	ldrb	r2, [r5, #2]
 8005d5c:	2a01      	cmp	r2, #1
 8005d5e:	d913      	bls.n	8005d88 <create_chain+0x214>
 8005d60:	f8cd 8008 	str.w	r8, [sp, #8]
 8005d64:	4690      	mov	r8, r2
 8005d66:	e001      	b.n	8005d6c <create_chain+0x1f8>
 8005d68:	6a2b      	ldr	r3, [r5, #32]
 8005d6a:	7868      	ldrb	r0, [r5, #1]
					wsect += fs->fsize;
 8005d6c:	4499      	add	r9, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005d6e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
					disk_write(fs->drv, fs->win, wsect, 1);
 8005d72:	464a      	mov	r2, r9
 8005d74:	2301      	movs	r3, #1
 8005d76:	4639      	mov	r1, r7
 8005d78:	f7fe fe6e 	bl	8004a58 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005d7c:	f1b8 0f01 	cmp.w	r8, #1
 8005d80:	d1f2      	bne.n	8005d68 <create_chain+0x1f4>
 8005d82:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8005d86:	7868      	ldrb	r0, [r5, #1]
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8005d88:	2301      	movs	r3, #1
 8005d8a:	4632      	mov	r2, r6
 8005d8c:	4639      	mov	r1, r7
 8005d8e:	f7fe fe55 	bl	8004a3c <disk_read>
 8005d92:	2800      	cmp	r0, #0
 8005d94:	d145      	bne.n	8005e22 <create_chain+0x2ae>
			fs->winsect = sector;
 8005d96:	636e      	str	r6, [r5, #52]	; 0x34
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8005d98:	00a3      	lsls	r3, r4, #2
 8005d9a:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8005d9e:	18f9      	adds	r1, r7, r3
	rv = rv << 8 | ptr[0];
 8005da0:	5cfb      	ldrb	r3, [r7, r3]
	rv = rv << 8 | ptr[2];
 8005da2:	8848      	ldrh	r0, [r1, #2]
	rv = rv << 8 | ptr[1];
 8005da4:	784a      	ldrb	r2, [r1, #1]
 8005da6:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	rv = rv << 8 | ptr[0];
 8005daa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8005dae:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005db2:	e7aa      	b.n	8005d0a <create_chain+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005db4:	6aae      	ldr	r6, [r5, #40]	; 0x28
	if (sector != fs->winsect) {	/* Window offset changed? */
 8005db6:	f8d5 9034 	ldr.w	r9, [r5, #52]	; 0x34
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005dba:	eb06 2614 	add.w	r6, r6, r4, lsr #8
	if (sector != fs->winsect) {	/* Window offset changed? */
 8005dbe:	454e      	cmp	r6, r9
 8005dc0:	f105 0738 	add.w	r7, r5, #56	; 0x38
 8005dc4:	d035      	beq.n	8005e32 <create_chain+0x2be>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8005dc6:	78eb      	ldrb	r3, [r5, #3]
 8005dc8:	7868      	ldrb	r0, [r5, #1]
 8005dca:	b323      	cbz	r3, 8005e16 <create_chain+0x2a2>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8005dcc:	2301      	movs	r3, #1
 8005dce:	464a      	mov	r2, r9
 8005dd0:	4639      	mov	r1, r7
 8005dd2:	f7fe fe41 	bl	8004a58 <disk_write>
 8005dd6:	2800      	cmp	r0, #0
 8005dd8:	d154      	bne.n	8005e84 <create_chain+0x310>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005dda:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8005ddc:	6a2b      	ldr	r3, [r5, #32]
			fs->wflag = 0;
 8005dde:	70e8      	strb	r0, [r5, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005de0:	eba9 0202 	sub.w	r2, r9, r2
 8005de4:	429a      	cmp	r2, r3
 8005de6:	d215      	bcs.n	8005e14 <create_chain+0x2a0>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005de8:	78aa      	ldrb	r2, [r5, #2]
 8005dea:	2a01      	cmp	r2, #1
 8005dec:	d912      	bls.n	8005e14 <create_chain+0x2a0>
 8005dee:	f8cd 8008 	str.w	r8, [sp, #8]
 8005df2:	4690      	mov	r8, r2
 8005df4:	e000      	b.n	8005df8 <create_chain+0x284>
 8005df6:	6a2b      	ldr	r3, [r5, #32]
					disk_write(fs->drv, fs->win, wsect, 1);
 8005df8:	7868      	ldrb	r0, [r5, #1]
					wsect += fs->fsize;
 8005dfa:	4499      	add	r9, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005dfc:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
					disk_write(fs->drv, fs->win, wsect, 1);
 8005e00:	464a      	mov	r2, r9
 8005e02:	2301      	movs	r3, #1
 8005e04:	4639      	mov	r1, r7
 8005e06:	f7fe fe27 	bl	8004a58 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005e0a:	f1b8 0f01 	cmp.w	r8, #1
 8005e0e:	d1f2      	bne.n	8005df6 <create_chain+0x282>
 8005e10:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8005e14:	7868      	ldrb	r0, [r5, #1]
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8005e16:	2301      	movs	r3, #1
 8005e18:	4632      	mov	r2, r6
 8005e1a:	4639      	mov	r1, r7
 8005e1c:	f7fe fe0e 	bl	8004a3c <disk_read>
 8005e20:	b130      	cbz	r0, 8005e30 <create_chain+0x2bc>
			fs->winsect = sector;
 8005e22:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
}
 8005e26:	4620      	mov	r0, r4
			fs->winsect = sector;
 8005e28:	636c      	str	r4, [r5, #52]	; 0x34
}
 8005e2a:	b007      	add	sp, #28
 8005e2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			fs->winsect = sector;
 8005e30:	636e      	str	r6, [r5, #52]	; 0x34
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8005e32:	0063      	lsls	r3, r4, #1
 8005e34:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8005e38:	18fa      	adds	r2, r7, r3
	rv = rv << 8 | ptr[0];
 8005e3a:	5cfb      	ldrb	r3, [r7, r3]
 8005e3c:	7852      	ldrb	r2, [r2, #1]
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8005e3e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005e42:	e762      	b.n	8005d0a <create_chain+0x196>
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8005e44:	4658      	mov	r0, fp
 8005e46:	f7ff fd6f 	bl	8005928 <get_fat.isra.8>
		if (cs < 2) return 1;				/* Invalid FAT value */
 8005e4a:	2801      	cmp	r0, #1
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8005e4c:	4604      	mov	r4, r0
		if (cs < 2) return 1;				/* Invalid FAT value */
 8005e4e:	f67f aebb 	bls.w	8005bc8 <create_chain+0x54>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8005e52:	1c41      	adds	r1, r0, #1
 8005e54:	d016      	beq.n	8005e84 <create_chain+0x310>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8005e56:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005e5a:	4283      	cmp	r3, r0
 8005e5c:	f63f aeb5 	bhi.w	8005bca <create_chain+0x56>
 8005e60:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8005e64:	e699      	b.n	8005b9a <create_chain+0x26>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8005e66:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005e6a:	42a3      	cmp	r3, r4
 8005e6c:	f67f aeac 	bls.w	8005bc8 <create_chain+0x54>
 8005e70:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005e74:	4621      	mov	r1, r4
 8005e76:	4658      	mov	r0, fp
 8005e78:	f7fe fe36 	bl	8004ae8 <put_fat.part.7>
		if (res == FR_OK && clst != 0) {
 8005e7c:	b168      	cbz	r0, 8005e9a <create_chain+0x326>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8005e7e:	2801      	cmp	r0, #1
 8005e80:	f47f aea2 	bne.w	8005bc8 <create_chain+0x54>
 8005e84:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
}
 8005e88:	4620      	mov	r0, r4
 8005e8a:	b007      	add	sp, #28
 8005e8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (ncl > scl) return 0;	/* No free cluster */
 8005e90:	2400      	movs	r4, #0
}
 8005e92:	4620      	mov	r0, r4
 8005e94:	b007      	add	sp, #28
 8005e96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (res == FR_OK && clst != 0) {
 8005e9a:	9b01      	ldr	r3, [sp, #4]
 8005e9c:	b17b      	cbz	r3, 8005ebe <create_chain+0x34a>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8005e9e:	2b01      	cmp	r3, #1
 8005ea0:	461a      	mov	r2, r3
 8005ea2:	f67f ae91 	bls.w	8005bc8 <create_chain+0x54>
 8005ea6:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005eaa:	429a      	cmp	r2, r3
 8005eac:	f4bf ae8c 	bcs.w	8005bc8 <create_chain+0x54>
 8005eb0:	4611      	mov	r1, r2
 8005eb2:	4658      	mov	r0, fp
 8005eb4:	4622      	mov	r2, r4
 8005eb6:	f7fe fe17 	bl	8004ae8 <put_fat.part.7>
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8005eba:	2800      	cmp	r0, #0
 8005ebc:	d1df      	bne.n	8005e7e <create_chain+0x30a>
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8005ebe:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005ec2:	f8db 2014 	ldr.w	r2, [fp, #20]
		fs->last_clst = ncl;
 8005ec6:	f8cb 4010 	str.w	r4, [fp, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8005eca:	3b02      	subs	r3, #2
 8005ecc:	429a      	cmp	r2, r3
 8005ece:	d802      	bhi.n	8005ed6 <create_chain+0x362>
 8005ed0:	3a01      	subs	r2, #1
 8005ed2:	f8cb 2014 	str.w	r2, [fp, #20]
		fs->fsi_flag |= 1;
 8005ed6:	f89b 3004 	ldrb.w	r3, [fp, #4]
 8005eda:	f043 0301 	orr.w	r3, r3, #1
 8005ede:	f88b 3004 	strb.w	r3, [fp, #4]
 8005ee2:	e672      	b.n	8005bca <create_chain+0x56>

08005ee4 <dir_next.constprop.11>:
/*-----------------------------------------------------------------------*/
/* Directory handling - Move directory table index next                  */
/*-----------------------------------------------------------------------*/

static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
 8005ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8005ee6:	69c3      	ldr	r3, [r0, #28]
 8005ee8:	b1bb      	cbz	r3, 8005f1a <dir_next.constprop.11+0x36>
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8005eea:	6945      	ldr	r5, [r0, #20]
 8005eec:	3520      	adds	r5, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8005eee:	f5b5 1f00 	cmp.w	r5, #2097152	; 0x200000
 8005ef2:	d212      	bcs.n	8005f1a <dir_next.constprop.11+0x36>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8005ef4:	f3c5 0708 	ubfx	r7, r5, #0, #9
 8005ef8:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 8005efa:	6806      	ldr	r6, [r0, #0]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8005efc:	b93f      	cbnz	r7, 8005f0e <dir_next.constprop.11+0x2a>
		dp->sect++;				/* Next sector */

		if (!dp->clust) {		/* Static table */
 8005efe:	6981      	ldr	r1, [r0, #24]
		dp->sect++;				/* Next sector */
 8005f00:	3301      	adds	r3, #1
 8005f02:	61c3      	str	r3, [r0, #28]
		if (!dp->clust) {		/* Static table */
 8005f04:	b959      	cbnz	r1, 8005f1e <dir_next.constprop.11+0x3a>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8005f06:	8933      	ldrh	r3, [r6, #8]
 8005f08:	ebb3 1f55 	cmp.w	r3, r5, lsr #5
 8005f0c:	d923      	bls.n	8005f56 <dir_next.constprop.11+0x72>
				dp->sect = clust2sect(fs, clst);
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8005f0e:	3638      	adds	r6, #56	; 0x38
 8005f10:	443e      	add	r6, r7
 8005f12:	6226      	str	r6, [r4, #32]
	dp->dptr = ofs;						/* Current entry */
 8005f14:	6165      	str	r5, [r4, #20]

	return FR_OK;
 8005f16:	2000      	movs	r0, #0
}
 8005f18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8005f1a:	2004      	movs	r0, #4
}
 8005f1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8005f1e:	8973      	ldrh	r3, [r6, #10]
 8005f20:	3b01      	subs	r3, #1
 8005f22:	ea13 2355 	ands.w	r3, r3, r5, lsr #9
 8005f26:	d1f2      	bne.n	8005f0e <dir_next.constprop.11+0x2a>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8005f28:	4630      	mov	r0, r6
 8005f2a:	f7ff fcfd 	bl	8005928 <get_fat.isra.8>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8005f2e:	2801      	cmp	r0, #1
 8005f30:	d917      	bls.n	8005f62 <dir_next.constprop.11+0x7e>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8005f32:	1c43      	adds	r3, r0, #1
 8005f34:	d013      	beq.n	8005f5e <dir_next.constprop.11+0x7a>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8005f36:	69f3      	ldr	r3, [r6, #28]
 8005f38:	4298      	cmp	r0, r3
 8005f3a:	d20c      	bcs.n	8005f56 <dir_next.constprop.11+0x72>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8005f3c:	3b02      	subs	r3, #2
	clst -= 2;
 8005f3e:	1e82      	subs	r2, r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8005f40:	429a      	cmp	r2, r3
	return clst * fs->csize + fs->database;
 8005f42:	bf3c      	itt	cc
 8005f44:	8973      	ldrhcc	r3, [r6, #10]
 8005f46:	6b31      	ldrcc	r1, [r6, #48]	; 0x30
				dp->clust = clst;		/* Initialize data for new cluster */
 8005f48:	61a0      	str	r0, [r4, #24]
	return clst * fs->csize + fs->database;
 8005f4a:	bf34      	ite	cc
 8005f4c:	fb02 1303 	mlacc	r3, r2, r3, r1
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8005f50:	463b      	movcs	r3, r7
				dp->sect = clust2sect(fs, clst);
 8005f52:	61e3      	str	r3, [r4, #28]
 8005f54:	e7db      	b.n	8005f0e <dir_next.constprop.11+0x2a>
				dp->sect = 0; return FR_NO_FILE;
 8005f56:	2300      	movs	r3, #0
 8005f58:	61e3      	str	r3, [r4, #28]
 8005f5a:	2004      	movs	r0, #4
}
 8005f5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8005f5e:	2001      	movs	r0, #1
}
 8005f60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8005f62:	2002      	movs	r0, #2
}
 8005f64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005f66:	bf00      	nop

08005f68 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8005f68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f6c:	b087      	sub	sp, #28
 8005f6e:	4604      	mov	r4, r0
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8005f70:	6806      	ldr	r6, [r0, #0]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8005f72:	f7ff f9d1 	bl	8005318 <dir_sdi.constprop.12>
	if (res != FR_OK) return res;
 8005f76:	4683      	mov	fp, r0
 8005f78:	2800      	cmp	r0, #0
 8005f7a:	d13a      	bne.n	8005ff2 <dir_find+0x8a>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8005f7c:	22ff      	movs	r2, #255	; 0xff
 8005f7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005f82:	69e7      	ldr	r7, [r4, #28]
 8005f84:	9201      	str	r2, [sp, #4]
 8005f86:	6323      	str	r3, [r4, #48]	; 0x30
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8005f88:	4690      	mov	r8, r2
	if (sector != fs->winsect) {	/* Window offset changed? */
 8005f8a:	6b75      	ldr	r5, [r6, #52]	; 0x34
 8005f8c:	42bd      	cmp	r5, r7
 8005f8e:	d035      	beq.n	8005ffc <dir_find+0x94>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8005f90:	78f3      	ldrb	r3, [r6, #3]
 8005f92:	7870      	ldrb	r0, [r6, #1]
 8005f94:	f106 0938 	add.w	r9, r6, #56	; 0x38
 8005f98:	b303      	cbz	r3, 8005fdc <dir_find+0x74>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8005f9a:	2301      	movs	r3, #1
 8005f9c:	462a      	mov	r2, r5
 8005f9e:	4649      	mov	r1, r9
 8005fa0:	f7fe fd5a 	bl	8004a58 <disk_write>
 8005fa4:	bb18      	cbnz	r0, 8005fee <dir_find+0x86>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005fa6:	6ab2      	ldr	r2, [r6, #40]	; 0x28
 8005fa8:	6a33      	ldr	r3, [r6, #32]
			fs->wflag = 0;
 8005faa:	70f0      	strb	r0, [r6, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005fac:	1aaa      	subs	r2, r5, r2
 8005fae:	429a      	cmp	r2, r3
 8005fb0:	7870      	ldrb	r0, [r6, #1]
 8005fb2:	d213      	bcs.n	8005fdc <dir_find+0x74>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005fb4:	f896 a002 	ldrb.w	sl, [r6, #2]
 8005fb8:	f1ba 0f01 	cmp.w	sl, #1
 8005fbc:	d802      	bhi.n	8005fc4 <dir_find+0x5c>
 8005fbe:	e00d      	b.n	8005fdc <dir_find+0x74>
 8005fc0:	6a33      	ldr	r3, [r6, #32]
 8005fc2:	7870      	ldrb	r0, [r6, #1]
					wsect += fs->fsize;
 8005fc4:	441d      	add	r5, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005fc6:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
					disk_write(fs->drv, fs->win, wsect, 1);
 8005fca:	462a      	mov	r2, r5
 8005fcc:	2301      	movs	r3, #1
 8005fce:	4649      	mov	r1, r9
 8005fd0:	f7fe fd42 	bl	8004a58 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005fd4:	f1ba 0f01 	cmp.w	sl, #1
 8005fd8:	d1f2      	bne.n	8005fc0 <dir_find+0x58>
 8005fda:	7870      	ldrb	r0, [r6, #1]
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8005fdc:	4649      	mov	r1, r9
 8005fde:	2301      	movs	r3, #1
 8005fe0:	463a      	mov	r2, r7
 8005fe2:	f7fe fd2b 	bl	8004a3c <disk_read>
 8005fe6:	b140      	cbz	r0, 8005ffa <dir_find+0x92>
			fs->winsect = sector;
 8005fe8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005fec:	6373      	str	r3, [r6, #52]	; 0x34
				res = FR_DISK_ERR;
 8005fee:	f04f 0b01 	mov.w	fp, #1
#endif
		res = dir_next(dp, 0);	/* Next entry */
	} while (res == FR_OK);

	return res;
}
 8005ff2:	4658      	mov	r0, fp
 8005ff4:	b007      	add	sp, #28
 8005ff6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			fs->winsect = sector;
 8005ffa:	6377      	str	r7, [r6, #52]	; 0x34
		c = dp->dir[DIR_Name];
 8005ffc:	6a27      	ldr	r7, [r4, #32]
 8005ffe:	783d      	ldrb	r5, [r7, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8006000:	b34d      	cbz	r5, 8006056 <dir_find+0xee>
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8006002:	7afa      	ldrb	r2, [r7, #11]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8006004:	2de5      	cmp	r5, #229	; 0xe5
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8006006:	f002 033f 	and.w	r3, r2, #63	; 0x3f
 800600a:	71a3      	strb	r3, [r4, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800600c:	d003      	beq.n	8006016 <dir_find+0xae>
 800600e:	0712      	lsls	r2, r2, #28
 8006010:	d527      	bpl.n	8006062 <dir_find+0xfa>
 8006012:	2b0f      	cmp	r3, #15
 8006014:	d066      	beq.n	80060e4 <dir_find+0x17c>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8006016:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800601a:	6323      	str	r3, [r4, #48]	; 0x30
 800601c:	f04f 08ff 	mov.w	r8, #255	; 0xff
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8006020:	69e7      	ldr	r7, [r4, #28]
 8006022:	b1c7      	cbz	r7, 8006056 <dir_find+0xee>
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8006024:	6965      	ldr	r5, [r4, #20]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8006026:	4b9c      	ldr	r3, [pc, #624]	; (8006298 <dir_find+0x330>)
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8006028:	3520      	adds	r5, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800602a:	429d      	cmp	r5, r3
 800602c:	d813      	bhi.n	8006056 <dir_find+0xee>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800602e:	f3c5 0208 	ubfx	r2, r5, #0, #9
	FATFS *fs = dp->obj.fs;
 8006032:	6823      	ldr	r3, [r4, #0]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8006034:	b942      	cbnz	r2, 8006048 <dir_find+0xe0>
		if (!dp->clust) {		/* Static table */
 8006036:	69a1      	ldr	r1, [r4, #24]
		dp->sect++;				/* Next sector */
 8006038:	3701      	adds	r7, #1
 800603a:	61e7      	str	r7, [r4, #28]
		if (!dp->clust) {		/* Static table */
 800603c:	2900      	cmp	r1, #0
 800603e:	d164      	bne.n	800610a <dir_find+0x1a2>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8006040:	8919      	ldrh	r1, [r3, #8]
 8006042:	ebb1 1f55 	cmp.w	r1, r5, lsr #5
 8006046:	d904      	bls.n	8006052 <dir_find+0xea>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8006048:	3338      	adds	r3, #56	; 0x38
 800604a:	4413      	add	r3, r2
 800604c:	6223      	str	r3, [r4, #32]
	dp->dptr = ofs;						/* Current entry */
 800604e:	6165      	str	r5, [r4, #20]
 8006050:	e79b      	b.n	8005f8a <dir_find+0x22>
				dp->sect = 0; return FR_NO_FILE;
 8006052:	2300      	movs	r3, #0
 8006054:	61e3      	str	r3, [r4, #28]
 8006056:	f04f 0b04 	mov.w	fp, #4
}
 800605a:	4658      	mov	r0, fp
 800605c:	b007      	add	sp, #28
 800605e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (a == AM_LFN) {			/* An LFN entry is found */
 8006062:	2b0f      	cmp	r3, #15
 8006064:	d03e      	beq.n	80060e4 <dir_find+0x17c>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8006066:	f1b8 0f00 	cmp.w	r8, #0
 800606a:	d06f      	beq.n	800614c <dir_find+0x1e4>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800606c:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 8006070:	07da      	lsls	r2, r3, #31
 8006072:	d4d0      	bmi.n	8006016 <dir_find+0xae>
	} while (--cnt && r == 0);
 8006074:	783a      	ldrb	r2, [r7, #0]
 8006076:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 800607a:	429a      	cmp	r2, r3
 800607c:	d1cb      	bne.n	8006016 <dir_find+0xae>
 800607e:	787a      	ldrb	r2, [r7, #1]
 8006080:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8006084:	429a      	cmp	r2, r3
 8006086:	d1c6      	bne.n	8006016 <dir_find+0xae>
 8006088:	78ba      	ldrb	r2, [r7, #2]
 800608a:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 800608e:	429a      	cmp	r2, r3
 8006090:	d1c1      	bne.n	8006016 <dir_find+0xae>
 8006092:	78fa      	ldrb	r2, [r7, #3]
 8006094:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
 8006098:	429a      	cmp	r2, r3
 800609a:	d1bc      	bne.n	8006016 <dir_find+0xae>
 800609c:	793a      	ldrb	r2, [r7, #4]
 800609e:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 80060a2:	429a      	cmp	r2, r3
 80060a4:	d1b7      	bne.n	8006016 <dir_find+0xae>
 80060a6:	797a      	ldrb	r2, [r7, #5]
 80060a8:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
 80060ac:	429a      	cmp	r2, r3
 80060ae:	d1b2      	bne.n	8006016 <dir_find+0xae>
 80060b0:	79ba      	ldrb	r2, [r7, #6]
 80060b2:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 80060b6:	429a      	cmp	r2, r3
 80060b8:	d1ad      	bne.n	8006016 <dir_find+0xae>
 80060ba:	79fa      	ldrb	r2, [r7, #7]
 80060bc:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
 80060c0:	429a      	cmp	r2, r3
 80060c2:	d1a8      	bne.n	8006016 <dir_find+0xae>
 80060c4:	7a3a      	ldrb	r2, [r7, #8]
 80060c6:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 80060ca:	429a      	cmp	r2, r3
 80060cc:	d1a3      	bne.n	8006016 <dir_find+0xae>
 80060ce:	7a7a      	ldrb	r2, [r7, #9]
 80060d0:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 80060d4:	429a      	cmp	r2, r3
 80060d6:	d19e      	bne.n	8006016 <dir_find+0xae>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80060d8:	7aba      	ldrb	r2, [r7, #10]
 80060da:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 80060de:	429a      	cmp	r2, r3
 80060e0:	d199      	bne.n	8006016 <dir_find+0xae>
 80060e2:	e786      	b.n	8005ff2 <dir_find+0x8a>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 80060e4:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 80060e8:	065b      	lsls	r3, r3, #25
 80060ea:	d499      	bmi.n	8006020 <dir_find+0xb8>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 80060ec:	0668      	lsls	r0, r5, #25
 80060ee:	d578      	bpl.n	80061e2 <dir_find+0x27a>
						sum = dp->dir[LDIR_Chksum];
 80060f0:	7b7a      	ldrb	r2, [r7, #13]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 80060f2:	6963      	ldr	r3, [r4, #20]
						sum = dp->dir[LDIR_Chksum];
 80060f4:	9201      	str	r2, [sp, #4]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 80060f6:	6323      	str	r3, [r4, #48]	; 0x30
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 80060f8:	f005 05bf 	and.w	r5, r5, #191	; 0xbf
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80060fc:	7b7b      	ldrb	r3, [r7, #13]
 80060fe:	9a01      	ldr	r2, [sp, #4]
 8006100:	4293      	cmp	r3, r2
 8006102:	d076      	beq.n	80061f2 <dir_find+0x28a>
 8006104:	f04f 08ff 	mov.w	r8, #255	; 0xff
 8006108:	e78a      	b.n	8006020 <dir_find+0xb8>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800610a:	8958      	ldrh	r0, [r3, #10]
 800610c:	3801      	subs	r0, #1
 800610e:	ea10 2055 	ands.w	r0, r0, r5, lsr #9
 8006112:	d199      	bne.n	8006048 <dir_find+0xe0>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8006114:	4618      	mov	r0, r3
 8006116:	9203      	str	r2, [sp, #12]
 8006118:	9302      	str	r3, [sp, #8]
 800611a:	f7ff fc05 	bl	8005928 <get_fat.isra.8>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800611e:	2801      	cmp	r0, #1
 8006120:	d964      	bls.n	80061ec <dir_find+0x284>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8006122:	1c43      	adds	r3, r0, #1
 8006124:	f43f af63 	beq.w	8005fee <dir_find+0x86>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8006128:	9b02      	ldr	r3, [sp, #8]
 800612a:	69d9      	ldr	r1, [r3, #28]
 800612c:	4288      	cmp	r0, r1
 800612e:	d290      	bcs.n	8006052 <dir_find+0xea>
	clst -= 2;
 8006130:	1e87      	subs	r7, r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006132:	3902      	subs	r1, #2
 8006134:	428f      	cmp	r7, r1
	return clst * fs->csize + fs->database;
 8006136:	bf38      	it	cc
 8006138:	6b19      	ldrcc	r1, [r3, #48]	; 0x30
				dp->clust = clst;		/* Initialize data for new cluster */
 800613a:	61a0      	str	r0, [r4, #24]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800613c:	9a03      	ldr	r2, [sp, #12]
	return clst * fs->csize + fs->database;
 800613e:	bf36      	itet	cc
 8006140:	8958      	ldrhcc	r0, [r3, #10]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006142:	4617      	movcs	r7, r2
	return clst * fs->csize + fs->database;
 8006144:	fb07 1700 	mlacc	r7, r7, r0, r1
				dp->sect = clust2sect(fs, clst);
 8006148:	61e7      	str	r7, [r4, #28]
 800614a:	e77d      	b.n	8006048 <dir_find+0xe0>
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800614c:	783a      	ldrb	r2, [r7, #0]
 800614e:	7879      	ldrb	r1, [r7, #1]
 8006150:	01d3      	lsls	r3, r2, #7
 8006152:	ea43 0352 	orr.w	r3, r3, r2, lsr #1
 8006156:	185a      	adds	r2, r3, r1
 8006158:	f3c2 0346 	ubfx	r3, r2, #1, #7
 800615c:	78b9      	ldrb	r1, [r7, #2]
 800615e:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8006162:	fa51 f383 	uxtab	r3, r1, r3
 8006166:	f3c3 0246 	ubfx	r2, r3, #1, #7
 800616a:	78f9      	ldrb	r1, [r7, #3]
 800616c:	ea42 12c3 	orr.w	r2, r2, r3, lsl #7
 8006170:	fa51 f382 	uxtab	r3, r1, r2
 8006174:	f3c3 0246 	ubfx	r2, r3, #1, #7
 8006178:	7939      	ldrb	r1, [r7, #4]
 800617a:	ea42 12c3 	orr.w	r2, r2, r3, lsl #7
 800617e:	fa51 f282 	uxtab	r2, r1, r2
 8006182:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8006186:	7979      	ldrb	r1, [r7, #5]
 8006188:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 800618c:	fa51 f283 	uxtab	r2, r1, r3
 8006190:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8006194:	79b9      	ldrb	r1, [r7, #6]
 8006196:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 800619a:	fa51 f383 	uxtab	r3, r1, r3
 800619e:	f3c3 0246 	ubfx	r2, r3, #1, #7
 80061a2:	79f9      	ldrb	r1, [r7, #7]
 80061a4:	ea42 12c3 	orr.w	r2, r2, r3, lsl #7
 80061a8:	fa51 f382 	uxtab	r3, r1, r2
 80061ac:	f3c3 0246 	ubfx	r2, r3, #1, #7
 80061b0:	7a39      	ldrb	r1, [r7, #8]
 80061b2:	ea42 12c3 	orr.w	r2, r2, r3, lsl #7
 80061b6:	fa51 f282 	uxtab	r2, r1, r2
 80061ba:	f3c2 0346 	ubfx	r3, r2, #1, #7
 80061be:	7a79      	ldrb	r1, [r7, #9]
 80061c0:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 80061c4:	fa51 f283 	uxtab	r2, r1, r3
 80061c8:	f3c2 0346 	ubfx	r3, r2, #1, #7
 80061cc:	7ab9      	ldrb	r1, [r7, #10]
 80061ce:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 80061d2:	fa51 f383 	uxtab	r3, r1, r3
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80061d6:	9a01      	ldr	r2, [sp, #4]
 80061d8:	b2db      	uxtb	r3, r3
 80061da:	429a      	cmp	r2, r3
 80061dc:	f47f af46 	bne.w	800606c <dir_find+0x104>
 80061e0:	e707      	b.n	8005ff2 <dir_find+0x8a>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80061e2:	45a8      	cmp	r8, r5
 80061e4:	d08a      	beq.n	80060fc <dir_find+0x194>
 80061e6:	f04f 08ff 	mov.w	r8, #255	; 0xff
 80061ea:	e719      	b.n	8006020 <dir_find+0xb8>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80061ec:	f04f 0b02 	mov.w	fp, #2
 80061f0:	e6ff      	b.n	8005ff2 <dir_find+0x8a>
	rv = rv << 8 | ptr[0];
 80061f2:	7efa      	ldrb	r2, [r7, #27]
 80061f4:	7ebb      	ldrb	r3, [r7, #26]
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 80061f6:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
 80061fa:	d183      	bne.n	8006104 <dir_find+0x19c>
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 80061fc:	f897 9000 	ldrb.w	r9, [r7]
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8006200:	68f1      	ldr	r1, [r6, #12]
 8006202:	9104      	str	r1, [sp, #16]
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8006204:	f009 093f 	and.w	r9, r9, #63	; 0x3f
 8006208:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800620c:	eb09 0349 	add.w	r3, r9, r9, lsl #1
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8006210:	2201      	movs	r2, #1
 8006212:	9505      	str	r5, [sp, #20]
 8006214:	f8df a088 	ldr.w	sl, [pc, #136]	; 80062a0 <dir_find+0x338>
 8006218:	9602      	str	r6, [sp, #8]
 800621a:	460d      	mov	r5, r1
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800621c:	eb09 0983 	add.w	r9, r9, r3, lsl #2
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8006220:	4611      	mov	r1, r2
 8006222:	9403      	str	r4, [sp, #12]
 8006224:	e010      	b.n	8006248 <dir_find+0x2e0>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8006226:	f1b9 0ffe 	cmp.w	r9, #254	; 0xfe
 800622a:	d81e      	bhi.n	800626a <dir_find+0x302>
 800622c:	f001 ff78 	bl	8008120 <ff_wtoupper>
 8006230:	4606      	mov	r6, r0
 8006232:	f835 0019 	ldrh.w	r0, [r5, r9, lsl #1]
 8006236:	f001 ff73 	bl	8008120 <ff_wtoupper>
 800623a:	4286      	cmp	r6, r0
 800623c:	d115      	bne.n	800626a <dir_find+0x302>
	rv = rv << 8 | ptr[0];
 800623e:	4641      	mov	r1, r8
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8006240:	46a1      	mov	r9, r4
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8006242:	4b16      	ldr	r3, [pc, #88]	; (800629c <dir_find+0x334>)
 8006244:	4553      	cmp	r3, sl
 8006246:	d015      	beq.n	8006274 <dir_find+0x30c>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8006248:	f81a 3b01 	ldrb.w	r3, [sl], #1
 800624c:	18f8      	adds	r0, r7, r3
	rv = rv << 8 | ptr[0];
 800624e:	f817 8003 	ldrb.w	r8, [r7, r3]
 8006252:	7840      	ldrb	r0, [r0, #1]
 8006254:	ea48 2800 	orr.w	r8, r8, r0, lsl #8
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8006258:	f109 0401 	add.w	r4, r9, #1
 800625c:	4640      	mov	r0, r8
		if (wc) {
 800625e:	2900      	cmp	r1, #0
 8006260:	d1e1      	bne.n	8006226 <dir_find+0x2be>
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8006262:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006266:	4598      	cmp	r8, r3
 8006268:	d0eb      	beq.n	8006242 <dir_find+0x2da>
 800626a:	e9dd 6402 	ldrd	r6, r4, [sp, #8]
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800626e:	f04f 08ff 	mov.w	r8, #255	; 0xff
 8006272:	e6d5      	b.n	8006020 <dir_find+0xb8>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8006274:	783b      	ldrb	r3, [r7, #0]
 8006276:	9e02      	ldr	r6, [sp, #8]
 8006278:	9d05      	ldr	r5, [sp, #20]
 800627a:	9c03      	ldr	r4, [sp, #12]
 800627c:	460a      	mov	r2, r1
 800627e:	0659      	lsls	r1, r3, #25
 8006280:	d506      	bpl.n	8006290 <dir_find+0x328>
 8006282:	b12a      	cbz	r2, 8006290 <dir_find+0x328>
 8006284:	9b04      	ldr	r3, [sp, #16]
 8006286:	f833 3019 	ldrh.w	r3, [r3, r9, lsl #1]
 800628a:	2b00      	cmp	r3, #0
 800628c:	f47f af3a 	bne.w	8006104 <dir_find+0x19c>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8006290:	3d01      	subs	r5, #1
 8006292:	fa5f f885 	uxtb.w	r8, r5
 8006296:	e6c3      	b.n	8006020 <dir_find+0xb8>
 8006298:	001fffff 	.word	0x001fffff
 800629c:	0800ad05 	.word	0x0800ad05
 80062a0:	0800acf8 	.word	0x0800acf8

080062a4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80062a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	_FDID *obj = &dp->obj;
	FATFS *fs = obj->fs;


#if _FS_RPATH != 0
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
 80062a8:	780b      	ldrb	r3, [r1, #0]
	FATFS *fs = obj->fs;
 80062aa:	f8d0 b000 	ldr.w	fp, [r0]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
 80062ae:	2b2f      	cmp	r3, #47	; 0x2f
{
 80062b0:	b083      	sub	sp, #12
 80062b2:	460d      	mov	r5, r1
 80062b4:	4607      	mov	r7, r0
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
 80062b6:	d010      	beq.n	80062da <follow_path+0x36>
 80062b8:	2b5c      	cmp	r3, #92	; 0x5c
 80062ba:	d00e      	beq.n	80062da <follow_path+0x36>
		obj->sclust = fs->cdir;				/* Start from current directory */
 80062bc:	f8db 3018 	ldr.w	r3, [fp, #24]
 80062c0:	6083      	str	r3, [r0, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80062c2:	7828      	ldrb	r0, [r5, #0]
 80062c4:	281f      	cmp	r0, #31
 80062c6:	d816      	bhi.n	80062f6 <follow_path+0x52>
		dp->fn[NSFLAG] = NS_NONAME;
 80062c8:	2380      	movs	r3, #128	; 0x80
		res = dir_sdi(dp, 0);
 80062ca:	4638      	mov	r0, r7
		dp->fn[NSFLAG] = NS_NONAME;
 80062cc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			}
		}
	}

	return res;
}
 80062d0:	b003      	add	sp, #12
 80062d2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		res = dir_sdi(dp, 0);
 80062d6:	f7ff b81f 	b.w	8005318 <dir_sdi.constprop.12>
 80062da:	462b      	mov	r3, r5
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80062dc:	781a      	ldrb	r2, [r3, #0]
 80062de:	2a2f      	cmp	r2, #47	; 0x2f
 80062e0:	461d      	mov	r5, r3
 80062e2:	f103 0301 	add.w	r3, r3, #1
 80062e6:	d0f9      	beq.n	80062dc <follow_path+0x38>
 80062e8:	2a5c      	cmp	r2, #92	; 0x5c
 80062ea:	d0f7      	beq.n	80062dc <follow_path+0x38>
		obj->sclust = 0;					/* Start from root directory */
 80062ec:	2300      	movs	r3, #0
 80062ee:	60bb      	str	r3, [r7, #8]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80062f0:	7828      	ldrb	r0, [r5, #0]
 80062f2:	281f      	cmp	r0, #31
 80062f4:	d9e8      	bls.n	80062c8 <follow_path+0x24>
	FATFS *fs = obj->fs;
 80062f6:	465b      	mov	r3, fp
		w = p[si++];					/* Get a character */
 80062f8:	b280      	uxth	r0, r0
		if (w < ' ') break;				/* Break if end of the path name */
 80062fa:	281f      	cmp	r0, #31
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 80062fc:	68de      	ldr	r6, [r3, #12]
		if (w < ' ') break;				/* Break if end of the path name */
 80062fe:	d94c      	bls.n	800639a <follow_path+0xf6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8006300:	282f      	cmp	r0, #47	; 0x2f
 8006302:	d02c      	beq.n	800635e <follow_path+0xba>
 8006304:	285c      	cmp	r0, #92	; 0x5c
 8006306:	d02a      	beq.n	800635e <follow_path+0xba>
 8006308:	f1a6 0902 	sub.w	r9, r6, #2
 800630c:	46a8      	mov	r8, r5
		w = p[si++];					/* Get a character */
 800630e:	2401      	movs	r4, #1
 8006310:	e010      	b.n	8006334 <follow_path+0x90>
		lfn[di++] = w;					/* Store the Unicode character */
 8006312:	f829 0f02 	strh.w	r0, [r9, #2]!
		w = p[si++];					/* Get a character */
 8006316:	f818 0f01 	ldrb.w	r0, [r8, #1]!
		if (w < ' ') break;				/* Break if end of the path name */
 800631a:	281f      	cmp	r0, #31
		w = p[si++];					/* Get a character */
 800631c:	f104 0301 	add.w	r3, r4, #1
		if (w < ' ') break;				/* Break if end of the path name */
 8006320:	f240 8124 	bls.w	800656c <follow_path+0x2c8>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8006324:	282f      	cmp	r0, #47	; 0x2f
 8006326:	d01c      	beq.n	8006362 <follow_path+0xbe>
 8006328:	285c      	cmp	r0, #92	; 0x5c
 800632a:	d01a      	beq.n	8006362 <follow_path+0xbe>
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800632c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006330:	d011      	beq.n	8006356 <follow_path+0xb2>
 8006332:	461c      	mov	r4, r3
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8006334:	2101      	movs	r1, #1
 8006336:	f001 fecf 	bl	80080d8 <ff_convert>
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800633a:	b160      	cbz	r0, 8006356 <follow_path+0xb2>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800633c:	287f      	cmp	r0, #127	; 0x7f
 800633e:	d8e8      	bhi.n	8006312 <follow_path+0x6e>
	while (*str && *str != chr) str++;
 8006340:	2822      	cmp	r0, #34	; 0x22
 8006342:	d008      	beq.n	8006356 <follow_path+0xb2>
 8006344:	4aa6      	ldr	r2, [pc, #664]	; (80065e0 <follow_path+0x33c>)
 8006346:	232a      	movs	r3, #42	; 0x2a
 8006348:	e003      	b.n	8006352 <follow_path+0xae>
 800634a:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 800634e:	2b00      	cmp	r3, #0
 8006350:	d0df      	beq.n	8006312 <follow_path+0x6e>
 8006352:	4298      	cmp	r0, r3
 8006354:	d1f9      	bne.n	800634a <follow_path+0xa6>
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8006356:	2006      	movs	r0, #6
}
 8006358:	b003      	add	sp, #12
 800635a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800635e:	2400      	movs	r4, #0
		w = p[si++];					/* Get a character */
 8006360:	2301      	movs	r3, #1
 8006362:	442b      	add	r3, r5
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8006364:	781a      	ldrb	r2, [r3, #0]
 8006366:	2a2f      	cmp	r2, #47	; 0x2f
 8006368:	461d      	mov	r5, r3
 800636a:	f103 0301 	add.w	r3, r3, #1
 800636e:	d0f9      	beq.n	8006364 <follow_path+0xc0>
 8006370:	2a5c      	cmp	r2, #92	; 0x5c
 8006372:	d0f7      	beq.n	8006364 <follow_path+0xc0>
 8006374:	2320      	movs	r3, #32
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8006376:	f04f 0900 	mov.w	r9, #0
	if ((di == 1 && lfn[di - 1] == '.') ||
 800637a:	2c01      	cmp	r4, #1
 800637c:	f000 80dd 	beq.w	800653a <follow_path+0x296>
 8006380:	2c02      	cmp	r4, #2
 8006382:	d00d      	beq.n	80063a0 <follow_path+0xfc>
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8006384:	b14c      	cbz	r4, 800639a <follow_path+0xf6>
 8006386:	eb06 0244 	add.w	r2, r6, r4, lsl #1
		w = lfn[di - 1];
 800638a:	f832 3d02 	ldrh.w	r3, [r2, #-2]!
		if (w != ' ' && w != '.') break;
 800638e:	2b20      	cmp	r3, #32
 8006390:	d001      	beq.n	8006396 <follow_path+0xf2>
 8006392:	2b2e      	cmp	r3, #46	; 0x2e
 8006394:	d110      	bne.n	80063b8 <follow_path+0x114>
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8006396:	3c01      	subs	r4, #1
 8006398:	d1f7      	bne.n	800638a <follow_path+0xe6>
	lfn[di] = 0;						/* LFN is created */
 800639a:	2300      	movs	r3, #0
 800639c:	8033      	strh	r3, [r6, #0]
 800639e:	e7da      	b.n	8006356 <follow_path+0xb2>
		(di == 2 && lfn[di - 1] == '.' && lfn[di - 2] == '.')) {	/* Is this segment a dot name? */
 80063a0:	8872      	ldrh	r2, [r6, #2]
 80063a2:	2a2e      	cmp	r2, #46	; 0x2e
 80063a4:	d1ef      	bne.n	8006386 <follow_path+0xe2>
 80063a6:	8832      	ldrh	r2, [r6, #0]
 80063a8:	2a2e      	cmp	r2, #46	; 0x2e
 80063aa:	d1ec      	bne.n	8006386 <follow_path+0xe2>
		lfn[di] = 0;
 80063ac:	2100      	movs	r1, #0
			dp->fn[i] = (i < di) ? '.' : ' ';
 80063ae:	f642 622e 	movw	r2, #11822	; 0x2e2e
		lfn[di] = 0;
 80063b2:	80b1      	strh	r1, [r6, #4]
			dp->fn[i] = (i < di) ? '.' : ' ';
 80063b4:	84ba      	strh	r2, [r7, #36]	; 0x24
 80063b6:	e0c9      	b.n	800654c <follow_path+0x2a8>
		*d++ = (BYTE)val;
 80063b8:	f04f 0220 	mov.w	r2, #32
 80063bc:	f04f 3320 	mov.w	r3, #538976288	; 0x20202020
	lfn[di] = 0;						/* LFN is created */
 80063c0:	f04f 0800 	mov.w	r8, #0
 80063c4:	f826 8014 	strh.w	r8, [r6, r4, lsl #1]
		*d++ = (BYTE)val;
 80063c8:	f887 202c 	strb.w	r2, [r7, #44]	; 0x2c
 80063cc:	f887 202d 	strb.w	r2, [r7, #45]	; 0x2d
 80063d0:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 80063d4:	627b      	str	r3, [r7, #36]	; 0x24
 80063d6:	62bb      	str	r3, [r7, #40]	; 0x28
	lfn[di] = 0;						/* LFN is created */
 80063d8:	eb06 0244 	add.w	r2, r6, r4, lsl #1
 80063dc:	1eb3      	subs	r3, r6, #2
 80063de:	e001      	b.n	80063e4 <follow_path+0x140>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 80063e0:	f108 0801 	add.w	r8, r8, #1
 80063e4:	f833 0f02 	ldrh.w	r0, [r3, #2]!
 80063e8:	2820      	cmp	r0, #32
 80063ea:	d0f9      	beq.n	80063e0 <follow_path+0x13c>
 80063ec:	282e      	cmp	r0, #46	; 0x2e
 80063ee:	d0f7      	beq.n	80063e0 <follow_path+0x13c>
	if (si) cf |= NS_LOSS | NS_LFN;
 80063f0:	f1b8 0f00 	cmp.w	r8, #0
 80063f4:	d001      	beq.n	80063fa <follow_path+0x156>
 80063f6:	f049 0903 	orr.w	r9, r9, #3
 80063fa:	4613      	mov	r3, r2
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 80063fc:	f833 2d02 	ldrh.w	r2, [r3, #-2]!
 8006400:	2a2e      	cmp	r2, #46	; 0x2e
 8006402:	d001      	beq.n	8006408 <follow_path+0x164>
 8006404:	3c01      	subs	r4, #1
 8006406:	d1f9      	bne.n	80063fc <follow_path+0x158>
		dp->fn[i++] = (BYTE)w;
 8006408:	2300      	movs	r3, #0
 800640a:	469a      	mov	sl, r3
 800640c:	2208      	movs	r2, #8
		w = lfn[si++];					/* Get an LFN character */
 800640e:	f108 0801 	add.w	r8, r8, #1
		if (!w) break;					/* Break on end of the LFN */
 8006412:	b348      	cbz	r0, 8006468 <follow_path+0x1c4>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8006414:	2820      	cmp	r0, #32
 8006416:	d07f      	beq.n	8006518 <follow_path+0x274>
 8006418:	282e      	cmp	r0, #46	; 0x2e
 800641a:	f000 8082 	beq.w	8006522 <follow_path+0x27e>
		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800641e:	4293      	cmp	r3, r2
 8006420:	d21a      	bcs.n	8006458 <follow_path+0x1b4>
 8006422:	45a0      	cmp	r8, r4
 8006424:	d07f      	beq.n	8006526 <follow_path+0x282>
		if (w >= 0x80) {				/* Non ASCII character */
 8006426:	287f      	cmp	r0, #127	; 0x7f
 8006428:	f200 80a5 	bhi.w	8006576 <follow_path+0x2d2>
	while (*str && *str != chr) str++;
 800642c:	282b      	cmp	r0, #43	; 0x2b
 800642e:	f000 80b3 	beq.w	8006598 <follow_path+0x2f4>
 8006432:	f8df c1b4 	ldr.w	ip, [pc, #436]	; 80065e8 <follow_path+0x344>
 8006436:	212c      	movs	r1, #44	; 0x2c
 8006438:	4281      	cmp	r1, r0
 800643a:	f000 80ad 	beq.w	8006598 <follow_path+0x2f4>
 800643e:	f81c 1f01 	ldrb.w	r1, [ip, #1]!
 8006442:	2900      	cmp	r1, #0
 8006444:	d1f8      	bne.n	8006438 <follow_path+0x194>
				if (IsUpper(w)) {		/* ASCII large capital */
 8006446:	f1a0 0141 	sub.w	r1, r0, #65	; 0x41
 800644a:	2919      	cmp	r1, #25
 800644c:	f200 80b7 	bhi.w	80065be <follow_path+0x31a>
					b |= 2;
 8006450:	f04a 0a02 	orr.w	sl, sl, #2
 8006454:	b2c0      	uxtb	r0, r0
 8006456:	e0a2      	b.n	800659e <follow_path+0x2fa>
			if (ni == 11) {				/* Long extension */
 8006458:	2a0b      	cmp	r2, #11
 800645a:	f000 80a5 	beq.w	80065a8 <follow_path+0x304>
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800645e:	45a0      	cmp	r8, r4
 8006460:	d063      	beq.n	800652a <follow_path+0x286>
 8006462:	f049 0903 	orr.w	r9, r9, #3
			if (si > di) break;			/* No extension */
 8006466:	d960      	bls.n	800652a <follow_path+0x286>
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8006468:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800646c:	2be5      	cmp	r3, #229	; 0xe5
 800646e:	bf04      	itt	eq
 8006470:	2305      	moveq	r3, #5
 8006472:	f887 3024 	strbeq.w	r3, [r7, #36]	; 0x24
	if (ni == 8) b <<= 2;
 8006476:	2a08      	cmp	r2, #8
 8006478:	bf04      	itt	eq
 800647a:	ea4f 0a8a 	moveq.w	sl, sl, lsl #2
 800647e:	fa5f fa8a 	uxtbeq.w	sl, sl
 8006482:	f00a 030c 	and.w	r3, sl, #12
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8006486:	2b0c      	cmp	r3, #12
 8006488:	d06d      	beq.n	8006566 <follow_path+0x2c2>
 800648a:	f00a 0a03 	and.w	sl, sl, #3
 800648e:	f1ba 0f03 	cmp.w	sl, #3
 8006492:	d068      	beq.n	8006566 <follow_path+0x2c2>
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8006494:	f019 0f02 	tst.w	r9, #2
 8006498:	d108      	bne.n	80064ac <follow_path+0x208>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800649a:	f1ba 0f01 	cmp.w	sl, #1
 800649e:	bf08      	it	eq
 80064a0:	f049 0910 	orreq.w	r9, r9, #16
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 80064a4:	2b04      	cmp	r3, #4
 80064a6:	bf08      	it	eq
 80064a8:	f049 0908 	orreq.w	r9, r9, #8
	dp->fn[NSFLAG] = cf;	/* SFN is created */
 80064ac:	f887 902f 	strb.w	r9, [r7, #47]	; 0x2f
			res = dir_find(dp);				/* Find an object with the segment name */
 80064b0:	4638      	mov	r0, r7
 80064b2:	f7ff fd59 	bl	8005f68 <dir_find>
			ns = dp->fn[NSFLAG];
 80064b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) {				/* Failed to find the object */
 80064ba:	b178      	cbz	r0, 80064dc <follow_path+0x238>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80064bc:	2804      	cmp	r0, #4
 80064be:	f47f af4b 	bne.w	8006358 <follow_path+0xb4>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
 80064c2:	0699      	lsls	r1, r3, #26
 80064c4:	f003 0204 	and.w	r2, r3, #4
 80064c8:	f140 8083 	bpl.w	80065d2 <follow_path+0x32e>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 80064cc:	b30a      	cbz	r2, 8006512 <follow_path+0x26e>
						dp->fn[NSFLAG] = NS_NONAME;
 80064ce:	2380      	movs	r3, #128	; 0x80
						res = FR_OK;
 80064d0:	2000      	movs	r0, #0
						dp->fn[NSFLAG] = NS_NONAME;
 80064d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
}
 80064d6:	b003      	add	sp, #12
 80064d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80064dc:	075a      	lsls	r2, r3, #29
 80064de:	f53f af3b 	bmi.w	8006358 <follow_path+0xb4>
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80064e2:	79bb      	ldrb	r3, [r7, #6]
 80064e4:	06db      	lsls	r3, r3, #27
 80064e6:	d578      	bpl.n	80065da <follow_path+0x336>
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80064e8:	697b      	ldr	r3, [r7, #20]
	if (fs->fs_type == FS_FAT32) {
 80064ea:	f89b 1000 	ldrb.w	r1, [fp]
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80064ee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80064f2:	f10b 0338 	add.w	r3, fp, #56	; 0x38
 80064f6:	4413      	add	r3, r2
	if (fs->fs_type == FS_FAT32) {
 80064f8:	2903      	cmp	r1, #3
	rv = rv << 8 | ptr[0];
 80064fa:	7ed8      	ldrb	r0, [r3, #27]
 80064fc:	7e9a      	ldrb	r2, [r3, #26]
	cl = ld_word(dir + DIR_FstClusLO);
 80064fe:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	if (fs->fs_type == FS_FAT32) {
 8006502:	d105      	bne.n	8006510 <follow_path+0x26c>
	rv = rv << 8 | ptr[0];
 8006504:	7d59      	ldrb	r1, [r3, #21]
 8006506:	7d1b      	ldrb	r3, [r3, #20]
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8006508:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800650c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8006510:	60ba      	str	r2, [r7, #8]
 8006512:	7828      	ldrb	r0, [r5, #0]
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	e6ef      	b.n	80062f8 <follow_path+0x54>
			cf |= NS_LOSS | NS_LFN; continue;
 8006518:	f049 0903 	orr.w	r9, r9, #3
 800651c:	f836 0018 	ldrh.w	r0, [r6, r8, lsl #1]
 8006520:	e775      	b.n	800640e <follow_path+0x16a>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8006522:	45a0      	cmp	r8, r4
 8006524:	d1f8      	bne.n	8006518 <follow_path+0x274>
			if (ni == 11) {				/* Long extension */
 8006526:	2a0b      	cmp	r2, #11
 8006528:	d03e      	beq.n	80065a8 <follow_path+0x304>
			b <<= 2; continue;
 800652a:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 800652e:	fa5f fa8a 	uxtb.w	sl, sl
 8006532:	46a0      	mov	r8, r4
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8006534:	220b      	movs	r2, #11
 8006536:	2308      	movs	r3, #8
 8006538:	e7f0      	b.n	800651c <follow_path+0x278>
	if ((di == 1 && lfn[di - 1] == '.') ||
 800653a:	8832      	ldrh	r2, [r6, #0]
 800653c:	2a2e      	cmp	r2, #46	; 0x2e
 800653e:	f47f af22 	bne.w	8006386 <follow_path+0xe2>
		lfn[di] = 0;
 8006542:	2100      	movs	r1, #0
			dp->fn[i] = (i < di) ? '.' : ' ';
 8006544:	f242 022e 	movw	r2, #8238	; 0x202e
		lfn[di] = 0;
 8006548:	8071      	strh	r1, [r6, #2]
			dp->fn[i] = (i < di) ? '.' : ' ';
 800654a:	84ba      	strh	r2, [r7, #36]	; 0x24
 800654c:	f04f 3220 	mov.w	r2, #538976288	; 0x20202020
 8006550:	f04f 0120 	mov.w	r1, #32
 8006554:	f887 102e 	strb.w	r1, [r7, #46]	; 0x2e
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
 8006558:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			dp->fn[i] = (i < di) ? '.' : ' ';
 800655c:	f8c7 2026 	str.w	r2, [r7, #38]	; 0x26
 8006560:	f8c7 202a 	str.w	r2, [r7, #42]	; 0x2a
 8006564:	e7a4      	b.n	80064b0 <follow_path+0x20c>
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8006566:	f049 0902 	orr.w	r9, r9, #2
 800656a:	e79f      	b.n	80064ac <follow_path+0x208>
	*path = &p[si];						/* Return pointer to the next segment */
 800656c:	441d      	add	r5, r3
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800656e:	f04f 0904 	mov.w	r9, #4
	*path = &p[si];						/* Return pointer to the next segment */
 8006572:	2324      	movs	r3, #36	; 0x24
 8006574:	e701      	b.n	800637a <follow_path+0xd6>
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8006576:	2100      	movs	r1, #0
 8006578:	e9cd 3200 	strd	r3, r2, [sp]
 800657c:	f001 fdac 	bl	80080d8 <ff_convert>
 8006580:	f049 0902 	orr.w	r9, r9, #2
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8006584:	e9dd 3200 	ldrd	r3, r2, [sp]
 8006588:	b130      	cbz	r0, 8006598 <follow_path+0x2f4>
 800658a:	4916      	ldr	r1, [pc, #88]	; (80065e4 <follow_path+0x340>)
 800658c:	4408      	add	r0, r1
 800658e:	f810 0c80 	ldrb.w	r0, [r0, #-128]
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8006592:	2800      	cmp	r0, #0
 8006594:	f47f af4a 	bne.w	800642c <follow_path+0x188>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8006598:	f049 0903 	orr.w	r9, r9, #3
 800659c:	205f      	movs	r0, #95	; 0x5f
		dp->fn[i++] = (BYTE)w;
 800659e:	18f9      	adds	r1, r7, r3
 80065a0:	3301      	adds	r3, #1
 80065a2:	f881 0024 	strb.w	r0, [r1, #36]	; 0x24
 80065a6:	e7b9      	b.n	800651c <follow_path+0x278>
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80065a8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80065ac:	2be5      	cmp	r3, #229	; 0xe5
				cf |= NS_LOSS | NS_LFN; break;
 80065ae:	f049 0903 	orr.w	r9, r9, #3
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80065b2:	f47f af66 	bne.w	8006482 <follow_path+0x1de>
 80065b6:	2305      	movs	r3, #5
 80065b8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 80065bc:	e761      	b.n	8006482 <follow_path+0x1de>
					if (IsLower(w)) {	/* ASCII small capital */
 80065be:	f1a0 0161 	sub.w	r1, r0, #97	; 0x61
 80065c2:	2919      	cmp	r1, #25
						b |= 1; w -= 0x20;
 80065c4:	bf97      	itett	ls
 80065c6:	3820      	subls	r0, #32
 80065c8:	b2c0      	uxtbhi	r0, r0
 80065ca:	b2c0      	uxtbls	r0, r0
 80065cc:	f04a 0a01 	orrls.w	sl, sl, #1
 80065d0:	e7e5      	b.n	800659e <follow_path+0x2fa>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80065d2:	2a00      	cmp	r2, #0
 80065d4:	bf08      	it	eq
 80065d6:	2005      	moveq	r0, #5
 80065d8:	e6be      	b.n	8006358 <follow_path+0xb4>
 80065da:	2005      	movs	r0, #5
 80065dc:	e6bc      	b.n	8006358 <follow_path+0xb4>
 80065de:	bf00      	nop
 80065e0:	0800ad09 	.word	0x0800ad09
 80065e4:	0800ac78 	.word	0x0800ac78
 80065e8:	0800ad15 	.word	0x0800ad15

080065ec <dir_register>:
{
 80065ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 80065f0:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
 80065f4:	f013 06a0 	ands.w	r6, r3, #160	; 0xa0
{
 80065f8:	b091      	sub	sp, #68	; 0x44
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 80065fa:	f040 831d 	bne.w	8006c38 <dir_register+0x64c>
	FATFS *fs = dp->obj.fs;
 80065fe:	6803      	ldr	r3, [r0, #0]
 8006600:	9302      	str	r3, [sp, #8]
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8006602:	68df      	ldr	r7, [r3, #12]
 8006604:	883b      	ldrh	r3, [r7, #0]
 8006606:	2b00      	cmp	r3, #0
 8006608:	f000 83d4 	beq.w	8006db4 <dir_register+0x7c8>
 800660c:	463b      	mov	r3, r7
 800660e:	f833 2f02 	ldrh.w	r2, [r3, #2]!
 8006612:	3601      	adds	r6, #1
 8006614:	2a00      	cmp	r2, #0
 8006616:	d1fa      	bne.n	800660e <dir_register+0x22>
	mem_cpy(sn, dp->fn, 12);
 8006618:	4683      	mov	fp, r0
 800661a:	4682      	mov	sl, r0
 800661c:	f85b 0f24 	ldr.w	r0, [fp, #36]!
 8006620:	f8db 1004 	ldr.w	r1, [fp, #4]
 8006624:	f8db 2008 	ldr.w	r2, [fp, #8]
 8006628:	ab0d      	add	r3, sp, #52	; 0x34
 800662a:	c307      	stmia	r3!, {r0, r1, r2}
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800662c:	f89d 503f 	ldrb.w	r5, [sp, #63]	; 0x3f
 8006630:	07eb      	lsls	r3, r5, #31
 8006632:	d453      	bmi.n	80066dc <dir_register+0xf0>
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8006634:	07aa      	lsls	r2, r5, #30
 8006636:	9f02      	ldr	r7, [sp, #8]
 8006638:	f140 82f0 	bpl.w	8006c1c <dir_register+0x630>
 800663c:	4ab8      	ldr	r2, [pc, #736]	; (8006920 <dir_register+0x334>)
 800663e:	f106 030c 	add.w	r3, r6, #12
 8006642:	fba2 2303 	umull	r2, r3, r2, r3
 8006646:	089b      	lsrs	r3, r3, #2
 8006648:	3301      	adds	r3, #1
	res = dir_sdi(dp, 0);
 800664a:	4650      	mov	r0, sl
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800664c:	9303      	str	r3, [sp, #12]
	res = dir_sdi(dp, 0);
 800664e:	f7fe fe63 	bl	8005318 <dir_sdi.constprop.12>
	if (res == FR_OK) {
 8006652:	9001      	str	r0, [sp, #4]
 8006654:	4606      	mov	r6, r0
 8006656:	2800      	cmp	r0, #0
 8006658:	f040 82ea 	bne.w	8006c30 <dir_register+0x644>
 800665c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006660:	f8da 901c 	ldr.w	r9, [sl, #28]
 8006664:	6b7c      	ldr	r4, [r7, #52]	; 0x34
 8006666:	9304      	str	r3, [sp, #16]
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8006668:	f8cd b020 	str.w	fp, [sp, #32]
	if (sector != fs->winsect) {	/* Window offset changed? */
 800666c:	454c      	cmp	r4, r9
 800666e:	f000 81ad 	beq.w	80069cc <dir_register+0x3e0>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8006672:	78fb      	ldrb	r3, [r7, #3]
 8006674:	7878      	ldrb	r0, [r7, #1]
 8006676:	b303      	cbz	r3, 80066ba <dir_register+0xce>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8006678:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800667c:	2301      	movs	r3, #1
 800667e:	4622      	mov	r2, r4
 8006680:	4641      	mov	r1, r8
 8006682:	f7fe f9e9 	bl	8004a58 <disk_write>
 8006686:	2800      	cmp	r0, #0
 8006688:	f040 82b4 	bne.w	8006bf4 <dir_register+0x608>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800668c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800668e:	6a3b      	ldr	r3, [r7, #32]
			fs->wflag = 0;
 8006690:	70f8      	strb	r0, [r7, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8006692:	1aa2      	subs	r2, r4, r2
 8006694:	429a      	cmp	r2, r3
 8006696:	7878      	ldrb	r0, [r7, #1]
 8006698:	d20f      	bcs.n	80066ba <dir_register+0xce>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800669a:	78bd      	ldrb	r5, [r7, #2]
 800669c:	2d01      	cmp	r5, #1
 800669e:	d802      	bhi.n	80066a6 <dir_register+0xba>
 80066a0:	e00b      	b.n	80066ba <dir_register+0xce>
 80066a2:	6a3b      	ldr	r3, [r7, #32]
 80066a4:	7878      	ldrb	r0, [r7, #1]
					wsect += fs->fsize;
 80066a6:	441c      	add	r4, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80066a8:	3d01      	subs	r5, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 80066aa:	4622      	mov	r2, r4
 80066ac:	2301      	movs	r3, #1
 80066ae:	4641      	mov	r1, r8
 80066b0:	f7fe f9d2 	bl	8004a58 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80066b4:	2d01      	cmp	r5, #1
 80066b6:	d1f4      	bne.n	80066a2 <dir_register+0xb6>
 80066b8:	7878      	ldrb	r0, [r7, #1]
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80066ba:	9904      	ldr	r1, [sp, #16]
 80066bc:	2301      	movs	r3, #1
 80066be:	464a      	mov	r2, r9
 80066c0:	f7fe f9bc 	bl	8004a3c <disk_read>
 80066c4:	2800      	cmp	r0, #0
 80066c6:	f000 817f 	beq.w	80069c8 <dir_register+0x3dc>
			fs->winsect = sector;
 80066ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80066ce:	637b      	str	r3, [r7, #52]	; 0x34
				res = FR_DISK_ERR;
 80066d0:	2301      	movs	r3, #1
 80066d2:	9301      	str	r3, [sp, #4]
}
 80066d4:	9801      	ldr	r0, [sp, #4]
 80066d6:	b011      	add	sp, #68	; 0x44
 80066d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 80066dc:	2340      	movs	r3, #64	; 0x40
				if (sr & 0x10000) sr ^= 0x11021;
 80066de:	4c91      	ldr	r4, [pc, #580]	; (8006924 <dir_register+0x338>)
		for (n = 1; n < 100; n++) {
 80066e0:	f8dd 9008 	ldr.w	r9, [sp, #8]
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 80066e4:	f88a 302f 	strb.w	r3, [sl, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 80066e8:	f04f 0801 	mov.w	r8, #1
 80066ec:	9501      	str	r5, [sp, #4]
			*d++ = *s++;
 80066ee:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80066f2:	f89d 103e 	ldrb.w	r1, [sp, #62]	; 0x3e
 80066f6:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 80066fa:	f89d 003d 	ldrb.w	r0, [sp, #61]	; 0x3d
 80066fe:	f88a 102e 	strb.w	r1, [sl, #46]	; 0x2e
	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8006702:	f1b8 0f05 	cmp.w	r8, #5
			*d++ = *s++;
 8006706:	e9ca 2309 	strd	r2, r3, [sl, #36]	; 0x24
 800670a:	f88a 502c 	strb.w	r5, [sl, #44]	; 0x2c
 800670e:	f88a 002d 	strb.w	r0, [sl, #45]	; 0x2d
 8006712:	f89d 1034 	ldrb.w	r1, [sp, #52]	; 0x34
	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8006716:	f240 8183 	bls.w	8006a20 <dir_register+0x434>
 800671a:	3f02      	subs	r7, #2
 800671c:	4643      	mov	r3, r8
 800671e:	e08a      	b.n	8006836 <dir_register+0x24a>
				sr = (sr << 1) + (wc & 1);
 8006720:	f002 0001 	and.w	r0, r2, #1
 8006724:	eb00 0043 	add.w	r0, r0, r3, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8006728:	03c5      	lsls	r5, r0, #15
				wc >>= 1;
 800672a:	ea4f 0352 	mov.w	r3, r2, lsr #1
				if (sr & 0x10000) sr ^= 0x11021;
 800672e:	bf48      	it	mi
 8006730:	4060      	eormi	r0, r4
				sr = (sr << 1) + (wc & 1);
 8006732:	f003 0301 	and.w	r3, r3, #1
 8006736:	eb03 0040 	add.w	r0, r3, r0, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 800673a:	03c5      	lsls	r5, r0, #15
				wc >>= 1;
 800673c:	ea4f 0392 	mov.w	r3, r2, lsr #2
				if (sr & 0x10000) sr ^= 0x11021;
 8006740:	bf48      	it	mi
 8006742:	4060      	eormi	r0, r4
				sr = (sr << 1) + (wc & 1);
 8006744:	f003 0301 	and.w	r3, r3, #1
 8006748:	eb03 0340 	add.w	r3, r3, r0, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 800674c:	03dd      	lsls	r5, r3, #15
				wc >>= 1;
 800674e:	ea4f 00d2 	mov.w	r0, r2, lsr #3
				if (sr & 0x10000) sr ^= 0x11021;
 8006752:	bf48      	it	mi
 8006754:	4063      	eormi	r3, r4
				sr = (sr << 1) + (wc & 1);
 8006756:	f000 0001 	and.w	r0, r0, #1
 800675a:	eb00 0343 	add.w	r3, r0, r3, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 800675e:	03dd      	lsls	r5, r3, #15
				wc >>= 1;
 8006760:	ea4f 1012 	mov.w	r0, r2, lsr #4
				if (sr & 0x10000) sr ^= 0x11021;
 8006764:	bf48      	it	mi
 8006766:	4063      	eormi	r3, r4
				sr = (sr << 1) + (wc & 1);
 8006768:	f000 0001 	and.w	r0, r0, #1
 800676c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8006770:	03c5      	lsls	r5, r0, #15
				wc >>= 1;
 8006772:	ea4f 1352 	mov.w	r3, r2, lsr #5
				if (sr & 0x10000) sr ^= 0x11021;
 8006776:	bf48      	it	mi
 8006778:	4060      	eormi	r0, r4
				sr = (sr << 1) + (wc & 1);
 800677a:	f003 0301 	and.w	r3, r3, #1
 800677e:	eb03 0040 	add.w	r0, r3, r0, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8006782:	03c5      	lsls	r5, r0, #15
				wc >>= 1;
 8006784:	ea4f 1392 	mov.w	r3, r2, lsr #6
				if (sr & 0x10000) sr ^= 0x11021;
 8006788:	bf48      	it	mi
 800678a:	4060      	eormi	r0, r4
				sr = (sr << 1) + (wc & 1);
 800678c:	f003 0301 	and.w	r3, r3, #1
 8006790:	eb03 0340 	add.w	r3, r3, r0, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8006794:	03dd      	lsls	r5, r3, #15
				wc >>= 1;
 8006796:	ea4f 10d2 	mov.w	r0, r2, lsr #7
				if (sr & 0x10000) sr ^= 0x11021;
 800679a:	bf48      	it	mi
 800679c:	4063      	eormi	r3, r4
				sr = (sr << 1) + (wc & 1);
 800679e:	f000 0001 	and.w	r0, r0, #1
 80067a2:	eb00 0343 	add.w	r3, r0, r3, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 80067a6:	03dd      	lsls	r5, r3, #15
				wc >>= 1;
 80067a8:	ea4f 2012 	mov.w	r0, r2, lsr #8
				if (sr & 0x10000) sr ^= 0x11021;
 80067ac:	bf48      	it	mi
 80067ae:	4063      	eormi	r3, r4
				sr = (sr << 1) + (wc & 1);
 80067b0:	f000 0001 	and.w	r0, r0, #1
 80067b4:	eb00 0043 	add.w	r0, r0, r3, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 80067b8:	03c5      	lsls	r5, r0, #15
				wc >>= 1;
 80067ba:	ea4f 2352 	mov.w	r3, r2, lsr #9
				if (sr & 0x10000) sr ^= 0x11021;
 80067be:	bf48      	it	mi
 80067c0:	4060      	eormi	r0, r4
				sr = (sr << 1) + (wc & 1);
 80067c2:	f003 0301 	and.w	r3, r3, #1
 80067c6:	eb03 0040 	add.w	r0, r3, r0, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 80067ca:	03c5      	lsls	r5, r0, #15
				wc >>= 1;
 80067cc:	ea4f 2392 	mov.w	r3, r2, lsr #10
				if (sr & 0x10000) sr ^= 0x11021;
 80067d0:	bf48      	it	mi
 80067d2:	4060      	eormi	r0, r4
				sr = (sr << 1) + (wc & 1);
 80067d4:	f003 0301 	and.w	r3, r3, #1
 80067d8:	eb03 0340 	add.w	r3, r3, r0, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 80067dc:	03dd      	lsls	r5, r3, #15
				wc >>= 1;
 80067de:	ea4f 20d2 	mov.w	r0, r2, lsr #11
				if (sr & 0x10000) sr ^= 0x11021;
 80067e2:	bf48      	it	mi
 80067e4:	4063      	eormi	r3, r4
				sr = (sr << 1) + (wc & 1);
 80067e6:	f000 0001 	and.w	r0, r0, #1
 80067ea:	eb00 0343 	add.w	r3, r0, r3, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 80067ee:	03dd      	lsls	r5, r3, #15
				wc >>= 1;
 80067f0:	ea4f 3012 	mov.w	r0, r2, lsr #12
				if (sr & 0x10000) sr ^= 0x11021;
 80067f4:	bf48      	it	mi
 80067f6:	4063      	eormi	r3, r4
				sr = (sr << 1) + (wc & 1);
 80067f8:	f000 0001 	and.w	r0, r0, #1
 80067fc:	eb00 0043 	add.w	r0, r0, r3, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8006800:	03c5      	lsls	r5, r0, #15
				wc >>= 1;
 8006802:	ea4f 3352 	mov.w	r3, r2, lsr #13
				if (sr & 0x10000) sr ^= 0x11021;
 8006806:	bf48      	it	mi
 8006808:	4060      	eormi	r0, r4
				sr = (sr << 1) + (wc & 1);
 800680a:	f003 0301 	and.w	r3, r3, #1
 800680e:	eb03 0040 	add.w	r0, r3, r0, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8006812:	03c5      	lsls	r5, r0, #15
				wc >>= 1;
 8006814:	ea4f 3392 	mov.w	r3, r2, lsr #14
				if (sr & 0x10000) sr ^= 0x11021;
 8006818:	bf48      	it	mi
 800681a:	4060      	eormi	r0, r4
				sr = (sr << 1) + (wc & 1);
 800681c:	f003 0301 	and.w	r3, r3, #1
 8006820:	eb03 0340 	add.w	r3, r3, r0, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8006824:	03dd      	lsls	r5, r3, #15
 8006826:	bf48      	it	mi
 8006828:	4063      	eormi	r3, r4
				wc >>= 1;
 800682a:	0bd2      	lsrs	r2, r2, #15
				sr = (sr << 1) + (wc & 1);
 800682c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8006830:	03d8      	lsls	r0, r3, #15
 8006832:	bf48      	it	mi
 8006834:	4063      	eormi	r3, r4
		while (*lfn) {	/* Create a CRC */
 8006836:	f837 2f02 	ldrh.w	r2, [r7, #2]!
 800683a:	2a00      	cmp	r2, #0
 800683c:	f47f af70 	bne.w	8006720 <dir_register+0x134>
		c = (BYTE)((seq % 16) + '0');
 8006840:	f003 020f 	and.w	r2, r3, #15
 8006844:	f102 0e30 	add.w	lr, r2, #48	; 0x30
		if (c > '9') c += 7;
 8006848:	f1be 0f39 	cmp.w	lr, #57	; 0x39
 800684c:	bf88      	it	hi
 800684e:	f102 0e37 	addhi.w	lr, r2, #55	; 0x37
	} while (seq);
 8006852:	091a      	lsrs	r2, r3, #4
		ns[i--] = c;
 8006854:	f88d e033 	strb.w	lr, [sp, #51]	; 0x33
	} while (seq);
 8006858:	f000 819c 	beq.w	8006b94 <dir_register+0x5a8>
		c = (BYTE)((seq % 16) + '0');
 800685c:	f002 020f 	and.w	r2, r2, #15
 8006860:	f102 0030 	add.w	r0, r2, #48	; 0x30
		if (c > '9') c += 7;
 8006864:	2839      	cmp	r0, #57	; 0x39
 8006866:	bf88      	it	hi
 8006868:	f102 0037 	addhi.w	r0, r2, #55	; 0x37
	} while (seq);
 800686c:	0a1a      	lsrs	r2, r3, #8
		ns[i--] = c;
 800686e:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
	} while (seq);
 8006872:	f000 819c 	beq.w	8006bae <dir_register+0x5c2>
		c = (BYTE)((seq % 16) + '0');
 8006876:	f002 020f 	and.w	r2, r2, #15
 800687a:	f102 0030 	add.w	r0, r2, #48	; 0x30
		if (c > '9') c += 7;
 800687e:	2839      	cmp	r0, #57	; 0x39
 8006880:	bf88      	it	hi
 8006882:	f102 0037 	addhi.w	r0, r2, #55	; 0x37
	} while (seq);
 8006886:	0b1a      	lsrs	r2, r3, #12
		ns[i--] = c;
 8006888:	f88d 0031 	strb.w	r0, [sp, #49]	; 0x31
	} while (seq);
 800688c:	f000 81a8 	beq.w	8006be0 <dir_register+0x5f4>
		c = (BYTE)((seq % 16) + '0');
 8006890:	f002 020f 	and.w	r2, r2, #15
 8006894:	f102 0030 	add.w	r0, r2, #48	; 0x30
		if (c > '9') c += 7;
 8006898:	2839      	cmp	r0, #57	; 0x39
 800689a:	bf88      	it	hi
 800689c:	f102 0037 	addhi.w	r0, r2, #55	; 0x37
	} while (seq);
 80068a0:	0c1a      	lsrs	r2, r3, #16
		ns[i--] = c;
 80068a2:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
	} while (seq);
 80068a6:	f000 81a0 	beq.w	8006bea <dir_register+0x5fe>
		c = (BYTE)((seq % 16) + '0');
 80068aa:	f002 020f 	and.w	r2, r2, #15
 80068ae:	f102 0030 	add.w	r0, r2, #48	; 0x30
		if (c > '9') c += 7;
 80068b2:	2839      	cmp	r0, #57	; 0x39
 80068b4:	bf88      	it	hi
 80068b6:	f102 0037 	addhi.w	r0, r2, #55	; 0x37
	} while (seq);
 80068ba:	0d1a      	lsrs	r2, r3, #20
		ns[i--] = c;
 80068bc:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
	} while (seq);
 80068c0:	f000 819b 	beq.w	8006bfa <dir_register+0x60e>
		c = (BYTE)((seq % 16) + '0');
 80068c4:	f002 020f 	and.w	r2, r2, #15
 80068c8:	f102 0030 	add.w	r0, r2, #48	; 0x30
		if (c > '9') c += 7;
 80068cc:	2839      	cmp	r0, #57	; 0x39
 80068ce:	bf88      	it	hi
 80068d0:	f102 0037 	addhi.w	r0, r2, #55	; 0x37
	} while (seq);
 80068d4:	0e1a      	lsrs	r2, r3, #24
		ns[i--] = c;
 80068d6:	f88d 002e 	strb.w	r0, [sp, #46]	; 0x2e
	} while (seq);
 80068da:	f000 81b0 	beq.w	8006c3e <dir_register+0x652>
		c = (BYTE)((seq % 16) + '0');
 80068de:	f002 020f 	and.w	r2, r2, #15
 80068e2:	f102 0030 	add.w	r0, r2, #48	; 0x30
		if (c > '9') c += 7;
 80068e6:	2839      	cmp	r0, #57	; 0x39
 80068e8:	bf88      	it	hi
 80068ea:	f102 0037 	addhi.w	r0, r2, #55	; 0x37
	} while (seq);
 80068ee:	0f1b      	lsrs	r3, r3, #28
		ns[i--] = c;
 80068f0:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
	} while (seq);
 80068f4:	f000 81a8 	beq.w	8006c48 <dir_register+0x65c>
		c = (BYTE)((seq % 16) + '0');
 80068f8:	b2db      	uxtb	r3, r3
 80068fa:	f103 0230 	add.w	r2, r3, #48	; 0x30
		if (c > '9') c += 7;
 80068fe:	2a39      	cmp	r2, #57	; 0x39
 8006900:	bf88      	it	hi
 8006902:	f103 0237 	addhi.w	r2, r3, #55	; 0x37
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8006906:	2920      	cmp	r1, #32
		ns[i--] = c;
 8006908:	f88d 202c 	strb.w	r2, [sp, #44]	; 0x2c
 800690c:	bf18      	it	ne
 800690e:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8006912:	f000 823f 	beq.w	8006d94 <dir_register+0x7a8>
 8006916:	f10a 0125 	add.w	r1, sl, #37	; 0x25
 800691a:	2200      	movs	r2, #0
 800691c:	e008      	b.n	8006930 <dir_register+0x344>
 800691e:	bf00      	nop
 8006920:	4ec4ec4f 	.word	0x4ec4ec4f
 8006924:	00011021 	.word	0x00011021
 8006928:	7807      	ldrb	r7, [r0, #0]
 800692a:	2f20      	cmp	r7, #32
 800692c:	d008      	beq.n	8006940 <dir_register+0x354>
 800692e:	461a      	mov	r2, r3
 8006930:	1c53      	adds	r3, r2, #1
 8006932:	429d      	cmp	r5, r3
 8006934:	4608      	mov	r0, r1
 8006936:	f102 0c02 	add.w	ip, r2, #2
 800693a:	f101 0101 	add.w	r1, r1, #1
 800693e:	d8f3      	bhi.n	8006928 <dir_register+0x33c>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8006940:	2d07      	cmp	r5, #7
 8006942:	d96f      	bls.n	8006a24 <dir_register+0x438>
 8006944:	2120      	movs	r1, #32
	} while (j < 8);
 8006946:	f1bc 0f07 	cmp.w	ip, #7
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800694a:	7001      	strb	r1, [r0, #0]
	} while (j < 8);
 800694c:	d82d      	bhi.n	80069aa <dir_register+0x3be>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800694e:	1cd1      	adds	r1, r2, #3
 8006950:	2020      	movs	r0, #32
	} while (j < 8);
 8006952:	2908      	cmp	r1, #8
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8006954:	f80b 000c 	strb.w	r0, [fp, ip]
	} while (j < 8);
 8006958:	d027      	beq.n	80069aa <dir_register+0x3be>
 800695a:	3204      	adds	r2, #4
 800695c:	4459      	add	r1, fp
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800695e:	2020      	movs	r0, #32
	} while (j < 8);
 8006960:	2a08      	cmp	r2, #8
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8006962:	7008      	strb	r0, [r1, #0]
	} while (j < 8);
 8006964:	d021      	beq.n	80069aa <dir_register+0x3be>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8006966:	1d19      	adds	r1, r3, #4
 8006968:	2020      	movs	r0, #32
	} while (j < 8);
 800696a:	2908      	cmp	r1, #8
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800696c:	f80b 0002 	strb.w	r0, [fp, r2]
	} while (j < 8);
 8006970:	d01b      	beq.n	80069aa <dir_register+0x3be>
 8006972:	4459      	add	r1, fp
 8006974:	1d5a      	adds	r2, r3, #5
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8006976:	2020      	movs	r0, #32
	} while (j < 8);
 8006978:	2a08      	cmp	r2, #8
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800697a:	7008      	strb	r0, [r1, #0]
	} while (j < 8);
 800697c:	d015      	beq.n	80069aa <dir_register+0x3be>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800697e:	1d99      	adds	r1, r3, #6
 8006980:	2020      	movs	r0, #32
	} while (j < 8);
 8006982:	2908      	cmp	r1, #8
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8006984:	f80b 0002 	strb.w	r0, [fp, r2]
	} while (j < 8);
 8006988:	d00f      	beq.n	80069aa <dir_register+0x3be>
 800698a:	4459      	add	r1, fp
 800698c:	1dda      	adds	r2, r3, #7
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800698e:	2020      	movs	r0, #32
	} while (j < 8);
 8006990:	2a08      	cmp	r2, #8
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8006992:	7008      	strb	r0, [r1, #0]
	} while (j < 8);
 8006994:	d009      	beq.n	80069aa <dir_register+0x3be>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8006996:	f04f 0e20 	mov.w	lr, #32
	} while (j < 8);
 800699a:	3301      	adds	r3, #1
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800699c:	bf08      	it	eq
 800699e:	2320      	moveq	r3, #32
 80069a0:	f80b e002 	strb.w	lr, [fp, r2]
 80069a4:	bf08      	it	eq
 80069a6:	f88a 302b 	strbeq.w	r3, [sl, #43]	; 0x2b
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 80069aa:	4650      	mov	r0, sl
 80069ac:	f7ff fadc 	bl	8005f68 <dir_find>
			if (res != FR_OK) break;
 80069b0:	2800      	cmp	r0, #0
 80069b2:	f040 8127 	bne.w	8006c04 <dir_register+0x618>
		for (n = 1; n < 100; n++) {
 80069b6:	f108 0801 	add.w	r8, r8, #1
 80069ba:	f1b8 0f64 	cmp.w	r8, #100	; 0x64
 80069be:	f000 80e3 	beq.w	8006b88 <dir_register+0x59c>
 80069c2:	f8d9 700c 	ldr.w	r7, [r9, #12]
 80069c6:	e692      	b.n	80066ee <dir_register+0x102>
			fs->winsect = sector;
 80069c8:	f8c7 9034 	str.w	r9, [r7, #52]	; 0x34
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80069cc:	f8da 3020 	ldr.w	r3, [sl, #32]
 80069d0:	781b      	ldrb	r3, [r3, #0]
 80069d2:	2be5      	cmp	r3, #229	; 0xe5
 80069d4:	f000 808d 	beq.w	8006af2 <dir_register+0x506>
 80069d8:	2b00      	cmp	r3, #0
 80069da:	f000 808a 	beq.w	8006af2 <dir_register+0x506>
				n = 0;					/* Not a blank entry. Restart to search */
 80069de:	f04f 0800 	mov.w	r8, #0
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80069e2:	f8da 301c 	ldr.w	r3, [sl, #28]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	f000 80ce 	beq.w	8006b88 <dir_register+0x59c>
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80069ec:	f8da 5014 	ldr.w	r5, [sl, #20]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80069f0:	4acd      	ldr	r2, [pc, #820]	; (8006d28 <dir_register+0x73c>)
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80069f2:	3520      	adds	r5, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80069f4:	4295      	cmp	r5, r2
 80069f6:	f200 80c7 	bhi.w	8006b88 <dir_register+0x59c>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80069fa:	f3c5 0b08 	ubfx	fp, r5, #0, #9
	FATFS *fs = dp->obj.fs;
 80069fe:	f8da 4000 	ldr.w	r4, [sl]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8006a02:	f1bb 0f00 	cmp.w	fp, #0
 8006a06:	f000 80b3 	beq.w	8006b70 <dir_register+0x584>
 8006a0a:	f104 0638 	add.w	r6, r4, #56	; 0x38
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8006a0e:	445e      	add	r6, fp
 8006a10:	f8ca 6020 	str.w	r6, [sl, #32]
 8006a14:	464c      	mov	r4, r9
	dp->dptr = ofs;						/* Current entry */
 8006a16:	f8ca 5014 	str.w	r5, [sl, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8006a1a:	4699      	mov	r9, r3
 8006a1c:	4646      	mov	r6, r8
 8006a1e:	e625      	b.n	800666c <dir_register+0x80>
	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8006a20:	4643      	mov	r3, r8
 8006a22:	e70d      	b.n	8006840 <dir_register+0x254>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8006a24:	217e      	movs	r1, #126	; 0x7e
	} while (j < 8);
 8006a26:	f1bc 0f07 	cmp.w	ip, #7
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8006a2a:	7001      	strb	r1, [r0, #0]
 8006a2c:	f105 0101 	add.w	r1, r5, #1
	} while (j < 8);
 8006a30:	d8bb      	bhi.n	80069aa <dir_register+0x3be>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8006a32:	2908      	cmp	r1, #8
 8006a34:	d08b      	beq.n	800694e <dir_register+0x362>
 8006a36:	aa10      	add	r2, sp, #64	; 0x40
 8006a38:	4411      	add	r1, r2
 8006a3a:	1c98      	adds	r0, r3, #2
 8006a3c:	f811 2c14 	ldrb.w	r2, [r1, #-20]
 8006a40:	f80b 200c 	strb.w	r2, [fp, ip]
	} while (j < 8);
 8006a44:	2808      	cmp	r0, #8
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8006a46:	f105 0502 	add.w	r5, r5, #2
	} while (j < 8);
 8006a4a:	d0ae      	beq.n	80069aa <dir_register+0x3be>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8006a4c:	2d07      	cmp	r5, #7
 8006a4e:	f103 0203 	add.w	r2, r3, #3
 8006a52:	eb0b 0100 	add.w	r1, fp, r0
 8006a56:	d882      	bhi.n	800695e <dir_register+0x372>
 8006a58:	af10      	add	r7, sp, #64	; 0x40
 8006a5a:	442f      	add	r7, r5
	} while (j < 8);
 8006a5c:	2a08      	cmp	r2, #8
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8006a5e:	f817 7c14 	ldrb.w	r7, [r7, #-20]
 8006a62:	f80b 7000 	strb.w	r7, [fp, r0]
 8006a66:	f105 0101 	add.w	r1, r5, #1
	} while (j < 8);
 8006a6a:	d09e      	beq.n	80069aa <dir_register+0x3be>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8006a6c:	2908      	cmp	r1, #8
 8006a6e:	f43f af7a 	beq.w	8006966 <dir_register+0x37a>
 8006a72:	a810      	add	r0, sp, #64	; 0x40
 8006a74:	4401      	add	r1, r0
 8006a76:	1d18      	adds	r0, r3, #4
 8006a78:	f811 1c14 	ldrb.w	r1, [r1, #-20]
 8006a7c:	f80b 1002 	strb.w	r1, [fp, r2]
	} while (j < 8);
 8006a80:	2808      	cmp	r0, #8
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8006a82:	f105 0702 	add.w	r7, r5, #2
	} while (j < 8);
 8006a86:	d090      	beq.n	80069aa <dir_register+0x3be>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8006a88:	2f08      	cmp	r7, #8
 8006a8a:	f103 0205 	add.w	r2, r3, #5
 8006a8e:	eb0b 0100 	add.w	r1, fp, r0
 8006a92:	f43f af70 	beq.w	8006976 <dir_register+0x38a>
 8006a96:	a910      	add	r1, sp, #64	; 0x40
 8006a98:	440f      	add	r7, r1
	} while (j < 8);
 8006a9a:	2a08      	cmp	r2, #8
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8006a9c:	f817 7c14 	ldrb.w	r7, [r7, #-20]
 8006aa0:	f80b 7000 	strb.w	r7, [fp, r0]
 8006aa4:	f105 0103 	add.w	r1, r5, #3
	} while (j < 8);
 8006aa8:	f43f af7f 	beq.w	80069aa <dir_register+0x3be>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8006aac:	2908      	cmp	r1, #8
 8006aae:	f43f af66 	beq.w	800697e <dir_register+0x392>
 8006ab2:	a810      	add	r0, sp, #64	; 0x40
 8006ab4:	4401      	add	r1, r0
 8006ab6:	1d98      	adds	r0, r3, #6
 8006ab8:	f811 1c14 	ldrb.w	r1, [r1, #-20]
 8006abc:	f80b 1002 	strb.w	r1, [fp, r2]
	} while (j < 8);
 8006ac0:	2808      	cmp	r0, #8
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8006ac2:	f105 0504 	add.w	r5, r5, #4
	} while (j < 8);
 8006ac6:	f43f af70 	beq.w	80069aa <dir_register+0x3be>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8006aca:	2d08      	cmp	r5, #8
 8006acc:	f103 0207 	add.w	r2, r3, #7
 8006ad0:	eb0b 0100 	add.w	r1, fp, r0
 8006ad4:	f43f af5b 	beq.w	800698e <dir_register+0x3a2>
 8006ad8:	a910      	add	r1, sp, #64	; 0x40
 8006ada:	4429      	add	r1, r5
	} while (j < 8);
 8006adc:	2a08      	cmp	r2, #8
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8006ade:	f811 1c14 	ldrb.w	r1, [r1, #-20]
 8006ae2:	f80b 1000 	strb.w	r1, [fp, r0]
	} while (j < 8);
 8006ae6:	f43f af60 	beq.w	80069aa <dir_register+0x3be>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8006aea:	2d06      	cmp	r5, #6
 8006aec:	f43f af55 	beq.w	800699a <dir_register+0x3ae>
 8006af0:	e751      	b.n	8006996 <dir_register+0x3aa>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8006af2:	9b03      	ldr	r3, [sp, #12]
 8006af4:	f106 0801 	add.w	r8, r6, #1
 8006af8:	4543      	cmp	r3, r8
 8006afa:	f47f af72 	bne.w	80069e2 <dir_register+0x3f6>
 8006afe:	f8dd b020 	ldr.w	fp, [sp, #32]
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8006b02:	2e00      	cmp	r6, #0
 8006b04:	f040 8158 	bne.w	8006db8 <dir_register+0x7cc>
	if (sector != fs->winsect) {	/* Window offset changed? */
 8006b08:	9b02      	ldr	r3, [sp, #8]
		res = move_window(fs, dp->sect);
 8006b0a:	f8da 601c 	ldr.w	r6, [sl, #28]
	if (sector != fs->winsect) {	/* Window offset changed? */
 8006b0e:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8006b10:	42a6      	cmp	r6, r4
 8006b12:	461a      	mov	r2, r3
 8006b14:	f000 8114 	beq.w	8006d40 <dir_register+0x754>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8006b18:	461d      	mov	r5, r3
 8006b1a:	78db      	ldrb	r3, [r3, #3]
 8006b1c:	7850      	ldrb	r0, [r2, #1]
 8006b1e:	f102 0738 	add.w	r7, r2, #56	; 0x38
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	f000 8104 	beq.w	8006d30 <dir_register+0x744>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8006b28:	2301      	movs	r3, #1
 8006b2a:	4622      	mov	r2, r4
 8006b2c:	4639      	mov	r1, r7
 8006b2e:	f7fd ff93 	bl	8004a58 <disk_write>
 8006b32:	2800      	cmp	r0, #0
 8006b34:	d15e      	bne.n	8006bf4 <dir_register+0x608>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8006b36:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8006b38:	6a2b      	ldr	r3, [r5, #32]
			fs->wflag = 0;
 8006b3a:	70e8      	strb	r0, [r5, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8006b3c:	1aa2      	subs	r2, r4, r2
 8006b3e:	429a      	cmp	r2, r3
 8006b40:	4629      	mov	r1, r5
 8006b42:	7868      	ldrb	r0, [r5, #1]
 8006b44:	f080 80f4 	bcs.w	8006d30 <dir_register+0x744>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006b48:	78ad      	ldrb	r5, [r5, #2]
 8006b4a:	2d01      	cmp	r5, #1
 8006b4c:	f240 80f0 	bls.w	8006d30 <dir_register+0x744>
 8006b50:	4688      	mov	r8, r1
					wsect += fs->fsize;
 8006b52:	441c      	add	r4, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006b54:	3d01      	subs	r5, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 8006b56:	4622      	mov	r2, r4
 8006b58:	2301      	movs	r3, #1
 8006b5a:	4639      	mov	r1, r7
 8006b5c:	f7fd ff7c 	bl	8004a58 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006b60:	2d01      	cmp	r5, #1
 8006b62:	f000 80e3 	beq.w	8006d2c <dir_register+0x740>
 8006b66:	f8d8 3020 	ldr.w	r3, [r8, #32]
 8006b6a:	f898 0001 	ldrb.w	r0, [r8, #1]
 8006b6e:	e7f0      	b.n	8006b52 <dir_register+0x566>
		if (!dp->clust) {		/* Static table */
 8006b70:	f8da 1018 	ldr.w	r1, [sl, #24]
		dp->sect++;				/* Next sector */
 8006b74:	3301      	adds	r3, #1
 8006b76:	f8ca 301c 	str.w	r3, [sl, #28]
		if (!dp->clust) {		/* Static table */
 8006b7a:	bb39      	cbnz	r1, 8006bcc <dir_register+0x5e0>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8006b7c:	8922      	ldrh	r2, [r4, #8]
 8006b7e:	ebb2 1f55 	cmp.w	r2, r5, lsr #5
 8006b82:	d828      	bhi.n	8006bd6 <dir_register+0x5ea>
				dp->sect = 0; return FR_NO_FILE;
 8006b84:	f8ca 101c 	str.w	r1, [sl, #28]
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8006b88:	2307      	movs	r3, #7
 8006b8a:	9301      	str	r3, [sp, #4]
}
 8006b8c:	9801      	ldr	r0, [sp, #4]
 8006b8e:	b011      	add	sp, #68	; 0x44
 8006b90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ns[i] = '~';
 8006b94:	237e      	movs	r3, #126	; 0x7e
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8006b96:	2920      	cmp	r1, #32
	ns[i] = '~';
 8006b98:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
		ns[i--] = c;
 8006b9c:	bf18      	it	ne
 8006b9e:	2506      	movne	r5, #6
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8006ba0:	f47f aeb9 	bne.w	8006916 <dir_register+0x32a>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8006ba4:	f88a 3024 	strb.w	r3, [sl, #36]	; 0x24
 8006ba8:	2107      	movs	r1, #7
		ns[i--] = c;
 8006baa:	2506      	movs	r5, #6
 8006bac:	e00a      	b.n	8006bc4 <dir_register+0x5d8>
	ns[i] = '~';
 8006bae:	237e      	movs	r3, #126	; 0x7e
 8006bb0:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		ns[i--] = c;
 8006bb4:	2505      	movs	r5, #5
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8006bb6:	2920      	cmp	r1, #32
 8006bb8:	f47f aead 	bne.w	8006916 <dir_register+0x32a>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8006bbc:	237e      	movs	r3, #126	; 0x7e
 8006bbe:	f88a 3024 	strb.w	r3, [sl, #36]	; 0x24
 8006bc2:	1c69      	adds	r1, r5, #1
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	f04f 0c01 	mov.w	ip, #1
 8006bca:	e734      	b.n	8006a36 <dir_register+0x44a>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8006bcc:	8962      	ldrh	r2, [r4, #10]
 8006bce:	3a01      	subs	r2, #1
 8006bd0:	ea12 2255 	ands.w	r2, r2, r5, lsr #9
 8006bd4:	d044      	beq.n	8006c60 <dir_register+0x674>
 8006bd6:	f104 0638 	add.w	r6, r4, #56	; 0x38
 8006bda:	f8d7 9034 	ldr.w	r9, [r7, #52]	; 0x34
 8006bde:	e716      	b.n	8006a0e <dir_register+0x422>
	ns[i] = '~';
 8006be0:	237e      	movs	r3, #126	; 0x7e
 8006be2:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
		ns[i--] = c;
 8006be6:	2504      	movs	r5, #4
 8006be8:	e7e5      	b.n	8006bb6 <dir_register+0x5ca>
	ns[i] = '~';
 8006bea:	237e      	movs	r3, #126	; 0x7e
 8006bec:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
		ns[i--] = c;
 8006bf0:	2503      	movs	r5, #3
 8006bf2:	e7e0      	b.n	8006bb6 <dir_register+0x5ca>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8006bf4:	2301      	movs	r3, #1
 8006bf6:	9301      	str	r3, [sp, #4]
 8006bf8:	e56c      	b.n	80066d4 <dir_register+0xe8>
	ns[i] = '~';
 8006bfa:	237e      	movs	r3, #126	; 0x7e
 8006bfc:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
		ns[i--] = c;
 8006c00:	2502      	movs	r5, #2
 8006c02:	e7d8      	b.n	8006bb6 <dir_register+0x5ca>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8006c04:	2804      	cmp	r0, #4
 8006c06:	9d01      	ldr	r5, [sp, #4]
 8006c08:	9001      	str	r0, [sp, #4]
 8006c0a:	f47f ad63 	bne.w	80066d4 <dir_register+0xe8>
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8006c0e:	07aa      	lsls	r2, r5, #30
		dp->fn[NSFLAG] = sn[NSFLAG];
 8006c10:	f88a 502f 	strb.w	r5, [sl, #47]	; 0x2f
 8006c14:	f8da 7000 	ldr.w	r7, [sl]
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8006c18:	f53f ad10 	bmi.w	800663c <dir_register+0x50>
 8006c1c:	2301      	movs	r3, #1
	res = dir_sdi(dp, 0);
 8006c1e:	4650      	mov	r0, sl
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8006c20:	9303      	str	r3, [sp, #12]
	res = dir_sdi(dp, 0);
 8006c22:	f7fe fb79 	bl	8005318 <dir_sdi.constprop.12>
	if (res == FR_OK) {
 8006c26:	9001      	str	r0, [sp, #4]
 8006c28:	4606      	mov	r6, r0
 8006c2a:	2800      	cmp	r0, #0
 8006c2c:	f43f ad16 	beq.w	800665c <dir_register+0x70>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8006c30:	2804      	cmp	r0, #4
 8006c32:	f47f ad4f 	bne.w	80066d4 <dir_register+0xe8>
 8006c36:	e7a7      	b.n	8006b88 <dir_register+0x59c>
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8006c38:	2306      	movs	r3, #6
 8006c3a:	9301      	str	r3, [sp, #4]
 8006c3c:	e54a      	b.n	80066d4 <dir_register+0xe8>
	ns[i] = '~';
 8006c3e:	237e      	movs	r3, #126	; 0x7e
 8006c40:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
		ns[i--] = c;
 8006c44:	2501      	movs	r5, #1
 8006c46:	e7b6      	b.n	8006bb6 <dir_register+0x5ca>
	ns[i] = '~';
 8006c48:	227e      	movs	r2, #126	; 0x7e
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8006c4a:	f89d 102d 	ldrb.w	r1, [sp, #45]	; 0x2d
	ns[i] = '~';
 8006c4e:	f88d 202c 	strb.w	r2, [sp, #44]	; 0x2c
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8006c52:	2002      	movs	r0, #2
 8006c54:	f88a 2024 	strb.w	r2, [sl, #36]	; 0x24
 8006c58:	f88a 1025 	strb.w	r1, [sl, #37]	; 0x25
 8006c5c:	4605      	mov	r5, r0
 8006c5e:	e6f5      	b.n	8006a4c <dir_register+0x460>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8006c60:	4620      	mov	r0, r4
 8006c62:	f7fe fe61 	bl	8005928 <get_fat.isra.8>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8006c66:	2801      	cmp	r0, #1
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8006c68:	9005      	str	r0, [sp, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8006c6a:	f240 8270 	bls.w	800714e <dir_register+0xb62>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8006c6e:	1c43      	adds	r3, r0, #1
 8006c70:	d0c0      	beq.n	8006bf4 <dir_register+0x608>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8006c72:	69e3      	ldr	r3, [r4, #28]
 8006c74:	4298      	cmp	r0, r3
 8006c76:	f0c0 823f 	bcc.w	80070f8 <dir_register+0xb0c>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8006c7a:	f8da 1018 	ldr.w	r1, [sl, #24]
 8006c7e:	4650      	mov	r0, sl
 8006c80:	f7fe ff78 	bl	8005b74 <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8006c84:	9005      	str	r0, [sp, #20]
 8006c86:	2800      	cmp	r0, #0
 8006c88:	f43f af7e 	beq.w	8006b88 <dir_register+0x59c>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8006c8c:	2801      	cmp	r0, #1
 8006c8e:	f000 825e 	beq.w	800714e <dir_register+0xb62>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006c92:	1c43      	adds	r3, r0, #1
 8006c94:	d0ae      	beq.n	8006bf4 <dir_register+0x608>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8006c96:	78e3      	ldrb	r3, [r4, #3]
 8006c98:	f104 0638 	add.w	r6, r4, #56	; 0x38
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	f040 8262 	bne.w	8007166 <dir_register+0xb7a>
 8006ca2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006ca6:	2100      	movs	r1, #0
 8006ca8:	4630      	mov	r0, r6
 8006caa:	f001 faaf 	bl	800820c <memset>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006cae:	69e3      	ldr	r3, [r4, #28]
	clst -= 2;
 8006cb0:	9805      	ldr	r0, [sp, #20]
 8006cb2:	8962      	ldrh	r2, [r4, #10]
 8006cb4:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006cb6:	1e99      	subs	r1, r3, #2
 8006cb8:	4288      	cmp	r0, r1
	clst -= 2;
 8006cba:	9007      	str	r0, [sp, #28]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006cbc:	f0c0 824e 	bcc.w	800715c <dir_register+0xb70>
 8006cc0:	f04f 0900 	mov.w	r9, #0
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006cc4:	f8c4 9034 	str.w	r9, [r4, #52]	; 0x34
 8006cc8:	2a00      	cmp	r2, #0
 8006cca:	f000 8244 	beq.w	8007156 <dir_register+0xb6a>
 8006cce:	2300      	movs	r3, #0
 8006cd0:	9306      	str	r3, [sp, #24]
 8006cd2:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
						fs->wflag = 1;
 8006cd6:	f04f 0301 	mov.w	r3, #1
 8006cda:	70e3      	strb	r3, [r4, #3]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8006cdc:	464a      	mov	r2, r9
 8006cde:	2301      	movs	r3, #1
 8006ce0:	4631      	mov	r1, r6
 8006ce2:	7860      	ldrb	r0, [r4, #1]
 8006ce4:	f7fd feb8 	bl	8004a58 <disk_write>
 8006ce8:	2800      	cmp	r0, #0
 8006cea:	d183      	bne.n	8006bf4 <dir_register+0x608>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8006cec:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8006cee:	6a23      	ldr	r3, [r4, #32]
			fs->wflag = 0;
 8006cf0:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8006cf2:	eba9 0202 	sub.w	r2, r9, r2
 8006cf6:	429a      	cmp	r2, r3
 8006cf8:	f080 8216 	bcs.w	8007128 <dir_register+0xb3c>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006cfc:	f894 8002 	ldrb.w	r8, [r4, #2]
 8006d00:	f1b8 0f01 	cmp.w	r8, #1
 8006d04:	f240 8210 	bls.w	8007128 <dir_register+0xb3c>
					wsect += fs->fsize;
 8006d08:	4499      	add	r9, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006d0a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
					disk_write(fs->drv, fs->win, wsect, 1);
 8006d0e:	464a      	mov	r2, r9
 8006d10:	2301      	movs	r3, #1
 8006d12:	4631      	mov	r1, r6
 8006d14:	7860      	ldrb	r0, [r4, #1]
 8006d16:	f7fd fe9f 	bl	8004a58 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006d1a:	f1b8 0f01 	cmp.w	r8, #1
 8006d1e:	f000 8203 	beq.w	8007128 <dir_register+0xb3c>
 8006d22:	6a23      	ldr	r3, [r4, #32]
 8006d24:	e7f0      	b.n	8006d08 <dir_register+0x71c>
 8006d26:	bf00      	nop
 8006d28:	001fffff 	.word	0x001fffff
 8006d2c:	9b02      	ldr	r3, [sp, #8]
 8006d2e:	7858      	ldrb	r0, [r3, #1]
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8006d30:	4639      	mov	r1, r7
 8006d32:	2301      	movs	r3, #1
 8006d34:	4632      	mov	r2, r6
 8006d36:	f7fd fe81 	bl	8004a3c <disk_read>
 8006d3a:	bba0      	cbnz	r0, 8006da6 <dir_register+0x7ba>
			fs->winsect = sector;
 8006d3c:	9b02      	ldr	r3, [sp, #8]
 8006d3e:	635e      	str	r6, [r3, #52]	; 0x34
 8006d40:	2220      	movs	r2, #32
 8006d42:	2100      	movs	r1, #0
 8006d44:	f8da 0020 	ldr.w	r0, [sl, #32]
 8006d48:	f001 fa60 	bl	800820c <memset>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8006d4c:	f8da 3020 	ldr.w	r3, [sl, #32]
 8006d50:	f10a 0228 	add.w	r2, sl, #40	; 0x28
 8006d54:	4293      	cmp	r3, r2
 8006d56:	d203      	bcs.n	8006d60 <dir_register+0x774>
 8006d58:	1d1a      	adds	r2, r3, #4
 8006d5a:	4593      	cmp	fp, r2
 8006d5c:	f0c0 81b3 	bcc.w	80070c6 <dir_register+0xada>
			*d++ = *s++;
 8006d60:	f8da 2024 	ldr.w	r2, [sl, #36]	; 0x24
 8006d64:	601a      	str	r2, [r3, #0]
 8006d66:	f8da 2028 	ldr.w	r2, [sl, #40]	; 0x28
 8006d6a:	605a      	str	r2, [r3, #4]
 8006d6c:	f89a 202c 	ldrb.w	r2, [sl, #44]	; 0x2c
 8006d70:	721a      	strb	r2, [r3, #8]
 8006d72:	f89a 202d 	ldrb.w	r2, [sl, #45]	; 0x2d
 8006d76:	725a      	strb	r2, [r3, #9]
 8006d78:	f89a 202e 	ldrb.w	r2, [sl, #46]	; 0x2e
 8006d7c:	729a      	strb	r2, [r3, #10]
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8006d7e:	f89a 302f 	ldrb.w	r3, [sl, #47]	; 0x2f
 8006d82:	f8da 1020 	ldr.w	r1, [sl, #32]
 8006d86:	f003 0318 	and.w	r3, r3, #24
 8006d8a:	730b      	strb	r3, [r1, #12]
			fs->wflag = 1;
 8006d8c:	9b02      	ldr	r3, [sp, #8]
 8006d8e:	2201      	movs	r2, #1
 8006d90:	70da      	strb	r2, [r3, #3]
 8006d92:	e49f      	b.n	80066d4 <dir_register+0xe8>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8006d94:	f242 0320 	movw	r3, #8224	; 0x2020
 8006d98:	f8aa 3024 	strh.w	r3, [sl, #36]	; 0x24
 8006d9c:	f10a 0126 	add.w	r1, sl, #38	; 0x26
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8006da0:	2300      	movs	r3, #0
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8006da2:	2203      	movs	r2, #3
 8006da4:	e5db      	b.n	800695e <dir_register+0x372>
			fs->winsect = sector;
 8006da6:	9a02      	ldr	r2, [sp, #8]
 8006da8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006dac:	6353      	str	r3, [r2, #52]	; 0x34
				res = FR_DISK_ERR;
 8006dae:	2301      	movs	r3, #1
 8006db0:	9301      	str	r3, [sp, #4]
 8006db2:	e48f      	b.n	80066d4 <dir_register+0xe8>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8006db4:	461e      	mov	r6, r3
 8006db6:	e42f      	b.n	8006618 <dir_register+0x2c>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8006db8:	f8da 1014 	ldr.w	r1, [sl, #20]
 8006dbc:	4650      	mov	r0, sl
 8006dbe:	eba1 1146 	sub.w	r1, r1, r6, lsl #5
 8006dc2:	f7fe fc1f 	bl	8005604 <dir_sdi>
		if (res == FR_OK) {
 8006dc6:	2800      	cmp	r0, #0
 8006dc8:	f040 817a 	bne.w	80070c0 <dir_register+0xad4>
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8006dcc:	f89a 2024 	ldrb.w	r2, [sl, #36]	; 0x24
 8006dd0:	f89a 4025 	ldrb.w	r4, [sl, #37]	; 0x25
 8006dd4:	f89a 0026 	ldrb.w	r0, [sl, #38]	; 0x26
 8006dd8:	f89a 1027 	ldrb.w	r1, [sl, #39]	; 0x27
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8006ddc:	f8cd b00c 	str.w	fp, [sp, #12]
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8006de0:	01d3      	lsls	r3, r2, #7
 8006de2:	ea43 0352 	orr.w	r3, r3, r2, lsr #1
 8006de6:	191a      	adds	r2, r3, r4
 8006de8:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8006dec:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8006df0:	fa50 f283 	uxtab	r2, r0, r3
 8006df4:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8006df8:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8006dfc:	fa51 f283 	uxtab	r2, r1, r3
 8006e00:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8006e04:	f89a 4028 	ldrb.w	r4, [sl, #40]	; 0x28
 8006e08:	f89a 0029 	ldrb.w	r0, [sl, #41]	; 0x29
 8006e0c:	f89a 102a 	ldrb.w	r1, [sl, #42]	; 0x2a
 8006e10:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8006e14:	fa54 f283 	uxtab	r2, r4, r3
 8006e18:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8006e1c:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8006e20:	fa50 f283 	uxtab	r2, r0, r3
 8006e24:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8006e28:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8006e2c:	fa51 f283 	uxtab	r2, r1, r3
 8006e30:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8006e34:	f89a 402b 	ldrb.w	r4, [sl, #43]	; 0x2b
 8006e38:	f89a 002c 	ldrb.w	r0, [sl, #44]	; 0x2c
 8006e3c:	f89a 102d 	ldrb.w	r1, [sl, #45]	; 0x2d
 8006e40:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8006e44:	fa54 f283 	uxtab	r2, r4, r3
 8006e48:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8006e4c:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8006e50:	fa50 f283 	uxtab	r2, r0, r3
 8006e54:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8006e58:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8006e5c:	fa51 f383 	uxtab	r3, r1, r3
 8006e60:	f3c3 0946 	ubfx	r9, r3, #1, #7
 8006e64:	f89a 202e 	ldrb.w	r2, [sl, #46]	; 0x2e
 8006e68:	9c02      	ldr	r4, [sp, #8]
 8006e6a:	ea49 19c3 	orr.w	r9, r9, r3, lsl #7
 8006e6e:	fa52 f989 	uxtab	r9, r2, r9
 8006e72:	fa5f f989 	uxtb.w	r9, r9
 8006e76:	f104 0838 	add.w	r8, r4, #56	; 0x38
				res = move_window(fs, dp->sect);
 8006e7a:	f8da b01c 	ldr.w	fp, [sl, #28]
	if (sector != fs->winsect) {	/* Window offset changed? */
 8006e7e:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8006e80:	45ab      	cmp	fp, r5
 8006e82:	d01e      	beq.n	8006ec2 <dir_register+0x8d6>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8006e84:	78e3      	ldrb	r3, [r4, #3]
 8006e86:	7860      	ldrb	r0, [r4, #1]
 8006e88:	b18b      	cbz	r3, 8006eae <dir_register+0x8c2>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8006e8a:	2301      	movs	r3, #1
 8006e8c:	462a      	mov	r2, r5
 8006e8e:	4641      	mov	r1, r8
 8006e90:	f7fd fde2 	bl	8004a58 <disk_write>
 8006e94:	2800      	cmp	r0, #0
 8006e96:	f47f aead 	bne.w	8006bf4 <dir_register+0x608>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8006e9a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8006e9c:	6a23      	ldr	r3, [r4, #32]
			fs->wflag = 0;
 8006e9e:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8006ea0:	1aaa      	subs	r2, r5, r2
 8006ea2:	429a      	cmp	r2, r3
 8006ea4:	7860      	ldrb	r0, [r4, #1]
 8006ea6:	d202      	bcs.n	8006eae <dir_register+0x8c2>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006ea8:	78a7      	ldrb	r7, [r4, #2]
 8006eaa:	2f01      	cmp	r7, #1
 8006eac:	d85a      	bhi.n	8006f64 <dir_register+0x978>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8006eae:	2301      	movs	r3, #1
 8006eb0:	465a      	mov	r2, fp
 8006eb2:	4641      	mov	r1, r8
 8006eb4:	f7fd fdc2 	bl	8004a3c <disk_read>
 8006eb8:	2800      	cmp	r0, #0
 8006eba:	f47f af74 	bne.w	8006da6 <dir_register+0x7ba>
			fs->winsect = sector;
 8006ebe:	f8c4 b034 	str.w	fp, [r4, #52]	; 0x34
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8006ec2:	b2f5      	uxtb	r5, r6
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8006ec4:	1e6a      	subs	r2, r5, #1
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8006ec6:	f8da 3020 	ldr.w	r3, [sl, #32]
 8006eca:	68e0      	ldr	r0, [r4, #12]
	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8006ecc:	f883 900d 	strb.w	r9, [r3, #13]
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8006ed0:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 8006ed4:	eb02 0281 	add.w	r2, r2, r1, lsl #2
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8006ed8:	f04f 070f 	mov.w	r7, #15
	dir[LDIR_Type] = 0;
 8006edc:	2100      	movs	r1, #0
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8006ede:	72df      	strb	r7, [r3, #11]
	dir[LDIR_Type] = 0;
 8006ee0:	7319      	strb	r1, [r3, #12]
	*ptr++ = (BYTE)val; val >>= 8;
 8006ee2:	7699      	strb	r1, [r3, #26]
	*ptr++ = (BYTE)val;
 8006ee4:	76d9      	strb	r1, [r3, #27]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8006ee6:	f830 1012 	ldrh.w	r1, [r0, r2, lsl #1]
	*ptr++ = (BYTE)val; val >>= 8;
 8006eea:	7059      	strb	r1, [r3, #1]
 8006eec:	0a0f      	lsrs	r7, r1, #8
	*ptr++ = (BYTE)val;
 8006eee:	709f      	strb	r7, [r3, #2]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8006ef0:	0057      	lsls	r7, r2, #1
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8006ef2:	2900      	cmp	r1, #0
 8006ef4:	d141      	bne.n	8006f7a <dir_register+0x98e>
	*ptr++ = (BYTE)val; val >>= 8;
 8006ef6:	22ff      	movs	r2, #255	; 0xff
 8006ef8:	70da      	strb	r2, [r3, #3]
	*ptr++ = (BYTE)val;
 8006efa:	711a      	strb	r2, [r3, #4]
	*ptr++ = (BYTE)val; val >>= 8;
 8006efc:	22ff      	movs	r2, #255	; 0xff
 8006efe:	715a      	strb	r2, [r3, #5]
	*ptr++ = (BYTE)val;
 8006f00:	719a      	strb	r2, [r3, #6]
	*ptr++ = (BYTE)val; val >>= 8;
 8006f02:	22ff      	movs	r2, #255	; 0xff
 8006f04:	71da      	strb	r2, [r3, #7]
	*ptr++ = (BYTE)val;
 8006f06:	721a      	strb	r2, [r3, #8]
	*ptr++ = (BYTE)val; val >>= 8;
 8006f08:	22ff      	movs	r2, #255	; 0xff
 8006f0a:	725a      	strb	r2, [r3, #9]
	*ptr++ = (BYTE)val;
 8006f0c:	729a      	strb	r2, [r3, #10]
	*ptr++ = (BYTE)val; val >>= 8;
 8006f0e:	22ff      	movs	r2, #255	; 0xff
 8006f10:	739a      	strb	r2, [r3, #14]
	*ptr++ = (BYTE)val;
 8006f12:	73da      	strb	r2, [r3, #15]
	*ptr++ = (BYTE)val; val >>= 8;
 8006f14:	22ff      	movs	r2, #255	; 0xff
 8006f16:	741a      	strb	r2, [r3, #16]
	*ptr++ = (BYTE)val;
 8006f18:	745a      	strb	r2, [r3, #17]
	*ptr++ = (BYTE)val; val >>= 8;
 8006f1a:	22ff      	movs	r2, #255	; 0xff
 8006f1c:	749a      	strb	r2, [r3, #18]
	*ptr++ = (BYTE)val;
 8006f1e:	74da      	strb	r2, [r3, #19]
	*ptr++ = (BYTE)val; val >>= 8;
 8006f20:	22ff      	movs	r2, #255	; 0xff
 8006f22:	751a      	strb	r2, [r3, #20]
	*ptr++ = (BYTE)val;
 8006f24:	755a      	strb	r2, [r3, #21]
	*ptr++ = (BYTE)val; val >>= 8;
 8006f26:	22ff      	movs	r2, #255	; 0xff
 8006f28:	759a      	strb	r2, [r3, #22]
	*ptr++ = (BYTE)val;
 8006f2a:	75da      	strb	r2, [r3, #23]
	*ptr++ = (BYTE)val; val >>= 8;
 8006f2c:	22ff      	movs	r2, #255	; 0xff
 8006f2e:	761a      	strb	r2, [r3, #24]
	*ptr++ = (BYTE)val;
 8006f30:	765a      	strb	r2, [r3, #25]
	*ptr++ = (BYTE)val; val >>= 8;
 8006f32:	22ff      	movs	r2, #255	; 0xff
 8006f34:	771a      	strb	r2, [r3, #28]
	*ptr++ = (BYTE)val;
 8006f36:	775a      	strb	r2, [r3, #29]
	*ptr++ = (BYTE)val; val >>= 8;
 8006f38:	22ff      	movs	r2, #255	; 0xff
 8006f3a:	779a      	strb	r2, [r3, #30]
	*ptr++ = (BYTE)val;
 8006f3c:	77da      	strb	r2, [r3, #31]
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8006f3e:	f045 0540 	orr.w	r5, r5, #64	; 0x40
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8006f42:	701d      	strb	r5, [r3, #0]
				fs->wflag = 1;
 8006f44:	f04f 0301 	mov.w	r3, #1
				res = dir_next(dp, 0);	/* Next entry */
 8006f48:	4650      	mov	r0, sl
				fs->wflag = 1;
 8006f4a:	70e3      	strb	r3, [r4, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8006f4c:	f7fe ffca 	bl	8005ee4 <dir_next.constprop.11>
			} while (res == FR_OK && --nent);
 8006f50:	2800      	cmp	r0, #0
 8006f52:	f040 80b5 	bne.w	80070c0 <dir_register+0xad4>
 8006f56:	3e01      	subs	r6, #1
 8006f58:	d18f      	bne.n	8006e7a <dir_register+0x88e>
 8006f5a:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8006f5e:	e5d3      	b.n	8006b08 <dir_register+0x51c>
 8006f60:	6a23      	ldr	r3, [r4, #32]
 8006f62:	7860      	ldrb	r0, [r4, #1]
					wsect += fs->fsize;
 8006f64:	441d      	add	r5, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006f66:	3f01      	subs	r7, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 8006f68:	462a      	mov	r2, r5
 8006f6a:	2301      	movs	r3, #1
 8006f6c:	4641      	mov	r1, r8
 8006f6e:	f7fd fd73 	bl	8004a58 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006f72:	2f01      	cmp	r7, #1
 8006f74:	d1f4      	bne.n	8006f60 <dir_register+0x974>
 8006f76:	7860      	ldrb	r0, [r4, #1]
 8006f78:	e799      	b.n	8006eae <dir_register+0x8c2>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8006f7a:	f64f 7cff 	movw	ip, #65535	; 0xffff
 8006f7e:	4561      	cmp	r1, ip
 8006f80:	d0b9      	beq.n	8006ef6 <dir_register+0x90a>
 8006f82:	1c51      	adds	r1, r2, #1
 8006f84:	004a      	lsls	r2, r1, #1
 8006f86:	f830 1011 	ldrh.w	r1, [r0, r1, lsl #1]
	*ptr++ = (BYTE)val; val >>= 8;
 8006f8a:	70d9      	strb	r1, [r3, #3]
 8006f8c:	ea4f 2e11 	mov.w	lr, r1, lsr #8
	*ptr++ = (BYTE)val;
 8006f90:	f883 e004 	strb.w	lr, [r3, #4]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8006f94:	2900      	cmp	r1, #0
 8006f96:	d0b1      	beq.n	8006efc <dir_register+0x910>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8006f98:	4561      	cmp	r1, ip
 8006f9a:	d0af      	beq.n	8006efc <dir_register+0x910>
 8006f9c:	4402      	add	r2, r0
 8006f9e:	8851      	ldrh	r1, [r2, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8006fa0:	7159      	strb	r1, [r3, #5]
 8006fa2:	ea4f 2e11 	mov.w	lr, r1, lsr #8
	*ptr++ = (BYTE)val;
 8006fa6:	f883 e006 	strb.w	lr, [r3, #6]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8006faa:	2900      	cmp	r1, #0
 8006fac:	d0a9      	beq.n	8006f02 <dir_register+0x916>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8006fae:	4561      	cmp	r1, ip
 8006fb0:	d0a7      	beq.n	8006f02 <dir_register+0x916>
 8006fb2:	8891      	ldrh	r1, [r2, #4]
	*ptr++ = (BYTE)val; val >>= 8;
 8006fb4:	71d9      	strb	r1, [r3, #7]
 8006fb6:	ea4f 2e11 	mov.w	lr, r1, lsr #8
	*ptr++ = (BYTE)val;
 8006fba:	f883 e008 	strb.w	lr, [r3, #8]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8006fbe:	2900      	cmp	r1, #0
 8006fc0:	d0a2      	beq.n	8006f08 <dir_register+0x91c>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8006fc2:	4561      	cmp	r1, ip
 8006fc4:	d0a0      	beq.n	8006f08 <dir_register+0x91c>
 8006fc6:	88d1      	ldrh	r1, [r2, #6]
	*ptr++ = (BYTE)val; val >>= 8;
 8006fc8:	7259      	strb	r1, [r3, #9]
 8006fca:	ea4f 2e11 	mov.w	lr, r1, lsr #8
	*ptr++ = (BYTE)val;
 8006fce:	f883 e00a 	strb.w	lr, [r3, #10]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8006fd2:	2900      	cmp	r1, #0
 8006fd4:	d09b      	beq.n	8006f0e <dir_register+0x922>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8006fd6:	4561      	cmp	r1, ip
 8006fd8:	d099      	beq.n	8006f0e <dir_register+0x922>
 8006fda:	f8b2 c008 	ldrh.w	ip, [r2, #8]
	*ptr++ = (BYTE)val; val >>= 8;
 8006fde:	f883 c00e 	strb.w	ip, [r3, #14]
 8006fe2:	ea4f 211c 	mov.w	r1, ip, lsr #8
	*ptr++ = (BYTE)val;
 8006fe6:	73d9      	strb	r1, [r3, #15]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8006fe8:	f1bc 0f00 	cmp.w	ip, #0
 8006fec:	d092      	beq.n	8006f14 <dir_register+0x928>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8006fee:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006ff2:	458c      	cmp	ip, r1
 8006ff4:	d08e      	beq.n	8006f14 <dir_register+0x928>
 8006ff6:	f8b2 c00a 	ldrh.w	ip, [r2, #10]
	*ptr++ = (BYTE)val; val >>= 8;
 8006ffa:	f883 c010 	strb.w	ip, [r3, #16]
 8006ffe:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
	*ptr++ = (BYTE)val;
 8007002:	f883 e011 	strb.w	lr, [r3, #17]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8007006:	f1bc 0f00 	cmp.w	ip, #0
 800700a:	d086      	beq.n	8006f1a <dir_register+0x92e>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800700c:	458c      	cmp	ip, r1
 800700e:	d084      	beq.n	8006f1a <dir_register+0x92e>
 8007010:	f8b2 c00c 	ldrh.w	ip, [r2, #12]
	*ptr++ = (BYTE)val; val >>= 8;
 8007014:	f883 c012 	strb.w	ip, [r3, #18]
 8007018:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
	*ptr++ = (BYTE)val;
 800701c:	f883 e013 	strb.w	lr, [r3, #19]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8007020:	f1bc 0f00 	cmp.w	ip, #0
 8007024:	f43f af7c 	beq.w	8006f20 <dir_register+0x934>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8007028:	458c      	cmp	ip, r1
 800702a:	f43f af79 	beq.w	8006f20 <dir_register+0x934>
 800702e:	f8b2 c00e 	ldrh.w	ip, [r2, #14]
	*ptr++ = (BYTE)val; val >>= 8;
 8007032:	f883 c014 	strb.w	ip, [r3, #20]
 8007036:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
	*ptr++ = (BYTE)val;
 800703a:	f883 e015 	strb.w	lr, [r3, #21]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800703e:	f1bc 0f00 	cmp.w	ip, #0
 8007042:	f43f af70 	beq.w	8006f26 <dir_register+0x93a>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8007046:	458c      	cmp	ip, r1
 8007048:	f43f af6d 	beq.w	8006f26 <dir_register+0x93a>
 800704c:	f8b2 c010 	ldrh.w	ip, [r2, #16]
	*ptr++ = (BYTE)val; val >>= 8;
 8007050:	f883 c016 	strb.w	ip, [r3, #22]
 8007054:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
	*ptr++ = (BYTE)val;
 8007058:	f883 e017 	strb.w	lr, [r3, #23]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800705c:	f1bc 0f00 	cmp.w	ip, #0
 8007060:	f43f af64 	beq.w	8006f2c <dir_register+0x940>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8007064:	458c      	cmp	ip, r1
 8007066:	f43f af61 	beq.w	8006f2c <dir_register+0x940>
 800706a:	8a51      	ldrh	r1, [r2, #18]
	*ptr++ = (BYTE)val; val >>= 8;
 800706c:	7619      	strb	r1, [r3, #24]
 800706e:	ea4f 2c11 	mov.w	ip, r1, lsr #8
	*ptr++ = (BYTE)val;
 8007072:	f883 c019 	strb.w	ip, [r3, #25]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8007076:	2900      	cmp	r1, #0
 8007078:	f43f af5b 	beq.w	8006f32 <dir_register+0x946>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800707c:	f64f 7cff 	movw	ip, #65535	; 0xffff
 8007080:	4561      	cmp	r1, ip
 8007082:	f43f af56 	beq.w	8006f32 <dir_register+0x946>
 8007086:	8a91      	ldrh	r1, [r2, #20]
	*ptr++ = (BYTE)val; val >>= 8;
 8007088:	7719      	strb	r1, [r3, #28]
 800708a:	ea4f 2e11 	mov.w	lr, r1, lsr #8
	*ptr++ = (BYTE)val;
 800708e:	f883 e01d 	strb.w	lr, [r3, #29]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8007092:	2900      	cmp	r1, #0
 8007094:	f43f af50 	beq.w	8006f38 <dir_register+0x94c>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8007098:	4561      	cmp	r1, ip
 800709a:	f43f af4d 	beq.w	8006f38 <dir_register+0x94c>
 800709e:	8ad2      	ldrh	r2, [r2, #22]
	*ptr++ = (BYTE)val; val >>= 8;
 80070a0:	779a      	strb	r2, [r3, #30]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 80070a2:	1e51      	subs	r1, r2, #1
 80070a4:	b289      	uxth	r1, r1
 80070a6:	f64f 7cfd 	movw	ip, #65533	; 0xfffd
	*ptr++ = (BYTE)val; val >>= 8;
 80070aa:	0a12      	lsrs	r2, r2, #8
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 80070ac:	4561      	cmp	r1, ip
	*ptr++ = (BYTE)val;
 80070ae:	77da      	strb	r2, [r3, #31]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 80070b0:	f63f af45 	bhi.w	8006f3e <dir_register+0x952>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 80070b4:	19c2      	adds	r2, r0, r7
 80070b6:	8b52      	ldrh	r2, [r2, #26]
 80070b8:	2a00      	cmp	r2, #0
 80070ba:	f43f af40 	beq.w	8006f3e <dir_register+0x952>
 80070be:	e740      	b.n	8006f42 <dir_register+0x956>
 80070c0:	9001      	str	r0, [sp, #4]
 80070c2:	f7ff bb07 	b.w	80066d4 <dir_register+0xe8>
			*d++ = *s++;
 80070c6:	f89a 2024 	ldrb.w	r2, [sl, #36]	; 0x24
 80070ca:	701a      	strb	r2, [r3, #0]
 80070cc:	f89a 2025 	ldrb.w	r2, [sl, #37]	; 0x25
 80070d0:	705a      	strb	r2, [r3, #1]
 80070d2:	f89a 2026 	ldrb.w	r2, [sl, #38]	; 0x26
 80070d6:	709a      	strb	r2, [r3, #2]
 80070d8:	f89a 2027 	ldrb.w	r2, [sl, #39]	; 0x27
 80070dc:	70da      	strb	r2, [r3, #3]
 80070de:	f89a 2028 	ldrb.w	r2, [sl, #40]	; 0x28
 80070e2:	711a      	strb	r2, [r3, #4]
 80070e4:	f89a 2029 	ldrb.w	r2, [sl, #41]	; 0x29
 80070e8:	715a      	strb	r2, [r3, #5]
 80070ea:	f89a 202a 	ldrb.w	r2, [sl, #42]	; 0x2a
 80070ee:	719a      	strb	r2, [r3, #6]
 80070f0:	f89a 202b 	ldrb.w	r2, [sl, #43]	; 0x2b
 80070f4:	71da      	strb	r2, [r3, #7]
 80070f6:	e639      	b.n	8006d6c <dir_register+0x780>
 80070f8:	1e82      	subs	r2, r0, #2
 80070fa:	f104 0638 	add.w	r6, r4, #56	; 0x38
 80070fe:	9207      	str	r2, [sp, #28]
 8007100:	4611      	mov	r1, r2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8007102:	3b02      	subs	r3, #2
 8007104:	4299      	cmp	r1, r3
				dp->clust = clst;		/* Initialize data for new cluster */
 8007106:	9a05      	ldr	r2, [sp, #20]
	return clst * fs->csize + fs->database;
 8007108:	bf38      	it	cc
 800710a:	6b23      	ldrcc	r3, [r4, #48]	; 0x30
				dp->clust = clst;		/* Initialize data for new cluster */
 800710c:	f8ca 2018 	str.w	r2, [sl, #24]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8007110:	460a      	mov	r2, r1
	return clst * fs->csize + fs->database;
 8007112:	bf38      	it	cc
 8007114:	8962      	ldrhcc	r2, [r4, #10]
 8007116:	f8d7 9034 	ldr.w	r9, [r7, #52]	; 0x34
 800711a:	bf34      	ite	cc
 800711c:	fb01 3302 	mlacc	r3, r1, r2, r3
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8007120:	2300      	movcs	r3, #0
				dp->sect = clust2sect(fs, clst);
 8007122:	f8ca 301c 	str.w	r3, [sl, #28]
 8007126:	e472      	b.n	8006a0e <dir_register+0x422>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007128:	9906      	ldr	r1, [sp, #24]
 800712a:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800712c:	8963      	ldrh	r3, [r4, #10]
 800712e:	3101      	adds	r1, #1
 8007130:	3201      	adds	r2, #1
 8007132:	4299      	cmp	r1, r3
 8007134:	9106      	str	r1, [sp, #24]
 8007136:	6362      	str	r2, [r4, #52]	; 0x34
 8007138:	4691      	mov	r9, r2
 800713a:	f4ff adcc 	bcc.w	8006cd6 <dir_register+0x6ea>
 800713e:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 8007142:	69e3      	ldr	r3, [r4, #28]
					fs->winsect -= n;							/* Restore window offset */
 8007144:	9906      	ldr	r1, [sp, #24]
 8007146:	1a52      	subs	r2, r2, r1
 8007148:	6362      	str	r2, [r4, #52]	; 0x34
 800714a:	9907      	ldr	r1, [sp, #28]
 800714c:	e7d9      	b.n	8007102 <dir_register+0xb16>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800714e:	2302      	movs	r3, #2
 8007150:	9301      	str	r3, [sp, #4]
 8007152:	f7ff babf 	b.w	80066d4 <dir_register+0xe8>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007156:	9206      	str	r2, [sp, #24]
 8007158:	464a      	mov	r2, r9
 800715a:	e7f3      	b.n	8007144 <dir_register+0xb58>
	return clst * fs->csize + fs->database;
 800715c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800715e:	9807      	ldr	r0, [sp, #28]
 8007160:	fb02 1900 	mla	r9, r2, r0, r1
 8007164:	e5ae      	b.n	8006cc4 <dir_register+0x6d8>
		wsect = fs->winsect;	/* Current sector number */
 8007166:	f8d4 9034 	ldr.w	r9, [r4, #52]	; 0x34
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800716a:	7860      	ldrb	r0, [r4, #1]
 800716c:	464a      	mov	r2, r9
 800716e:	2301      	movs	r3, #1
 8007170:	4631      	mov	r1, r6
 8007172:	f7fd fc71 	bl	8004a58 <disk_write>
 8007176:	2800      	cmp	r0, #0
 8007178:	f47f ad3c 	bne.w	8006bf4 <dir_register+0x608>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800717c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800717e:	6a22      	ldr	r2, [r4, #32]
			fs->wflag = 0;
 8007180:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8007182:	eba9 0303 	sub.w	r3, r9, r3
 8007186:	4293      	cmp	r3, r2
 8007188:	f4bf ad8b 	bcs.w	8006ca2 <dir_register+0x6b6>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800718c:	78a3      	ldrb	r3, [r4, #2]
 800718e:	9306      	str	r3, [sp, #24]
 8007190:	9b06      	ldr	r3, [sp, #24]
 8007192:	2b01      	cmp	r3, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 8007194:	4631      	mov	r1, r6
 8007196:	f04f 0301 	mov.w	r3, #1
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800719a:	f67f ad82 	bls.w	8006ca2 <dir_register+0x6b6>
					wsect += fs->fsize;
 800719e:	6a22      	ldr	r2, [r4, #32]
					disk_write(fs->drv, fs->win, wsect, 1);
 80071a0:	7860      	ldrb	r0, [r4, #1]
					wsect += fs->fsize;
 80071a2:	4491      	add	r9, r2
					disk_write(fs->drv, fs->win, wsect, 1);
 80071a4:	464a      	mov	r2, r9
 80071a6:	f7fd fc57 	bl	8004a58 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80071aa:	9b06      	ldr	r3, [sp, #24]
 80071ac:	3b01      	subs	r3, #1
 80071ae:	9306      	str	r3, [sp, #24]
 80071b0:	e7ee      	b.n	8007190 <dir_register+0xba4>
 80071b2:	bf00      	nop

080071b4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80071b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (*path) {	/* If the pointer is not a null */
 80071b8:	6807      	ldr	r7, [r0, #0]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80071ba:	2600      	movs	r6, #0
{
 80071bc:	b084      	sub	sp, #16
	*rfs = 0;
 80071be:	600e      	str	r6, [r1, #0]
	if (*path) {	/* If the pointer is not a null */
 80071c0:	2f00      	cmp	r7, #0
 80071c2:	f000 81dc 	beq.w	800757e <find_volume+0x3ca>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80071c6:	f897 c000 	ldrb.w	ip, [r7]
 80071ca:	f1bc 0f1f 	cmp.w	ip, #31
 80071ce:	d90f      	bls.n	80071f0 <find_volume+0x3c>
 80071d0:	f1bc 0f3a 	cmp.w	ip, #58	; 0x3a
 80071d4:	f000 81d3 	beq.w	800757e <find_volume+0x3ca>
 80071d8:	463b      	mov	r3, r7
 80071da:	e003      	b.n	80071e4 <find_volume+0x30>
 80071dc:	2c3a      	cmp	r4, #58	; 0x3a
 80071de:	f000 8118 	beq.w	8007412 <find_volume+0x25e>
 80071e2:	462b      	mov	r3, r5
 80071e4:	785c      	ldrb	r4, [r3, #1]
 80071e6:	2c1f      	cmp	r4, #31
 80071e8:	f103 0501 	add.w	r5, r3, #1
 80071ec:	d8f6      	bhi.n	80071dc <find_volume+0x28>
		vol = 0;		/* Drive 0 */
 80071ee:	2600      	movs	r6, #0
	vol = get_ldnumber(path);
	if (vol < 0) return FR_INVALID_DRIVE;

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80071f0:	4bc0      	ldr	r3, [pc, #768]	; (80074f4 <find_volume+0x340>)
 80071f2:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80071f6:	2c00      	cmp	r4, #0
 80071f8:	f000 811d 	beq.w	8007436 <find_volume+0x282>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80071fc:	600c      	str	r4, [r1, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
	if (fs->fs_type) {					/* If the volume has been mounted */
 80071fe:	7823      	ldrb	r3, [r4, #0]
	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8007200:	f002 05fe 	and.w	r5, r2, #254	; 0xfe
	if (fs->fs_type) {					/* If the volume has been mounted */
 8007204:	b173      	cbz	r3, 8007224 <find_volume+0x70>
		stat = disk_status(fs->drv);
 8007206:	7860      	ldrb	r0, [r4, #1]
 8007208:	f7fd fbfe 	bl	8004a08 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800720c:	07c7      	lsls	r7, r0, #31
 800720e:	d409      	bmi.n	8007224 <find_volume+0x70>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8007210:	2d00      	cmp	r5, #0
 8007212:	f000 81b8 	beq.w	8007586 <find_volume+0x3d2>
 8007216:	f010 0004 	ands.w	r0, r0, #4
 800721a:	f040 8119 	bne.w	8007450 <find_volume+0x29c>
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
#endif
	return FR_OK;
}
 800721e:	b004      	add	sp, #16
 8007220:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8007224:	b2f0      	uxtb	r0, r6
	fs->fs_type = 0;					/* Clear the file system object */
 8007226:	2300      	movs	r3, #0
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8007228:	7060      	strb	r0, [r4, #1]
	fs->fs_type = 0;					/* Clear the file system object */
 800722a:	7023      	strb	r3, [r4, #0]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800722c:	f7fd fbf6 	bl	8004a1c <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8007230:	07c6      	lsls	r6, r0, #31
 8007232:	f100 8104 	bmi.w	800743e <find_volume+0x28a>
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8007236:	b115      	cbz	r5, 800723e <find_volume+0x8a>
 8007238:	0745      	lsls	r5, r0, #29
 800723a:	f100 8109 	bmi.w	8007450 <find_volume+0x29c>
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800723e:	2200      	movs	r2, #0
 8007240:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8007244:	f104 0638 	add.w	r6, r4, #56	; 0x38
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8007248:	70e2      	strb	r2, [r4, #3]
 800724a:	6365      	str	r5, [r4, #52]	; 0x34
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800724c:	4631      	mov	r1, r6
 800724e:	2301      	movs	r3, #1
 8007250:	7860      	ldrb	r0, [r4, #1]
 8007252:	f7fd fbf3 	bl	8004a3c <disk_read>
 8007256:	2800      	cmp	r0, #0
 8007258:	f040 80f5 	bne.w	8007446 <find_volume+0x292>
	rv = rv << 8 | ptr[0];
 800725c:	f894 2237 	ldrb.w	r2, [r4, #567]	; 0x237
 8007260:	f894 3236 	ldrb.w	r3, [r4, #566]	; 0x236
			fs->winsect = sector;
 8007264:	6360      	str	r0, [r4, #52]	; 0x34
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8007266:	f64a 2155 	movw	r1, #43605	; 0xaa55
	rv = rv << 8 | ptr[0];
 800726a:	ea43 2002 	orr.w	r0, r3, r2, lsl #8
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800726e:	4288      	cmp	r0, r1
 8007270:	f040 8181 	bne.w	8007576 <find_volume+0x3c2>
	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8007274:	f894 7038 	ldrb.w	r7, [r4, #56]	; 0x38
 8007278:	2fe9      	cmp	r7, #233	; 0xe9
 800727a:	d006      	beq.n	800728a <find_volume+0xd6>
 800727c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800727e:	489e      	ldr	r0, [pc, #632]	; (80074f8 <find_volume+0x344>)
 8007280:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8007284:	4281      	cmp	r1, r0
 8007286:	f040 80e7 	bne.w	8007458 <find_volume+0x2a4>
	rv = rv << 8 | ptr[2];
 800728a:	f8b4 5070 	ldrh.w	r5, [r4, #112]	; 0x70
	rv = rv << 8 | ptr[1];
 800728e:	f894 006f 	ldrb.w	r0, [r4, #111]	; 0x6f
	rv = rv << 8 | ptr[0];
 8007292:	f894 106e 	ldrb.w	r1, [r4, #110]	; 0x6e
	rv = rv << 8 | ptr[1];
 8007296:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
	rv = rv << 8 | ptr[0];
 800729a:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800729e:	4897      	ldr	r0, [pc, #604]	; (80074fc <find_volume+0x348>)
 80072a0:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80072a4:	4281      	cmp	r1, r0
 80072a6:	d00d      	beq.n	80072c4 <find_volume+0x110>
	rv = rv << 8 | ptr[2];
 80072a8:	f8b4 508c 	ldrh.w	r5, [r4, #140]	; 0x8c
	rv = rv << 8 | ptr[1];
 80072ac:	f894 008b 	ldrb.w	r0, [r4, #139]	; 0x8b
	rv = rv << 8 | ptr[0];
 80072b0:	f894 108a 	ldrb.w	r1, [r4, #138]	; 0x8a
	rv = rv << 8 | ptr[1];
 80072b4:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80072b8:	4d91      	ldr	r5, [pc, #580]	; (8007500 <find_volume+0x34c>)
	rv = rv << 8 | ptr[0];
 80072ba:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80072be:	42a9      	cmp	r1, r5
 80072c0:	f040 80ca 	bne.w	8007458 <find_volume+0x2a4>
	bsect = 0;
 80072c4:	2500      	movs	r5, #0
	rv = rv << 8 | ptr[0];
 80072c6:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
 80072ca:	f894 1043 	ldrb.w	r1, [r4, #67]	; 0x43
 80072ce:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80072d2:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80072d6:	f040 814e 	bne.w	8007576 <find_volume+0x3c2>
	rv = rv << 8 | ptr[0];
 80072da:	f894 004f 	ldrb.w	r0, [r4, #79]	; 0x4f
 80072de:	f894 104e 	ldrb.w	r1, [r4, #78]	; 0x4e
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80072e2:	ea51 2100 	orrs.w	r1, r1, r0, lsl #8
 80072e6:	d109      	bne.n	80072fc <find_volume+0x148>
	rv = rv << 8 | ptr[2];
 80072e8:	f8b4 605e 	ldrh.w	r6, [r4, #94]	; 0x5e
	rv = rv << 8 | ptr[1];
 80072ec:	f894 105d 	ldrb.w	r1, [r4, #93]	; 0x5d
	rv = rv << 8 | ptr[0];
 80072f0:	f894 005c 	ldrb.w	r0, [r4, #92]	; 0x5c
	rv = rv << 8 | ptr[1];
 80072f4:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
	rv = rv << 8 | ptr[0];
 80072f8:	ea40 2101 	orr.w	r1, r0, r1, lsl #8
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80072fc:	f894 6048 	ldrb.w	r6, [r4, #72]	; 0x48
		fs->fsize = fasize;
 8007300:	6221      	str	r1, [r4, #32]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8007302:	1e70      	subs	r0, r6, #1
 8007304:	2801      	cmp	r0, #1
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8007306:	70a6      	strb	r6, [r4, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8007308:	f200 8135 	bhi.w	8007576 <find_volume+0x3c2>
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800730c:	f894 c045 	ldrb.w	ip, [r4, #69]	; 0x45
 8007310:	fa1f f08c 	uxth.w	r0, ip
 8007314:	8160      	strh	r0, [r4, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8007316:	2800      	cmp	r0, #0
 8007318:	f000 812d 	beq.w	8007576 <find_volume+0x3c2>
 800731c:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8007320:	ea10 0f0c 	tst.w	r0, ip
 8007324:	f040 8127 	bne.w	8007576 <find_volume+0x3c2>
	rv = rv << 8 | ptr[0];
 8007328:	f894 004a 	ldrb.w	r0, [r4, #74]	; 0x4a
 800732c:	f894 7049 	ldrb.w	r7, [r4, #73]	; 0x49
 8007330:	ea47 2700 	orr.w	r7, r7, r0, lsl #8
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8007334:	0738      	lsls	r0, r7, #28
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8007336:	8127      	strh	r7, [r4, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8007338:	f040 811d 	bne.w	8007576 <find_volume+0x3c2>
	rv = rv << 8 | ptr[0];
 800733c:	f894 e04c 	ldrb.w	lr, [r4, #76]	; 0x4c
 8007340:	f894 004b 	ldrb.w	r0, [r4, #75]	; 0x4b
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8007344:	ea50 200e 	orrs.w	r0, r0, lr, lsl #8
 8007348:	d109      	bne.n	800735e <find_volume+0x1aa>
	rv = rv << 8 | ptr[2];
 800734a:	f8b4 805a 	ldrh.w	r8, [r4, #90]	; 0x5a
	rv = rv << 8 | ptr[1];
 800734e:	f894 0059 	ldrb.w	r0, [r4, #89]	; 0x59
	rv = rv << 8 | ptr[0];
 8007352:	f894 e058 	ldrb.w	lr, [r4, #88]	; 0x58
	rv = rv << 8 | ptr[1];
 8007356:	ea40 2008 	orr.w	r0, r0, r8, lsl #8
	rv = rv << 8 | ptr[0];
 800735a:	ea4e 2000 	orr.w	r0, lr, r0, lsl #8
	rv = rv << 8 | ptr[0];
 800735e:	f894 e047 	ldrb.w	lr, [r4, #71]	; 0x47
 8007362:	f894 8046 	ldrb.w	r8, [r4, #70]	; 0x46
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8007366:	ea58 280e 	orrs.w	r8, r8, lr, lsl #8
 800736a:	f000 8104 	beq.w	8007576 <find_volume+0x3c2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800736e:	fb01 fe06 	mul.w	lr, r1, r6
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8007372:	eb08 1617 	add.w	r6, r8, r7, lsr #4
 8007376:	4476      	add	r6, lr
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8007378:	42b0      	cmp	r0, r6
 800737a:	f0c0 80fc 	bcc.w	8007576 <find_volume+0x3c2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800737e:	1b80      	subs	r0, r0, r6
 8007380:	fbb0 f0fc 	udiv	r0, r0, ip
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8007384:	2800      	cmp	r0, #0
 8007386:	f000 80f6 	beq.w	8007576 <find_volume+0x3c2>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800738a:	f64f 7cf5 	movw	ip, #65525	; 0xfff5
 800738e:	4560      	cmp	r0, ip
 8007390:	f200 81e0 	bhi.w	8007754 <find_volume+0x5a0>
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8007394:	f640 7cf5 	movw	ip, #4085	; 0xff5
 8007398:	4560      	cmp	r0, ip
 800739a:	eb08 0205 	add.w	r2, r8, r5
 800739e:	442e      	add	r6, r5
 80073a0:	f100 0302 	add.w	r3, r0, #2
 80073a4:	f200 820b 	bhi.w	80077be <find_volume+0x60a>
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80073a8:	61e3      	str	r3, [r4, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80073aa:	e9c4 5209 	strd	r5, r2, [r4, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 80073ae:	6326      	str	r6, [r4, #48]	; 0x30
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80073b0:	2f00      	cmp	r7, #0
 80073b2:	f000 80e0 	beq.w	8007576 <find_volume+0x3c2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80073b6:	4472      	add	r2, lr
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80073b8:	eb03 0043 	add.w	r0, r3, r3, lsl #1
 80073bc:	f003 0301 	and.w	r3, r3, #1
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80073c0:	62e2      	str	r2, [r4, #44]	; 0x2c
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80073c2:	eb03 0350 	add.w	r3, r3, r0, lsr #1
 80073c6:	2201      	movs	r2, #1
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80073c8:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80073cc:	ebb1 2f53 	cmp.w	r1, r3, lsr #9
 80073d0:	f0c0 80d1 	bcc.w	8007576 <find_volume+0x3c2>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80073d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80073d8:	e9c4 3304 	strd	r3, r3, [r4, #16]
		fs->fsi_flag = 0x80;
 80073dc:	2180      	movs	r1, #128	; 0x80
 80073de:	7121      	strb	r1, [r4, #4]
	fs->id = ++Fsid;		/* File system mount ID */
 80073e0:	4d48      	ldr	r5, [pc, #288]	; (8007504 <find_volume+0x350>)
		if (Files[i].fs == fs) Files[i].fs = 0;
 80073e2:	4949      	ldr	r1, [pc, #292]	; (8007508 <find_volume+0x354>)
	fs->id = ++Fsid;		/* File system mount ID */
 80073e4:	882b      	ldrh	r3, [r5, #0]
		if (Files[i].fs == fs) Files[i].fs = 0;
 80073e6:	6808      	ldr	r0, [r1, #0]
	fs->fs_type = fmt;		/* FAT sub-type */
 80073e8:	7022      	strb	r2, [r4, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80073ea:	3301      	adds	r3, #1
 80073ec:	b29b      	uxth	r3, r3
 80073ee:	802b      	strh	r3, [r5, #0]
 80073f0:	80e3      	strh	r3, [r4, #6]
		if (Files[i].fs == fs) Files[i].fs = 0;
 80073f2:	690b      	ldr	r3, [r1, #16]
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 80073f4:	4e45      	ldr	r6, [pc, #276]	; (800750c <find_volume+0x358>)
 80073f6:	60e6      	str	r6, [r4, #12]
		if (Files[i].fs == fs) Files[i].fs = 0;
 80073f8:	42a0      	cmp	r0, r4
	fs->cdir = 0;			/* Initialize current directory */
 80073fa:	f04f 0200 	mov.w	r2, #0
		if (Files[i].fs == fs) Files[i].fs = 0;
 80073fe:	bf08      	it	eq
 8007400:	600a      	streq	r2, [r1, #0]
 8007402:	429c      	cmp	r4, r3
	fs->cdir = 0;			/* Initialize current directory */
 8007404:	61a2      	str	r2, [r4, #24]
		if (Files[i].fs == fs) Files[i].fs = 0;
 8007406:	f04f 0000 	mov.w	r0, #0
 800740a:	f47f af08 	bne.w	800721e <find_volume+0x6a>
 800740e:	6108      	str	r0, [r1, #16]
 8007410:	e705      	b.n	800721e <find_volume+0x6a>
			i = *tp++ - '0';
 8007412:	3701      	adds	r7, #1
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8007414:	42bd      	cmp	r5, r7
			i = *tp++ - '0';
 8007416:	f1ac 0630 	sub.w	r6, ip, #48	; 0x30
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800741a:	f040 80b0 	bne.w	800757e <find_volume+0x3ca>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800741e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8007422:	f040 80ac 	bne.w	800757e <find_volume+0x3ca>
					*path = ++tt;
 8007426:	3302      	adds	r3, #2
 8007428:	6003      	str	r3, [r0, #0]
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800742a:	4b32      	ldr	r3, [pc, #200]	; (80074f4 <find_volume+0x340>)
 800742c:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8007430:	2c00      	cmp	r4, #0
 8007432:	f47f aee3 	bne.w	80071fc <find_volume+0x48>
 8007436:	200c      	movs	r0, #12
}
 8007438:	b004      	add	sp, #16
 800743a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800743e:	2003      	movs	r0, #3
}
 8007440:	b004      	add	sp, #16
 8007442:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8007446:	2001      	movs	r0, #1
			fs->winsect = sector;
 8007448:	6365      	str	r5, [r4, #52]	; 0x34
}
 800744a:	b004      	add	sp, #16
 800744c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				return FR_WRITE_PROTECTED;
 8007450:	200a      	movs	r0, #10
}
 8007452:	b004      	add	sp, #16
 8007454:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8007458:	f894 51fa 	ldrb.w	r5, [r4, #506]	; 0x1fa
 800745c:	b14d      	cbz	r5, 8007472 <find_volume+0x2be>
	rv = rv << 8 | ptr[2];
 800745e:	f8b4 0200 	ldrh.w	r0, [r4, #512]	; 0x200
	rv = rv << 8 | ptr[1];
 8007462:	f894 11ff 	ldrb.w	r1, [r4, #511]	; 0x1ff
	rv = rv << 8 | ptr[0];
 8007466:	f894 51fe 	ldrb.w	r5, [r4, #510]	; 0x1fe
	rv = rv << 8 | ptr[1];
 800746a:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
	rv = rv << 8 | ptr[0];
 800746e:	ea45 2501 	orr.w	r5, r5, r1, lsl #8
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8007472:	f894 020a 	ldrb.w	r0, [r4, #522]	; 0x20a
 8007476:	b148      	cbz	r0, 800748c <find_volume+0x2d8>
	rv = rv << 8 | ptr[2];
 8007478:	f8b4 c210 	ldrh.w	ip, [r4, #528]	; 0x210
	rv = rv << 8 | ptr[1];
 800747c:	f894 020f 	ldrb.w	r0, [r4, #527]	; 0x20f
	rv = rv << 8 | ptr[0];
 8007480:	f894 120e 	ldrb.w	r1, [r4, #526]	; 0x20e
	rv = rv << 8 | ptr[1];
 8007484:	ea40 200c 	orr.w	r0, r0, ip, lsl #8
	rv = rv << 8 | ptr[0];
 8007488:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800748c:	f894 121a 	ldrb.w	r1, [r4, #538]	; 0x21a
 8007490:	9001      	str	r0, [sp, #4]
 8007492:	2900      	cmp	r1, #0
 8007494:	d179      	bne.n	800758a <find_volume+0x3d6>
 8007496:	4608      	mov	r0, r1
 8007498:	f894 122a 	ldrb.w	r1, [r4, #554]	; 0x22a
 800749c:	9002      	str	r0, [sp, #8]
 800749e:	b149      	cbz	r1, 80074b4 <find_volume+0x300>
	rv = rv << 8 | ptr[2];
 80074a0:	f8b4 c230 	ldrh.w	ip, [r4, #560]	; 0x230
	rv = rv << 8 | ptr[1];
 80074a4:	f894 022f 	ldrb.w	r0, [r4, #559]	; 0x22f
	rv = rv << 8 | ptr[0];
 80074a8:	f894 122e 	ldrb.w	r1, [r4, #558]	; 0x22e
	rv = rv << 8 | ptr[1];
 80074ac:	ea40 200c 	orr.w	r0, r0, ip, lsl #8
	rv = rv << 8 | ptr[0];
 80074b0:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80074b4:	9103      	str	r1, [sp, #12]
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80074b6:	2d00      	cmp	r5, #0
 80074b8:	d172      	bne.n	80075a0 <find_volume+0x3ec>
			bsect = br[i];
 80074ba:	9d01      	ldr	r5, [sp, #4]
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80074bc:	2d00      	cmp	r5, #0
 80074be:	f040 8084 	bne.w	80075ca <find_volume+0x416>
			bsect = br[i];
 80074c2:	9d02      	ldr	r5, [sp, #8]
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80074c4:	2d00      	cmp	r5, #0
 80074c6:	f040 80c6 	bne.w	8007656 <find_volume+0x4a2>
			bsect = br[i];
 80074ca:	9d03      	ldr	r5, [sp, #12]
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80074cc:	2d00      	cmp	r5, #0
 80074ce:	d052      	beq.n	8007576 <find_volume+0x3c2>
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80074d0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80074d4:	2300      	movs	r3, #0
	if (sector != fs->winsect) {	/* Window offset changed? */
 80074d6:	42bd      	cmp	r5, r7
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80074d8:	70e3      	strb	r3, [r4, #3]
 80074da:	6367      	str	r7, [r4, #52]	; 0x34
	if (sector != fs->winsect) {	/* Window offset changed? */
 80074dc:	d019      	beq.n	8007512 <find_volume+0x35e>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80074de:	4631      	mov	r1, r6
 80074e0:	2301      	movs	r3, #1
 80074e2:	462a      	mov	r2, r5
 80074e4:	7860      	ldrb	r0, [r4, #1]
 80074e6:	f7fd faa9 	bl	8004a3c <disk_read>
 80074ea:	b188      	cbz	r0, 8007510 <find_volume+0x35c>
			fs->winsect = sector;
 80074ec:	6367      	str	r7, [r4, #52]	; 0x34
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80074ee:	2001      	movs	r0, #1
 80074f0:	e695      	b.n	800721e <find_volume+0x6a>
 80074f2:	bf00      	nop
 80074f4:	20000204 	.word	0x20000204
 80074f8:	009000eb 	.word	0x009000eb
 80074fc:	00544146 	.word	0x00544146
 8007500:	33544146 	.word	0x33544146
 8007504:	20000228 	.word	0x20000228
 8007508:	20000208 	.word	0x20000208
 800750c:	2000022c 	.word	0x2000022c
			fs->winsect = sector;
 8007510:	6365      	str	r5, [r4, #52]	; 0x34
	rv = rv << 8 | ptr[0];
 8007512:	f894 2237 	ldrb.w	r2, [r4, #567]	; 0x237
 8007516:	f894 3236 	ldrb.w	r3, [r4, #566]	; 0x236
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800751a:	f64a 2155 	movw	r1, #43605	; 0xaa55
	rv = rv << 8 | ptr[0];
 800751e:	ea43 2002 	orr.w	r0, r3, r2, lsl #8
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8007522:	4288      	cmp	r0, r1
 8007524:	d127      	bne.n	8007576 <find_volume+0x3c2>
	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8007526:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
 800752a:	29e9      	cmp	r1, #233	; 0xe9
 800752c:	d005      	beq.n	800753a <find_volume+0x386>
 800752e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007530:	48ce      	ldr	r0, [pc, #824]	; (800786c <find_volume+0x6b8>)
 8007532:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8007536:	4281      	cmp	r1, r0
 8007538:	d11d      	bne.n	8007576 <find_volume+0x3c2>
	rv = rv << 8 | ptr[2];
 800753a:	f8b4 6070 	ldrh.w	r6, [r4, #112]	; 0x70
	rv = rv << 8 | ptr[1];
 800753e:	f894 006f 	ldrb.w	r0, [r4, #111]	; 0x6f
	rv = rv << 8 | ptr[0];
 8007542:	f894 106e 	ldrb.w	r1, [r4, #110]	; 0x6e
	rv = rv << 8 | ptr[1];
 8007546:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
	rv = rv << 8 | ptr[0];
 800754a:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800754e:	48c8      	ldr	r0, [pc, #800]	; (8007870 <find_volume+0x6bc>)
 8007550:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8007554:	4281      	cmp	r1, r0
 8007556:	f43f aeb6 	beq.w	80072c6 <find_volume+0x112>
	rv = rv << 8 | ptr[2];
 800755a:	f8b4 608c 	ldrh.w	r6, [r4, #140]	; 0x8c
	rv = rv << 8 | ptr[1];
 800755e:	f894 008b 	ldrb.w	r0, [r4, #139]	; 0x8b
	rv = rv << 8 | ptr[0];
 8007562:	f894 108a 	ldrb.w	r1, [r4, #138]	; 0x8a
	rv = rv << 8 | ptr[1];
 8007566:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800756a:	4ec2      	ldr	r6, [pc, #776]	; (8007874 <find_volume+0x6c0>)
	rv = rv << 8 | ptr[0];
 800756c:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8007570:	42b1      	cmp	r1, r6
 8007572:	f43f aea8 	beq.w	80072c6 <find_volume+0x112>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8007576:	200d      	movs	r0, #13
}
 8007578:	b004      	add	sp, #16
 800757a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (vol < 0) return FR_INVALID_DRIVE;
 800757e:	200b      	movs	r0, #11
}
 8007580:	b004      	add	sp, #16
 8007582:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return FR_OK;				/* The file system object is valid */
 8007586:	4628      	mov	r0, r5
 8007588:	e649      	b.n	800721e <find_volume+0x6a>
	rv = rv << 8 | ptr[2];
 800758a:	f8b4 c220 	ldrh.w	ip, [r4, #544]	; 0x220
	rv = rv << 8 | ptr[1];
 800758e:	f894 021f 	ldrb.w	r0, [r4, #543]	; 0x21f
	rv = rv << 8 | ptr[0];
 8007592:	f894 121e 	ldrb.w	r1, [r4, #542]	; 0x21e
	rv = rv << 8 | ptr[1];
 8007596:	ea40 200c 	orr.w	r0, r0, ip, lsl #8
	rv = rv << 8 | ptr[0];
 800759a:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
 800759e:	e77b      	b.n	8007498 <find_volume+0x2e4>
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80075a0:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80075a4:	2100      	movs	r1, #0
	if (sector != fs->winsect) {	/* Window offset changed? */
 80075a6:	4545      	cmp	r5, r8
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80075a8:	70e1      	strb	r1, [r4, #3]
 80075aa:	f8c4 8034 	str.w	r8, [r4, #52]	; 0x34
	if (sector != fs->winsect) {	/* Window offset changed? */
 80075ae:	f000 80a5 	beq.w	80076fc <find_volume+0x548>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80075b2:	2301      	movs	r3, #1
 80075b4:	462a      	mov	r2, r5
 80075b6:	4631      	mov	r1, r6
 80075b8:	7860      	ldrb	r0, [r4, #1]
 80075ba:	f7fd fa3f 	bl	8004a3c <disk_read>
 80075be:	2800      	cmp	r0, #0
 80075c0:	f000 808e 	beq.w	80076e0 <find_volume+0x52c>
			fs->winsect = sector;
 80075c4:	f8c4 8034 	str.w	r8, [r4, #52]	; 0x34
 80075c8:	e777      	b.n	80074ba <find_volume+0x306>
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80075ca:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80075ce:	2300      	movs	r3, #0
	if (sector != fs->winsect) {	/* Window offset changed? */
 80075d0:	42bd      	cmp	r5, r7
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80075d2:	70e3      	strb	r3, [r4, #3]
 80075d4:	6367      	str	r7, [r4, #52]	; 0x34
	if (sector != fs->winsect) {	/* Window offset changed? */
 80075d6:	d009      	beq.n	80075ec <find_volume+0x438>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80075d8:	2301      	movs	r3, #1
 80075da:	462a      	mov	r2, r5
 80075dc:	4631      	mov	r1, r6
 80075de:	7860      	ldrb	r0, [r4, #1]
 80075e0:	f7fd fa2c 	bl	8004a3c <disk_read>
 80075e4:	2800      	cmp	r0, #0
 80075e6:	f040 80b3 	bne.w	8007750 <find_volume+0x59c>
			fs->winsect = sector;
 80075ea:	6365      	str	r5, [r4, #52]	; 0x34
	rv = rv << 8 | ptr[0];
 80075ec:	f894 2237 	ldrb.w	r2, [r4, #567]	; 0x237
 80075f0:	f894 3236 	ldrb.w	r3, [r4, #566]	; 0x236
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80075f4:	f64a 2155 	movw	r1, #43605	; 0xaa55
	rv = rv << 8 | ptr[0];
 80075f8:	ea43 2002 	orr.w	r0, r3, r2, lsl #8
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80075fc:	4288      	cmp	r0, r1
 80075fe:	f47f af60 	bne.w	80074c2 <find_volume+0x30e>
	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8007602:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
 8007606:	29e9      	cmp	r1, #233	; 0xe9
 8007608:	d006      	beq.n	8007618 <find_volume+0x464>
 800760a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800760c:	4897      	ldr	r0, [pc, #604]	; (800786c <find_volume+0x6b8>)
 800760e:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8007612:	4281      	cmp	r1, r0
 8007614:	f47f af55 	bne.w	80074c2 <find_volume+0x30e>
	rv = rv << 8 | ptr[2];
 8007618:	f8b4 7070 	ldrh.w	r7, [r4, #112]	; 0x70
	rv = rv << 8 | ptr[1];
 800761c:	f894 006f 	ldrb.w	r0, [r4, #111]	; 0x6f
	rv = rv << 8 | ptr[0];
 8007620:	f894 106e 	ldrb.w	r1, [r4, #110]	; 0x6e
	rv = rv << 8 | ptr[1];
 8007624:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
	rv = rv << 8 | ptr[0];
 8007628:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800762c:	4890      	ldr	r0, [pc, #576]	; (8007870 <find_volume+0x6bc>)
 800762e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8007632:	4281      	cmp	r1, r0
 8007634:	f43f ae47 	beq.w	80072c6 <find_volume+0x112>
	rv = rv << 8 | ptr[2];
 8007638:	f8b4 708c 	ldrh.w	r7, [r4, #140]	; 0x8c
	rv = rv << 8 | ptr[1];
 800763c:	f894 008b 	ldrb.w	r0, [r4, #139]	; 0x8b
	rv = rv << 8 | ptr[0];
 8007640:	f894 108a 	ldrb.w	r1, [r4, #138]	; 0x8a
	rv = rv << 8 | ptr[1];
 8007644:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8007648:	4f8a      	ldr	r7, [pc, #552]	; (8007874 <find_volume+0x6c0>)
	rv = rv << 8 | ptr[0];
 800764a:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800764e:	42b9      	cmp	r1, r7
 8007650:	f43f ae39 	beq.w	80072c6 <find_volume+0x112>
 8007654:	e735      	b.n	80074c2 <find_volume+0x30e>
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8007656:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800765a:	2300      	movs	r3, #0
	if (sector != fs->winsect) {	/* Window offset changed? */
 800765c:	42bd      	cmp	r5, r7
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800765e:	70e3      	strb	r3, [r4, #3]
 8007660:	6367      	str	r7, [r4, #52]	; 0x34
	if (sector != fs->winsect) {	/* Window offset changed? */
 8007662:	d008      	beq.n	8007676 <find_volume+0x4c2>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8007664:	2301      	movs	r3, #1
 8007666:	462a      	mov	r2, r5
 8007668:	4631      	mov	r1, r6
 800766a:	7860      	ldrb	r0, [r4, #1]
 800766c:	f7fd f9e6 	bl	8004a3c <disk_read>
 8007670:	2800      	cmp	r0, #0
 8007672:	d16b      	bne.n	800774c <find_volume+0x598>
			fs->winsect = sector;
 8007674:	6365      	str	r5, [r4, #52]	; 0x34
	rv = rv << 8 | ptr[0];
 8007676:	f894 2237 	ldrb.w	r2, [r4, #567]	; 0x237
 800767a:	f894 3236 	ldrb.w	r3, [r4, #566]	; 0x236
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800767e:	f64a 2155 	movw	r1, #43605	; 0xaa55
	rv = rv << 8 | ptr[0];
 8007682:	ea43 2002 	orr.w	r0, r3, r2, lsl #8
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8007686:	4288      	cmp	r0, r1
 8007688:	f47f af1f 	bne.w	80074ca <find_volume+0x316>
	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800768c:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
 8007690:	29e9      	cmp	r1, #233	; 0xe9
 8007692:	d006      	beq.n	80076a2 <find_volume+0x4ee>
 8007694:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007696:	4875      	ldr	r0, [pc, #468]	; (800786c <find_volume+0x6b8>)
 8007698:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 800769c:	4281      	cmp	r1, r0
 800769e:	f47f af14 	bne.w	80074ca <find_volume+0x316>
	rv = rv << 8 | ptr[2];
 80076a2:	f8b4 7070 	ldrh.w	r7, [r4, #112]	; 0x70
	rv = rv << 8 | ptr[1];
 80076a6:	f894 006f 	ldrb.w	r0, [r4, #111]	; 0x6f
	rv = rv << 8 | ptr[0];
 80076aa:	f894 106e 	ldrb.w	r1, [r4, #110]	; 0x6e
	rv = rv << 8 | ptr[1];
 80076ae:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
	rv = rv << 8 | ptr[0];
 80076b2:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80076b6:	486e      	ldr	r0, [pc, #440]	; (8007870 <find_volume+0x6bc>)
 80076b8:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80076bc:	4281      	cmp	r1, r0
 80076be:	f43f ae02 	beq.w	80072c6 <find_volume+0x112>
	rv = rv << 8 | ptr[2];
 80076c2:	f8b4 708c 	ldrh.w	r7, [r4, #140]	; 0x8c
	rv = rv << 8 | ptr[1];
 80076c6:	f894 008b 	ldrb.w	r0, [r4, #139]	; 0x8b
	rv = rv << 8 | ptr[0];
 80076ca:	f894 108a 	ldrb.w	r1, [r4, #138]	; 0x8a
	rv = rv << 8 | ptr[1];
 80076ce:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80076d2:	4f68      	ldr	r7, [pc, #416]	; (8007874 <find_volume+0x6c0>)
	rv = rv << 8 | ptr[0];
 80076d4:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80076d8:	42b9      	cmp	r1, r7
 80076da:	f43f adf4 	beq.w	80072c6 <find_volume+0x112>
 80076de:	e6f4      	b.n	80074ca <find_volume+0x316>
	rv = rv << 8 | ptr[0];
 80076e0:	f894 2237 	ldrb.w	r2, [r4, #567]	; 0x237
 80076e4:	f894 3236 	ldrb.w	r3, [r4, #566]	; 0x236
			fs->winsect = sector;
 80076e8:	6365      	str	r5, [r4, #52]	; 0x34
	rv = rv << 8 | ptr[0];
 80076ea:	ea43 2002 	orr.w	r0, r3, r2, lsl #8
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80076ee:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80076f2:	4288      	cmp	r0, r1
 80076f4:	f47f aee1 	bne.w	80074ba <find_volume+0x306>
 80076f8:	f894 7038 	ldrb.w	r7, [r4, #56]	; 0x38
	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80076fc:	2fe9      	cmp	r7, #233	; 0xe9
 80076fe:	d006      	beq.n	800770e <find_volume+0x55a>
 8007700:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007702:	485a      	ldr	r0, [pc, #360]	; (800786c <find_volume+0x6b8>)
 8007704:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8007708:	4281      	cmp	r1, r0
 800770a:	f47f aed6 	bne.w	80074ba <find_volume+0x306>
	rv = rv << 8 | ptr[2];
 800770e:	f8b4 7070 	ldrh.w	r7, [r4, #112]	; 0x70
	rv = rv << 8 | ptr[1];
 8007712:	f894 006f 	ldrb.w	r0, [r4, #111]	; 0x6f
	rv = rv << 8 | ptr[0];
 8007716:	f894 106e 	ldrb.w	r1, [r4, #110]	; 0x6e
	rv = rv << 8 | ptr[1];
 800771a:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
	rv = rv << 8 | ptr[0];
 800771e:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8007722:	4853      	ldr	r0, [pc, #332]	; (8007870 <find_volume+0x6bc>)
 8007724:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8007728:	4281      	cmp	r1, r0
 800772a:	f43f adcc 	beq.w	80072c6 <find_volume+0x112>
	rv = rv << 8 | ptr[2];
 800772e:	f8b4 708c 	ldrh.w	r7, [r4, #140]	; 0x8c
	rv = rv << 8 | ptr[1];
 8007732:	f894 008b 	ldrb.w	r0, [r4, #139]	; 0x8b
	rv = rv << 8 | ptr[0];
 8007736:	f894 108a 	ldrb.w	r1, [r4, #138]	; 0x8a
	rv = rv << 8 | ptr[1];
 800773a:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800773e:	4f4d      	ldr	r7, [pc, #308]	; (8007874 <find_volume+0x6c0>)
	rv = rv << 8 | ptr[0];
 8007740:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8007744:	42b9      	cmp	r1, r7
 8007746:	f43f adbe 	beq.w	80072c6 <find_volume+0x112>
 800774a:	e6b6      	b.n	80074ba <find_volume+0x306>
			fs->winsect = sector;
 800774c:	6367      	str	r7, [r4, #52]	; 0x34
 800774e:	e6bc      	b.n	80074ca <find_volume+0x316>
 8007750:	6367      	str	r7, [r4, #52]	; 0x34
 8007752:	e6b6      	b.n	80074c2 <find_volume+0x30e>
	rv = rv << 8 | ptr[0];
 8007754:	f894 e063 	ldrb.w	lr, [r4, #99]	; 0x63
 8007758:	f894 c062 	ldrb.w	ip, [r4, #98]	; 0x62
		fs->volbase = bsect;							/* Volume start sector */
 800775c:	6265      	str	r5, [r4, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800775e:	442e      	add	r6, r5
 8007760:	3002      	adds	r0, #2
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8007762:	44a8      	add	r8, r5
		fs->database = bsect + sysect;					/* Data start sector */
 8007764:	6326      	str	r6, [r4, #48]	; 0x30
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8007766:	ea5c 260e 	orrs.w	r6, ip, lr, lsl #8
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800776a:	61e0      	str	r0, [r4, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800776c:	f8c4 8028 	str.w	r8, [r4, #40]	; 0x28
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8007770:	f47f af01 	bne.w	8007576 <find_volume+0x3c2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8007774:	2f00      	cmp	r7, #0
 8007776:	f47f aefe 	bne.w	8007576 <find_volume+0x3c2>
	rv = rv << 8 | ptr[2];
 800777a:	f8b4 c066 	ldrh.w	ip, [r4, #102]	; 0x66
	rv = rv << 8 | ptr[1];
 800777e:	f894 7065 	ldrb.w	r7, [r4, #101]	; 0x65
	rv = rv << 8 | ptr[0];
 8007782:	f894 6064 	ldrb.w	r6, [r4, #100]	; 0x64
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8007786:	0080      	lsls	r0, r0, #2
	rv = rv << 8 | ptr[1];
 8007788:	ea47 270c 	orr.w	r7, r7, ip, lsl #8
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800778c:	f200 10ff 	addw	r0, r0, #511	; 0x1ff
	rv = rv << 8 | ptr[0];
 8007790:	ea46 2607 	orr.w	r6, r6, r7, lsl #8
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8007794:	ebb1 2f50 	cmp.w	r1, r0, lsr #9
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8007798:	62e6      	str	r6, [r4, #44]	; 0x2c
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800779a:	f4ff aeec 	bcc.w	8007576 <find_volume+0x3c2>
	rv = rv << 8 | ptr[0];
 800779e:	f894 0069 	ldrb.w	r0, [r4, #105]	; 0x69
 80077a2:	f894 1068 	ldrb.w	r1, [r4, #104]	; 0x68
 80077a6:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
		fs->fsi_flag = 0x80;
 80077aa:	2680      	movs	r6, #128	; 0x80
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80077ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80077b0:	2901      	cmp	r1, #1
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80077b2:	e9c4 0004 	strd	r0, r0, [r4, #16]
		fs->fsi_flag = 0x80;
 80077b6:	7126      	strb	r6, [r4, #4]
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80077b8:	d00d      	beq.n	80077d6 <find_volume+0x622>
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80077ba:	2203      	movs	r2, #3
 80077bc:	e610      	b.n	80073e0 <find_volume+0x22c>
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80077be:	61e3      	str	r3, [r4, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80077c0:	e9c4 5209 	strd	r5, r2, [r4, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 80077c4:	6326      	str	r6, [r4, #48]	; 0x30
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80077c6:	2f00      	cmp	r7, #0
 80077c8:	f43f aed5 	beq.w	8007576 <find_volume+0x3c2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80077cc:	4472      	add	r2, lr
 80077ce:	62e2      	str	r2, [r4, #44]	; 0x2c
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80077d0:	005b      	lsls	r3, r3, #1
 80077d2:	2202      	movs	r2, #2
 80077d4:	e5f8      	b.n	80073c8 <find_volume+0x214>
	if (sector != fs->winsect) {	/* Window offset changed? */
 80077d6:	6b60      	ldr	r0, [r4, #52]	; 0x34
			&& move_window(fs, bsect + 1) == FR_OK)
 80077d8:	1c69      	adds	r1, r5, #1
	if (sector != fs->winsect) {	/* Window offset changed? */
 80077da:	4281      	cmp	r1, r0
 80077dc:	d13b      	bne.n	8007856 <find_volume+0x6a2>
	rv = rv << 8 | ptr[0];
 80077de:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80077e2:	f64a 2255 	movw	r2, #43605	; 0xaa55
			fs->fsi_flag = 0;
 80077e6:	2100      	movs	r1, #0
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80077e8:	4293      	cmp	r3, r2
			fs->fsi_flag = 0;
 80077ea:	7121      	strb	r1, [r4, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80077ec:	d1e5      	bne.n	80077ba <find_volume+0x606>
	rv = rv << 8 | ptr[2];
 80077ee:	8f60      	ldrh	r0, [r4, #58]	; 0x3a
	rv = rv << 8 | ptr[1];
 80077f0:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
	rv = rv << 8 | ptr[0];
 80077f4:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80077f8:	491f      	ldr	r1, [pc, #124]	; (8007878 <find_volume+0x6c4>)
	rv = rv << 8 | ptr[1];
 80077fa:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	rv = rv << 8 | ptr[0];
 80077fe:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8007802:	428b      	cmp	r3, r1
 8007804:	d1d9      	bne.n	80077ba <find_volume+0x606>
	rv = rv << 8 | ptr[2];
 8007806:	f8b4 021e 	ldrh.w	r0, [r4, #542]	; 0x21e
	rv = rv << 8 | ptr[1];
 800780a:	f894 221d 	ldrb.w	r2, [r4, #541]	; 0x21d
	rv = rv << 8 | ptr[0];
 800780e:	f894 321c 	ldrb.w	r3, [r4, #540]	; 0x21c
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8007812:	f101 51ff 	add.w	r1, r1, #534773760	; 0x1fe00000
 8007816:	f501 5100 	add.w	r1, r1, #8192	; 0x2000
	rv = rv << 8 | ptr[1];
 800781a:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800781e:	3120      	adds	r1, #32
	rv = rv << 8 | ptr[0];
 8007820:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8007824:	428b      	cmp	r3, r1
 8007826:	d1c8      	bne.n	80077ba <find_volume+0x606>
	rv = rv << 8 | ptr[2];
 8007828:	f8b4 6222 	ldrh.w	r6, [r4, #546]	; 0x222
	rv = rv << 8 | ptr[1];
 800782c:	f894 0221 	ldrb.w	r0, [r4, #545]	; 0x221
	rv = rv << 8 | ptr[2];
 8007830:	f8b4 5226 	ldrh.w	r5, [r4, #550]	; 0x226
	rv = rv << 8 | ptr[1];
 8007834:	f894 1225 	ldrb.w	r1, [r4, #549]	; 0x225
	rv = rv << 8 | ptr[0];
 8007838:	f894 2220 	ldrb.w	r2, [r4, #544]	; 0x220
 800783c:	f894 3224 	ldrb.w	r3, [r4, #548]	; 0x224
	rv = rv << 8 | ptr[1];
 8007840:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
 8007844:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
	rv = rv << 8 | ptr[0];
 8007848:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 800784c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8007850:	e9c4 3204 	strd	r3, r2, [r4, #16]
 8007854:	e7b1      	b.n	80077ba <find_volume+0x606>
 8007856:	4620      	mov	r0, r4
 8007858:	f7fd f90c 	bl	8004a74 <move_window.part.5>
			&& move_window(fs, bsect + 1) == FR_OK)
 800785c:	2800      	cmp	r0, #0
 800785e:	d1ac      	bne.n	80077ba <find_volume+0x606>
 8007860:	f894 2237 	ldrb.w	r2, [r4, #567]	; 0x237
 8007864:	f894 3236 	ldrb.w	r3, [r4, #566]	; 0x236
 8007868:	e7b9      	b.n	80077de <find_volume+0x62a>
 800786a:	bf00      	nop
 800786c:	009000eb 	.word	0x009000eb
 8007870:	00544146 	.word	0x00544146
 8007874:	33544146 	.word	0x33544146
 8007878:	41615252 	.word	0x41615252

0800787c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800787c:	b530      	push	{r4, r5, lr}
 800787e:	b083      	sub	sp, #12
 8007880:	e9cd 1000 	strd	r1, r0, [sp]
	if (*path) {	/* If the pointer is not a null */
 8007884:	b379      	cbz	r1, 80078e6 <f_mount+0x6a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8007886:	780c      	ldrb	r4, [r1, #0]
 8007888:	2c1f      	cmp	r4, #31
 800788a:	d909      	bls.n	80078a0 <f_mount+0x24>
 800788c:	2c3a      	cmp	r4, #58	; 0x3a
 800788e:	d02a      	beq.n	80078e6 <f_mount+0x6a>
 8007890:	4608      	mov	r0, r1
 8007892:	e001      	b.n	8007898 <f_mount+0x1c>
 8007894:	2b3a      	cmp	r3, #58	; 0x3a
 8007896:	d01f      	beq.n	80078d8 <f_mount+0x5c>
 8007898:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800789c:	2b1f      	cmp	r3, #31
 800789e:	d8f9      	bhi.n	8007894 <f_mount+0x18>
		vol = 0;		/* Drive 0 */
 80078a0:	2500      	movs	r5, #0


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
	if (vol < 0) return FR_INVALID_DRIVE;
	cfs = FatFs[vol];					/* Pointer to fs object */
 80078a2:	4918      	ldr	r1, [pc, #96]	; (8007904 <f_mount+0x88>)
 80078a4:	f851 3025 	ldr.w	r3, [r1, r5, lsl #2]

	if (cfs) {
 80078a8:	b163      	cbz	r3, 80078c4 <f_mount+0x48>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80078aa:	4817      	ldr	r0, [pc, #92]	; (8007908 <f_mount+0x8c>)
 80078ac:	6804      	ldr	r4, [r0, #0]
 80078ae:	42a3      	cmp	r3, r4
 80078b0:	bf04      	itt	eq
 80078b2:	2400      	moveq	r4, #0
 80078b4:	6004      	streq	r4, [r0, #0]
 80078b6:	6904      	ldr	r4, [r0, #16]
 80078b8:	429c      	cmp	r4, r3
 80078ba:	bf04      	itt	eq
 80078bc:	2400      	moveq	r4, #0
 80078be:	6104      	streq	r4, [r0, #16]
		clear_lock(cfs);
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80078c0:	2000      	movs	r0, #0
 80078c2:	7018      	strb	r0, [r3, #0]
	}

	if (fs) {
 80078c4:	9b01      	ldr	r3, [sp, #4]
 80078c6:	b18b      	cbz	r3, 80078ec <f_mount+0x70>
		fs->fs_type = 0;				/* Clear new fs object */
 80078c8:	2000      	movs	r0, #0
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80078ca:	2a01      	cmp	r2, #1
		fs->fs_type = 0;				/* Clear new fs object */
 80078cc:	7018      	strb	r0, [r3, #0]
	FatFs[vol] = fs;					/* Register new fs object */
 80078ce:	f841 3025 	str.w	r3, [r1, r5, lsl #2]
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80078d2:	d010      	beq.n	80078f6 <f_mount+0x7a>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
	LEAVE_FF(fs, res);
}
 80078d4:	b003      	add	sp, #12
 80078d6:	bd30      	pop	{r4, r5, pc}
			i = *tp++ - '0';
 80078d8:	3101      	adds	r1, #1
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80078da:	4288      	cmp	r0, r1
			i = *tp++ - '0';
 80078dc:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80078e0:	d101      	bne.n	80078e6 <f_mount+0x6a>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80078e2:	2c30      	cmp	r4, #48	; 0x30
 80078e4:	d0dd      	beq.n	80078a2 <f_mount+0x26>
	if (vol < 0) return FR_INVALID_DRIVE;
 80078e6:	200b      	movs	r0, #11
}
 80078e8:	b003      	add	sp, #12
 80078ea:	bd30      	pop	{r4, r5, pc}
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80078ec:	4618      	mov	r0, r3
	FatFs[vol] = fs;					/* Register new fs object */
 80078ee:	f841 3025 	str.w	r3, [r1, r5, lsl #2]
}
 80078f2:	b003      	add	sp, #12
 80078f4:	bd30      	pop	{r4, r5, pc}
	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80078f6:	4602      	mov	r2, r0
 80078f8:	a901      	add	r1, sp, #4
 80078fa:	4668      	mov	r0, sp
 80078fc:	f7ff fc5a 	bl	80071b4 <find_volume>
}
 8007900:	b003      	add	sp, #12
 8007902:	bd30      	pop	{r4, r5, pc}
 8007904:	20000204 	.word	0x20000204
 8007908:	20000208 	.word	0x20000208

0800790c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800790c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007910:	b091      	sub	sp, #68	; 0x44
 8007912:	9101      	str	r1, [sp, #4]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8007914:	2800      	cmp	r0, #0
 8007916:	d03b      	beq.n	8007990 <f_open+0x84>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8007918:	f002 073f 	and.w	r7, r2, #63	; 0x3f
 800791c:	4604      	mov	r4, r0
 800791e:	4615      	mov	r5, r2
	res = find_volume(&path, &fs, mode);
 8007920:	a902      	add	r1, sp, #8
 8007922:	463a      	mov	r2, r7
 8007924:	a801      	add	r0, sp, #4
 8007926:	f7ff fc45 	bl	80071b4 <find_volume>
	if (res == FR_OK) {
 800792a:	4606      	mov	r6, r0
 800792c:	b128      	cbz	r0, 800793a <f_open+0x2e>
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800792e:	2300      	movs	r3, #0
 8007930:	6023      	str	r3, [r4, #0]

	LEAVE_FF(fs, res);
}
 8007932:	4630      	mov	r0, r6
 8007934:	b011      	add	sp, #68	; 0x44
 8007936:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		res = follow_path(&dj, path);	/* Follow the file path */
 800793a:	e9dd 1301 	ldrd	r1, r3, [sp, #4]
 800793e:	a803      	add	r0, sp, #12
		dj.obj.fs = fs;
 8007940:	9303      	str	r3, [sp, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 8007942:	f7fe fcaf 	bl	80062a4 <follow_path>
 8007946:	f005 0c1c 	and.w	ip, r5, #28
 800794a:	4603      	mov	r3, r0
		if (res == FR_OK) {
 800794c:	bb28      	cbnz	r0, 800799a <f_open+0x8e>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800794e:	f99d 303b 	ldrsb.w	r3, [sp, #59]	; 0x3b
 8007952:	2b00      	cmp	r3, #0
 8007954:	f2c0 80fc 	blt.w	8007b50 <f_open+0x244>
		if (Files[i].fs) {	/* Existing entry */
 8007958:	f8df 8394 	ldr.w	r8, [pc, #916]	; 8007cf0 <f_open+0x3e4>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800795c:	9b03      	ldr	r3, [sp, #12]
		if (Files[i].fs) {	/* Existing entry */
 800795e:	f8d8 1000 	ldr.w	r1, [r8]
				Files[i].clu == dp->obj.sclust &&
 8007962:	f8dd b014 	ldr.w	fp, [sp, #20]
				Files[i].ofs == dp->dptr) break;
 8007966:	f8dd e020 	ldr.w	lr, [sp, #32]
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800796a:	f027 0201 	bic.w	r2, r7, #1
		if (Files[i].fs) {	/* Existing entry */
 800796e:	2900      	cmp	r1, #0
 8007970:	f000 8108 	beq.w	8007b84 <f_open+0x278>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8007974:	428b      	cmp	r3, r1
 8007976:	d030      	beq.n	80079da <f_open+0xce>
		if (Files[i].fs) {	/* Existing entry */
 8007978:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800797c:	2900      	cmp	r1, #0
 800797e:	d046      	beq.n	8007a0e <f_open+0x102>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8007980:	428b      	cmp	r3, r1
 8007982:	d034      	beq.n	80079ee <f_open+0xe2>
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8007984:	f1bc 0f00 	cmp.w	ip, #0
 8007988:	d018      	beq.n	80079bc <f_open+0xb0>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800798a:	2312      	movs	r3, #18
 800798c:	461e      	mov	r6, r3
 800798e:	e7ce      	b.n	800792e <f_open+0x22>
	if (!fp) return FR_INVALID_OBJECT;
 8007990:	2609      	movs	r6, #9
}
 8007992:	4630      	mov	r0, r6
 8007994:	b011      	add	sp, #68	; 0x44
 8007996:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800799a:	f1bc 0f00 	cmp.w	ip, #0
 800799e:	d01a      	beq.n	80079d6 <f_open+0xca>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80079a0:	2804      	cmp	r0, #4
 80079a2:	d1f3      	bne.n	800798c <f_open+0x80>
	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80079a4:	f8df 8348 	ldr.w	r8, [pc, #840]	; 8007cf0 <f_open+0x3e4>
 80079a8:	f8d8 3000 	ldr.w	r3, [r8]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	f000 8101 	beq.w	8007bb4 <f_open+0x2a8>
 80079b2:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	f000 80fc 	beq.w	8007bb4 <f_open+0x2a8>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80079bc:	2612      	movs	r6, #18
 80079be:	e7b6      	b.n	800792e <f_open+0x22>
 80079c0:	4648      	mov	r0, r9
 80079c2:	4651      	mov	r1, sl
 80079c4:	f7fd f856 	bl	8004a74 <move_window.part.5>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80079c8:	f8dd 9008 	ldr.w	r9, [sp, #8]
 80079cc:	f8c9 5010 	str.w	r5, [r9, #16]
		if (res == FR_OK) {
 80079d0:	2800      	cmp	r0, #0
 80079d2:	f000 8139 	beq.w	8007c48 <f_open+0x33c>
 80079d6:	4606      	mov	r6, r0
 80079d8:	e7a9      	b.n	800792e <f_open+0x22>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80079da:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80079de:	458b      	cmp	fp, r1
 80079e0:	f000 8162 	beq.w	8007ca8 <f_open+0x39c>
		if (Files[i].fs) {	/* Existing entry */
 80079e4:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80079e8:	b189      	cbz	r1, 8007a0e <f_open+0x102>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80079ea:	4299      	cmp	r1, r3
 80079ec:	d1ca      	bne.n	8007984 <f_open+0x78>
 80079ee:	f8d8 1014 	ldr.w	r1, [r8, #20]
 80079f2:	4559      	cmp	r1, fp
 80079f4:	d1c6      	bne.n	8007984 <f_open+0x78>
				Files[i].clu == dp->obj.sclust &&
 80079f6:	f8d8 1018 	ldr.w	r1, [r8, #24]
 80079fa:	4571      	cmp	r1, lr
 80079fc:	d1c2      	bne.n	8007984 <f_open+0x78>
 80079fe:	2101      	movs	r1, #1
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8007a00:	b992      	cbnz	r2, 8007a28 <f_open+0x11c>
 8007a02:	eb08 1101 	add.w	r1, r8, r1, lsl #4
 8007a06:	8989      	ldrh	r1, [r1, #12]
 8007a08:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8007a0c:	d00c      	beq.n	8007a28 <f_open+0x11c>
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8007a0e:	f1bc 0f00 	cmp.w	ip, #0
 8007a12:	d00f      	beq.n	8007a34 <f_open+0x128>
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8007a14:	f89d 1012 	ldrb.w	r1, [sp, #18]
 8007a18:	f011 0f11 	tst.w	r1, #17
 8007a1c:	d113      	bne.n	8007a46 <f_open+0x13a>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8007a1e:	0769      	lsls	r1, r5, #29
 8007a20:	f140 80ab 	bpl.w	8007b7a <f_open+0x26e>
 8007a24:	2608      	movs	r6, #8
 8007a26:	e782      	b.n	800792e <f_open+0x22>
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8007a28:	f1bc 0f00 	cmp.w	ip, #0
 8007a2c:	f040 80bf 	bne.w	8007bae <f_open+0x2a2>
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8007a30:	2610      	movs	r6, #16
 8007a32:	e77c      	b.n	800792e <f_open+0x22>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8007a34:	f89d 1012 	ldrb.w	r1, [sp, #18]
 8007a38:	06c8      	lsls	r0, r1, #27
 8007a3a:	f100 80b6 	bmi.w	8007baa <f_open+0x29e>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8007a3e:	07a8      	lsls	r0, r5, #30
 8007a40:	d503      	bpl.n	8007a4a <f_open+0x13e>
 8007a42:	07c8      	lsls	r0, r1, #31
 8007a44:	d501      	bpl.n	8007a4a <f_open+0x13e>
						res = FR_DENIED;
 8007a46:	2607      	movs	r6, #7
 8007a48:	e771      	b.n	800792e <f_open+0x22>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8007a4a:	0729      	lsls	r1, r5, #28
 8007a4c:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8007a50:	d503      	bpl.n	8007a5a <f_open+0x14e>
				mode |= FA_MODIFIED;
 8007a52:	f047 0740 	orr.w	r7, r7, #64	; 0x40
 8007a56:	f027 0201 	bic.w	r2, r7, #1
		if (Files[i].fs == dp->obj.fs &&
 8007a5a:	f8d8 1000 	ldr.w	r1, [r8]
			fp->dir_ptr = dj.dir;
 8007a5e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8007a60:	f8d9 0034 	ldr.w	r0, [r9, #52]	; 0x34
		if (Files[i].fs == dp->obj.fs &&
 8007a64:	428b      	cmp	r3, r1
			fp->dir_ptr = dj.dir;
 8007a66:	e9c4 0509 	strd	r0, r5, [r4, #36]	; 0x24
		if (Files[i].fs == dp->obj.fs &&
 8007a6a:	d07a      	beq.n	8007b62 <f_open+0x256>
 8007a6c:	f8d8 a010 	ldr.w	sl, [r8, #16]
 8007a70:	459a      	cmp	sl, r3
 8007a72:	d00a      	beq.n	8007a8a <f_open+0x17e>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007a74:	2900      	cmp	r1, #0
 8007a76:	f000 8102 	beq.w	8007c7e <f_open+0x372>
 8007a7a:	f1ba 0f00 	cmp.w	sl, #0
 8007a7e:	f000 8124 	beq.w	8007cca <f_open+0x3be>
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007a82:	2300      	movs	r3, #0
 8007a84:	6123      	str	r3, [r4, #16]
 8007a86:	2602      	movs	r6, #2
 8007a88:	e751      	b.n	800792e <f_open+0x22>
		if (Files[i].fs == dp->obj.fs &&
 8007a8a:	f8d8 0014 	ldr.w	r0, [r8, #20]
 8007a8e:	4558      	cmp	r0, fp
 8007a90:	d1f0      	bne.n	8007a74 <f_open+0x168>
			Files[i].clu == dp->obj.sclust &&
 8007a92:	f8d8 0018 	ldr.w	r0, [r8, #24]
 8007a96:	4570      	cmp	r0, lr
 8007a98:	d1ec      	bne.n	8007a74 <f_open+0x168>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8007a9a:	f04f 0c01 	mov.w	ip, #1
 8007a9e:	ea4f 110c 	mov.w	r1, ip, lsl #4
 8007aa2:	eb08 0301 	add.w	r3, r8, r1
 8007aa6:	899b      	ldrh	r3, [r3, #12]
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8007aa8:	2a00      	cmp	r2, #0
 8007aaa:	d153      	bne.n	8007b54 <f_open+0x248>
 8007aac:	3301      	adds	r3, #1
 8007aae:	b29b      	uxth	r3, r3
 8007ab0:	f10c 0a01 	add.w	sl, ip, #1
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007ab4:	f8c4 a010 	str.w	sl, [r4, #16]
	if (fs->fs_type == FS_FAT32) {
 8007ab8:	f899 2000 	ldrb.w	r2, [r9]
	rv = rv << 8 | ptr[0];
 8007abc:	7ee8      	ldrb	r0, [r5, #27]
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8007abe:	4441      	add	r1, r8
	rv = rv << 8 | ptr[0];
 8007ac0:	f895 801a 	ldrb.w	r8, [r5, #26]
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8007ac4:	818b      	strh	r3, [r1, #12]
	if (fs->fs_type == FS_FAT32) {
 8007ac6:	2a03      	cmp	r2, #3
	cl = ld_word(dir + DIR_FstClusLO);
 8007ac8:	ea48 2800 	orr.w	r8, r8, r0, lsl #8
	if (fs->fs_type == FS_FAT32) {
 8007acc:	d105      	bne.n	8007ada <f_open+0x1ce>
	rv = rv << 8 | ptr[0];
 8007ace:	7d6a      	ldrb	r2, [r5, #21]
 8007ad0:	7d2b      	ldrb	r3, [r5, #20]
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8007ad2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8007ad6:	ea48 4803 	orr.w	r8, r8, r3, lsl #16
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8007ada:	f8c4 8008 	str.w	r8, [r4, #8]
	rv = rv << 8 | ptr[2];
 8007ade:	8be9      	ldrh	r1, [r5, #30]
	rv = rv << 8 | ptr[1];
 8007ae0:	7f6b      	ldrb	r3, [r5, #29]
	rv = rv << 8 | ptr[0];
 8007ae2:	7f2d      	ldrb	r5, [r5, #28]
			fp->obj.id = fs->id;
 8007ae4:	f8b9 2006 	ldrh.w	r2, [r9, #6]
 8007ae8:	80a2      	strh	r2, [r4, #4]
	rv = rv << 8 | ptr[1];
 8007aea:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	rv = rv << 8 | ptr[0];
 8007aee:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
			fp->cltbl = 0;			/* Disable fast seek mode */
 8007af2:	2100      	movs	r1, #0
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8007af4:	f104 0a30 	add.w	sl, r4, #48	; 0x30
			fp->flag = mode;		/* Set file access mode */
 8007af8:	7527      	strb	r7, [r4, #20]
			fp->obj.fs = fs;	 	/* Validate the file object */
 8007afa:	f8c4 9000 	str.w	r9, [r4]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8007afe:	60e5      	str	r5, [r4, #12]
			fp->cltbl = 0;			/* Disable fast seek mode */
 8007b00:	62e1      	str	r1, [r4, #44]	; 0x2c
			fp->err = 0;			/* Clear error flag */
 8007b02:	7561      	strb	r1, [r4, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8007b04:	6221      	str	r1, [r4, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8007b06:	61a1      	str	r1, [r4, #24]
 8007b08:	4650      	mov	r0, sl
 8007b0a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007b0e:	f000 fb7d 	bl	800820c <memset>
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8007b12:	06bf      	lsls	r7, r7, #26
 8007b14:	f57f af0d 	bpl.w	8007932 <f_open+0x26>
 8007b18:	2d00      	cmp	r5, #0
 8007b1a:	f43f af0a 	beq.w	8007932 <f_open+0x26>
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8007b1e:	f8b9 700a 	ldrh.w	r7, [r9, #10]
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8007b22:	61a5      	str	r5, [r4, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8007b24:	027f      	lsls	r7, r7, #9
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007b26:	42af      	cmp	r7, r5
 8007b28:	f080 8094 	bcs.w	8007c54 <f_open+0x348>
					clst = get_fat(&fp->obj, clst);
 8007b2c:	4641      	mov	r1, r8
 8007b2e:	6820      	ldr	r0, [r4, #0]
 8007b30:	f7fd fefa 	bl	8005928 <get_fat.isra.8>
					if (clst <= 1) res = FR_INT_ERR;
 8007b34:	2801      	cmp	r0, #1
					clst = get_fat(&fp->obj, clst);
 8007b36:	4680      	mov	r8, r0
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007b38:	eba5 0507 	sub.w	r5, r5, r7
					if (clst <= 1) res = FR_INT_ERR;
 8007b3c:	d906      	bls.n	8007b4c <f_open+0x240>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8007b3e:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8007b42:	d1f0      	bne.n	8007b26 <f_open+0x21a>
 8007b44:	2601      	movs	r6, #1
				fp->clust = clst;
 8007b46:	f8c4 801c 	str.w	r8, [r4, #28]
 8007b4a:	e6f0      	b.n	800792e <f_open+0x22>
					if (clst <= 1) res = FR_INT_ERR;
 8007b4c:	2602      	movs	r6, #2
 8007b4e:	e7fa      	b.n	8007b46 <f_open+0x23a>
				res = FR_INVALID_NAME;
 8007b50:	2606      	movs	r6, #6
 8007b52:	e6ec      	b.n	800792e <f_open+0x22>
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d194      	bne.n	8007a82 <f_open+0x176>
 8007b58:	f10c 0a01 	add.w	sl, ip, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8007b5c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007b60:	e7a8      	b.n	8007ab4 <f_open+0x1a8>
		if (Files[i].fs == dp->obj.fs &&
 8007b62:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8007b66:	4583      	cmp	fp, r0
 8007b68:	d180      	bne.n	8007a6c <f_open+0x160>
			Files[i].clu == dp->obj.sclust &&
 8007b6a:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8007b6e:	4586      	cmp	lr, r0
 8007b70:	f47f af7c 	bne.w	8007a6c <f_open+0x160>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8007b74:	f04f 0c00 	mov.w	ip, #0
 8007b78:	e791      	b.n	8007a9e <f_open+0x192>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8007b7a:	072d      	lsls	r5, r5, #28
 8007b7c:	d422      	bmi.n	8007bc4 <f_open+0x2b8>
 8007b7e:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8007b82:	e76a      	b.n	8007a5a <f_open+0x14e>
		if (Files[i].fs) {	/* Existing entry */
 8007b84:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8007b88:	2900      	cmp	r1, #0
 8007b8a:	f43f af40 	beq.w	8007a0e <f_open+0x102>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8007b8e:	4299      	cmp	r1, r3
 8007b90:	f47f af3d 	bne.w	8007a0e <f_open+0x102>
 8007b94:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8007b98:	4559      	cmp	r1, fp
 8007b9a:	f47f af38 	bne.w	8007a0e <f_open+0x102>
				Files[i].clu == dp->obj.sclust &&
 8007b9e:	f8d8 1018 	ldr.w	r1, [r8, #24]
 8007ba2:	458e      	cmp	lr, r1
 8007ba4:	f47f af33 	bne.w	8007a0e <f_open+0x102>
 8007ba8:	e729      	b.n	80079fe <f_open+0xf2>
					res = FR_NO_FILE;
 8007baa:	2604      	movs	r6, #4
 8007bac:	e6bf      	b.n	800792e <f_open+0x22>
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8007bae:	2310      	movs	r3, #16
 8007bb0:	461e      	mov	r6, r3
 8007bb2:	e6bc      	b.n	800792e <f_open+0x22>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8007bb4:	a803      	add	r0, sp, #12
 8007bb6:	f7fe fd19 	bl	80065ec <dir_register>
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8007bba:	f047 0708 	orr.w	r7, r7, #8
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8007bbe:	2800      	cmp	r0, #0
 8007bc0:	f47f af09 	bne.w	80079d6 <f_open+0xca>
				dw = GET_FATTIME();
 8007bc4:	f7fc fe4a 	bl	800485c <get_fattime>
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8007bc8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8007bca:	f8dd 9008 	ldr.w	r9, [sp, #8]
	*ptr++ = (BYTE)val; val >>= 8;
 8007bce:	b2c5      	uxtb	r5, r0
	*ptr++ = (BYTE)val; val >>= 8;
 8007bd0:	f3c0 2107 	ubfx	r1, r0, #8, #8
	*ptr++ = (BYTE)val; val >>= 8;
 8007bd4:	f3c0 4207 	ubfx	r2, r0, #16, #8
	*ptr++ = (BYTE)val;
 8007bd8:	0e00      	lsrs	r0, r0, #24
	*ptr++ = (BYTE)val; val >>= 8;
 8007bda:	739d      	strb	r5, [r3, #14]
	*ptr++ = (BYTE)val; val >>= 8;
 8007bdc:	73d9      	strb	r1, [r3, #15]
	*ptr++ = (BYTE)val; val >>= 8;
 8007bde:	741a      	strb	r2, [r3, #16]
	*ptr++ = (BYTE)val;
 8007be0:	7458      	strb	r0, [r3, #17]
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8007be2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
	*ptr++ = (BYTE)val; val >>= 8;
 8007be4:	759d      	strb	r5, [r3, #22]
	*ptr++ = (BYTE)val; val >>= 8;
 8007be6:	75d9      	strb	r1, [r3, #23]
	*ptr++ = (BYTE)val; val >>= 8;
 8007be8:	761a      	strb	r2, [r3, #24]
	*ptr++ = (BYTE)val;
 8007bea:	7658      	strb	r0, [r3, #25]
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8007bec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007bee:	2220      	movs	r2, #32
 8007bf0:	72da      	strb	r2, [r3, #11]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8007bf2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
	if (fs->fs_type == FS_FAT32) {
 8007bf4:	f899 2000 	ldrb.w	r2, [r9]
	rv = rv << 8 | ptr[0];
 8007bf8:	7ed9      	ldrb	r1, [r3, #27]
 8007bfa:	7e9d      	ldrb	r5, [r3, #26]
	if (fs->fs_type == FS_FAT32) {
 8007bfc:	2a03      	cmp	r2, #3
	cl = ld_word(dir + DIR_FstClusLO);
 8007bfe:	ea45 2501 	orr.w	r5, r5, r1, lsl #8
	if (fs->fs_type == FS_FAT32) {
 8007c02:	d05b      	beq.n	8007cbc <f_open+0x3b0>
	*ptr++ = (BYTE)val; val >>= 8;
 8007c04:	2200      	movs	r2, #0
 8007c06:	769a      	strb	r2, [r3, #26]
	*ptr++ = (BYTE)val;
 8007c08:	76da      	strb	r2, [r3, #27]
	if (fs->fs_type == FS_FAT32) {
 8007c0a:	f899 1000 	ldrb.w	r1, [r9]
 8007c0e:	2903      	cmp	r1, #3
 8007c10:	d051      	beq.n	8007cb6 <f_open+0x3aa>
					st_dword(dj.dir + DIR_FileSize, 0);
 8007c12:	990b      	ldr	r1, [sp, #44]	; 0x2c
	*ptr++ = (BYTE)val; val >>= 8;
 8007c14:	2200      	movs	r2, #0
					fs->wflag = 1;
 8007c16:	2301      	movs	r3, #1
	*ptr++ = (BYTE)val; val >>= 8;
 8007c18:	61ca      	str	r2, [r1, #28]
					fs->wflag = 1;
 8007c1a:	f889 3003 	strb.w	r3, [r9, #3]
					if (cl) {							/* Remove the cluster chain if exist */
 8007c1e:	b19d      	cbz	r5, 8007c48 <f_open+0x33c>
						res = remove_chain(&dj.obj, cl, 0);
 8007c20:	a803      	add	r0, sp, #12
 8007c22:	4629      	mov	r1, r5
						dw = fs->winsect;
 8007c24:	f8d9 a034 	ldr.w	sl, [r9, #52]	; 0x34
						res = remove_chain(&dj.obj, cl, 0);
 8007c28:	f7fd f8bc 	bl	8004da4 <remove_chain>
						if (res == FR_OK) {
 8007c2c:	2800      	cmp	r0, #0
 8007c2e:	f47f aed2 	bne.w	80079d6 <f_open+0xca>
							res = move_window(fs, dw);
 8007c32:	f8dd 9008 	ldr.w	r9, [sp, #8]
	if (sector != fs->winsect) {	/* Window offset changed? */
 8007c36:	f8d9 3034 	ldr.w	r3, [r9, #52]	; 0x34
 8007c3a:	459a      	cmp	sl, r3
 8007c3c:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 8007c40:	f47f aebe 	bne.w	80079c0 <f_open+0xb4>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8007c44:	f8c9 5010 	str.w	r5, [r9, #16]
 8007c48:	9b03      	ldr	r3, [sp, #12]
 8007c4a:	f8dd b014 	ldr.w	fp, [sp, #20]
 8007c4e:	f8dd e020 	ldr.w	lr, [sp, #32]
 8007c52:	e6fe      	b.n	8007a52 <f_open+0x146>
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8007c54:	f3c5 0308 	ubfx	r3, r5, #0, #9
				fp->clust = clst;
 8007c58:	f8c4 801c 	str.w	r8, [r4, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	f43f ae68 	beq.w	8007932 <f_open+0x26>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8007c62:	9b02      	ldr	r3, [sp, #8]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8007c64:	69da      	ldr	r2, [r3, #28]
	clst -= 2;
 8007c66:	f1a8 0802 	sub.w	r8, r8, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8007c6a:	3a02      	subs	r2, #2
 8007c6c:	4590      	cmp	r8, r2
 8007c6e:	d204      	bcs.n	8007c7a <f_open+0x36e>
	return clst * fs->csize + fs->database;
 8007c70:	895a      	ldrh	r2, [r3, #10]
 8007c72:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007c74:	fb08 1202 	mla	r2, r8, r2, r1
					if ((sc = clust2sect(fs, clst)) == 0) {
 8007c78:	bb62      	cbnz	r2, 8007cd4 <f_open+0x3c8>
 8007c7a:	2602      	movs	r6, #2
 8007c7c:	e657      	b.n	800792e <f_open+0x22>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007c7e:	468c      	mov	ip, r1
 8007c80:	f04f 0a01 	mov.w	sl, #1
		Files[i].fs = dp->obj.fs;
 8007c84:	ea4f 110c 	mov.w	r1, ip, lsl #4
 8007c88:	eb08 0c01 	add.w	ip, r8, r1
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8007c8c:	2a00      	cmp	r2, #0
		Files[i].ctr = 0;
 8007c8e:	f04f 0200 	mov.w	r2, #0
		Files[i].fs = dp->obj.fs;
 8007c92:	f848 3001 	str.w	r3, [r8, r1]
		Files[i].ofs = dp->dptr;
 8007c96:	e9cc be01 	strd	fp, lr, [ip, #4]
		Files[i].ctr = 0;
 8007c9a:	f8ac 200c 	strh.w	r2, [ip, #12]
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8007c9e:	bf14      	ite	ne
 8007ca0:	f44f 7380 	movne.w	r3, #256	; 0x100
 8007ca4:	2301      	moveq	r3, #1
 8007ca6:	e705      	b.n	8007ab4 <f_open+0x1a8>
				Files[i].clu == dp->obj.sclust &&
 8007ca8:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8007cac:	458e      	cmp	lr, r1
 8007cae:	f47f ae99 	bne.w	80079e4 <f_open+0xd8>
	for (i = be = 0; i < _FS_LOCK; i++) {
 8007cb2:	4631      	mov	r1, r6
 8007cb4:	e6a4      	b.n	8007a00 <f_open+0xf4>
	*ptr++ = (BYTE)val; val >>= 8;
 8007cb6:	751a      	strb	r2, [r3, #20]
	*ptr++ = (BYTE)val;
 8007cb8:	755a      	strb	r2, [r3, #21]
 8007cba:	e7aa      	b.n	8007c12 <f_open+0x306>
	rv = rv << 8 | ptr[0];
 8007cbc:	7d59      	ldrb	r1, [r3, #21]
 8007cbe:	7d1a      	ldrb	r2, [r3, #20]
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8007cc0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8007cc4:	ea45 4502 	orr.w	r5, r5, r2, lsl #16
 8007cc8:	e79c      	b.n	8007c04 <f_open+0x2f8>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007cca:	f04f 0a02 	mov.w	sl, #2
 8007cce:	f04f 0c01 	mov.w	ip, #1
 8007cd2:	e7d7      	b.n	8007c84 <f_open+0x378>
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8007cd4:	eb02 2255 	add.w	r2, r2, r5, lsr #9
 8007cd8:	6222      	str	r2, [r4, #32]
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8007cda:	7858      	ldrb	r0, [r3, #1]
 8007cdc:	4651      	mov	r1, sl
 8007cde:	2301      	movs	r3, #1
 8007ce0:	f7fc feac 	bl	8004a3c <disk_read>
 8007ce4:	2800      	cmp	r0, #0
 8007ce6:	f43f ae24 	beq.w	8007932 <f_open+0x26>
 8007cea:	2601      	movs	r6, #1
 8007cec:	e61f      	b.n	800792e <f_open+0x22>
 8007cee:	bf00      	nop
 8007cf0:	20000208 	.word	0x20000208

08007cf4 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8007cf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cf8:	469a      	mov	sl, r3
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;


	*br = 0;	/* Clear read byte counter */
 8007cfa:	2300      	movs	r3, #0
{
 8007cfc:	b08b      	sub	sp, #44	; 0x2c
	*br = 0;	/* Clear read byte counter */
 8007cfe:	f8ca 3000 	str.w	r3, [sl]
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8007d02:	b148      	cbz	r0, 8007d18 <f_read+0x24>
 8007d04:	6803      	ldr	r3, [r0, #0]
 8007d06:	4680      	mov	r8, r0
 8007d08:	b133      	cbz	r3, 8007d18 <f_read+0x24>
 8007d0a:	4689      	mov	r9, r1
 8007d0c:	7819      	ldrb	r1, [r3, #0]
 8007d0e:	b119      	cbz	r1, 8007d18 <f_read+0x24>
 8007d10:	8880      	ldrh	r0, [r0, #4]
 8007d12:	88d9      	ldrh	r1, [r3, #6]
 8007d14:	4288      	cmp	r0, r1
 8007d16:	d005      	beq.n	8007d24 <f_read+0x30>
	FRESULT res = FR_INVALID_OBJECT;
 8007d18:	2309      	movs	r3, #9
 8007d1a:	9300      	str	r3, [sp, #0]
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#endif
	}

	LEAVE_FF(fs, FR_OK);
}
 8007d1c:	9800      	ldr	r0, [sp, #0]
 8007d1e:	b00b      	add	sp, #44	; 0x2c
 8007d20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8007d24:	7858      	ldrb	r0, [r3, #1]
 8007d26:	9201      	str	r2, [sp, #4]
 8007d28:	f7fc fe6e 	bl	8004a08 <disk_status>
 8007d2c:	07c1      	lsls	r1, r0, #31
 8007d2e:	d4f3      	bmi.n	8007d18 <f_read+0x24>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8007d30:	f898 3015 	ldrb.w	r3, [r8, #21]
 8007d34:	9300      	str	r3, [sp, #0]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d1f0      	bne.n	8007d1c <f_read+0x28>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8007d3a:	f898 3014 	ldrb.w	r3, [r8, #20]
 8007d3e:	07da      	lsls	r2, r3, #31
 8007d40:	f140 8115 	bpl.w	8007f6e <f_read+0x27a>
	remain = fp->obj.objsize - fp->fptr;
 8007d44:	f8d8 1018 	ldr.w	r1, [r8, #24]
 8007d48:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007d4c:	9a01      	ldr	r2, [sp, #4]
 8007d4e:	1a5b      	subs	r3, r3, r1
 8007d50:	4293      	cmp	r3, r2
 8007d52:	bf28      	it	cs
 8007d54:	4613      	movcs	r3, r2
 8007d56:	469b      	mov	fp, r3
	for ( ;  btr;								/* Repeat until all data read */
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d0df      	beq.n	8007d1c <f_read+0x28>
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8007d5c:	4643      	mov	r3, r8
 8007d5e:	f108 0234 	add.w	r2, r8, #52	; 0x34
 8007d62:	f853 0b30 	ldr.w	r0, [r3], #48
 8007d66:	9301      	str	r3, [sp, #4]
 8007d68:	425b      	negs	r3, r3
 8007d6a:	f003 0303 	and.w	r3, r3, #3
 8007d6e:	9205      	str	r2, [sp, #20]
 8007d70:	f5c3 7200 	rsb	r2, r3, #512	; 0x200
 8007d74:	0894      	lsrs	r4, r2, #2
 8007d76:	9304      	str	r3, [sp, #16]
 8007d78:	9208      	str	r2, [sp, #32]
 8007d7a:	3330      	adds	r3, #48	; 0x30
 8007d7c:	f022 0203 	bic.w	r2, r2, #3
 8007d80:	f8cd a008 	str.w	sl, [sp, #8]
 8007d84:	9407      	str	r4, [sp, #28]
 8007d86:	9206      	str	r2, [sp, #24]
 8007d88:	9309      	str	r3, [sp, #36]	; 0x24
 8007d8a:	4682      	mov	sl, r0
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8007d8c:	f3c1 0308 	ubfx	r3, r1, #0, #9
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d14b      	bne.n	8007e2c <f_read+0x138>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8007d94:	f8ba 600a 	ldrh.w	r6, [sl, #10]
 8007d98:	0a4b      	lsrs	r3, r1, #9
 8007d9a:	3e01      	subs	r6, #1
			if (csect == 0) {					/* On the cluster boundary? */
 8007d9c:	401e      	ands	r6, r3
 8007d9e:	f000 80b7 	beq.w	8007f10 <f_read+0x21c>
 8007da2:	f8d8 001c 	ldr.w	r0, [r8, #28]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8007da6:	f8da 301c 	ldr.w	r3, [sl, #28]
	clst -= 2;
 8007daa:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8007dac:	3b02      	subs	r3, #2
 8007dae:	4298      	cmp	r0, r3
 8007db0:	f080 80e6 	bcs.w	8007f80 <f_read+0x28c>
	return clst * fs->csize + fs->database;
 8007db4:	f8ba 300a 	ldrh.w	r3, [sl, #10]
 8007db8:	f8da 2030 	ldr.w	r2, [sl, #48]	; 0x30
 8007dbc:	9203      	str	r2, [sp, #12]
 8007dbe:	fb03 f500 	mul.w	r5, r3, r0
			if (!sect) ABORT(fs, FR_INT_ERR);
 8007dc2:	18af      	adds	r7, r5, r2
 8007dc4:	f000 80dc 	beq.w	8007f80 <f_read+0x28c>
			if (cc) {							/* Read maximum contiguous sectors directly */
 8007dc8:	ea5f 245b 	movs.w	r4, fp, lsr #9
			sect += csect;
 8007dcc:	4437      	add	r7, r6
			if (cc) {							/* Read maximum contiguous sectors directly */
 8007dce:	d015      	beq.n	8007dfc <f_read+0x108>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8007dd0:	1932      	adds	r2, r6, r4
 8007dd2:	429a      	cmp	r2, r3
					cc = fs->csize - csect;
 8007dd4:	bf88      	it	hi
 8007dd6:	1b9c      	subhi	r4, r3, r6
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007dd8:	4623      	mov	r3, r4
 8007dda:	463a      	mov	r2, r7
 8007ddc:	4649      	mov	r1, r9
 8007dde:	f89a 0001 	ldrb.w	r0, [sl, #1]
 8007de2:	f7fc fe2b 	bl	8004a3c <disk_read>
 8007de6:	2800      	cmp	r0, #0
 8007de8:	f000 80c4 	beq.w	8007f74 <f_read+0x280>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007dec:	2301      	movs	r3, #1
 8007dee:	9300      	str	r3, [sp, #0]
}
 8007df0:	9800      	ldr	r0, [sp, #0]
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007df2:	f888 3015 	strb.w	r3, [r8, #21]
}
 8007df6:	b00b      	add	sp, #44	; 0x2c
 8007df8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8007dfc:	f8d8 2020 	ldr.w	r2, [r8, #32]
 8007e00:	42ba      	cmp	r2, r7
 8007e02:	d00d      	beq.n	8007e20 <f_read+0x12c>
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8007e04:	f998 3014 	ldrsb.w	r3, [r8, #20]
 8007e08:	f89a 0001 	ldrb.w	r0, [sl, #1]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	f2c0 80bc 	blt.w	8007f8a <f_read+0x296>
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8007e12:	2301      	movs	r3, #1
 8007e14:	463a      	mov	r2, r7
 8007e16:	9901      	ldr	r1, [sp, #4]
 8007e18:	f7fc fe10 	bl	8004a3c <disk_read>
 8007e1c:	2800      	cmp	r0, #0
 8007e1e:	d1e5      	bne.n	8007dec <f_read+0xf8>
 8007e20:	f8d8 3018 	ldr.w	r3, [r8, #24]
			fp->sect = sect;
 8007e24:	f8c8 7020 	str.w	r7, [r8, #32]
 8007e28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e2c:	9a01      	ldr	r2, [sp, #4]
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8007e2e:	f5c3 7400 	rsb	r4, r3, #512	; 0x200
 8007e32:	1d19      	adds	r1, r3, #4
 8007e34:	4411      	add	r1, r2
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8007e36:	18d0      	adds	r0, r2, r3
 8007e38:	455c      	cmp	r4, fp
 8007e3a:	f109 0204 	add.w	r2, r9, #4
 8007e3e:	bf28      	it	cs
 8007e40:	465c      	movcs	r4, fp
 8007e42:	4290      	cmp	r0, r2
 8007e44:	bf38      	it	cc
 8007e46:	4589      	cmpcc	r9, r1
 8007e48:	d372      	bcc.n	8007f30 <f_read+0x23c>
 8007e4a:	2c0b      	cmp	r4, #11
 8007e4c:	d970      	bls.n	8007f30 <f_read+0x23c>
 8007e4e:	4242      	negs	r2, r0
 8007e50:	f012 0203 	ands.w	r2, r2, #3
 8007e54:	f104 36ff 	add.w	r6, r4, #4294967295	; 0xffffffff
 8007e58:	d067      	beq.n	8007f2a <f_read+0x236>
			*d++ = *s++;
 8007e5a:	7801      	ldrb	r1, [r0, #0]
 8007e5c:	f889 1000 	strb.w	r1, [r9]
 8007e60:	2a01      	cmp	r2, #1
 8007e62:	f100 0101 	add.w	r1, r0, #1
 8007e66:	f109 0e01 	add.w	lr, r9, #1
 8007e6a:	d05c      	beq.n	8007f26 <f_read+0x232>
 8007e6c:	7841      	ldrb	r1, [r0, #1]
 8007e6e:	f889 1001 	strb.w	r1, [r9, #1]
 8007e72:	2a03      	cmp	r2, #3
 8007e74:	f100 0102 	add.w	r1, r0, #2
 8007e78:	f109 0e02 	add.w	lr, r9, #2
		} while (--cnt);
 8007e7c:	f1a4 0602 	sub.w	r6, r4, #2
 8007e80:	d151      	bne.n	8007f26 <f_read+0x232>
			*d++ = *s++;
 8007e82:	7881      	ldrb	r1, [r0, #2]
 8007e84:	f889 1002 	strb.w	r1, [r9, #2]
 8007e88:	3003      	adds	r0, #3
 8007e8a:	f109 0e03 	add.w	lr, r9, #3
		} while (--cnt);
 8007e8e:	1ee6      	subs	r6, r4, #3
 8007e90:	9901      	ldr	r1, [sp, #4]
 8007e92:	4413      	add	r3, r2
 8007e94:	eba4 0c02 	sub.w	ip, r4, r2
 8007e98:	440b      	add	r3, r1
 8007e9a:	444a      	add	r2, r9
 8007e9c:	ea4f 079c 	mov.w	r7, ip, lsr #2
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8007ea0:	2100      	movs	r1, #0
 8007ea2:	3101      	adds	r1, #1
			*d++ = *s++;
 8007ea4:	f853 5b04 	ldr.w	r5, [r3], #4
 8007ea8:	f842 5b04 	str.w	r5, [r2], #4
 8007eac:	428f      	cmp	r7, r1
 8007eae:	d8f8      	bhi.n	8007ea2 <f_read+0x1ae>
 8007eb0:	f02c 0303 	bic.w	r3, ip, #3
 8007eb4:	459c      	cmp	ip, r3
 8007eb6:	eba6 0603 	sub.w	r6, r6, r3
 8007eba:	eb0e 0203 	add.w	r2, lr, r3
 8007ebe:	eb00 0103 	add.w	r1, r0, r3
 8007ec2:	d016      	beq.n	8007ef2 <f_read+0x1fe>
 8007ec4:	5cc0      	ldrb	r0, [r0, r3]
 8007ec6:	f80e 0003 	strb.w	r0, [lr, r3]
		} while (--cnt);
 8007eca:	2e01      	cmp	r6, #1
 8007ecc:	d011      	beq.n	8007ef2 <f_read+0x1fe>
			*d++ = *s++;
 8007ece:	784b      	ldrb	r3, [r1, #1]
 8007ed0:	7053      	strb	r3, [r2, #1]
		} while (--cnt);
 8007ed2:	2e02      	cmp	r6, #2
 8007ed4:	d00d      	beq.n	8007ef2 <f_read+0x1fe>
			*d++ = *s++;
 8007ed6:	788b      	ldrb	r3, [r1, #2]
 8007ed8:	7093      	strb	r3, [r2, #2]
		} while (--cnt);
 8007eda:	2e03      	cmp	r6, #3
 8007edc:	d009      	beq.n	8007ef2 <f_read+0x1fe>
			*d++ = *s++;
 8007ede:	78cb      	ldrb	r3, [r1, #3]
 8007ee0:	70d3      	strb	r3, [r2, #3]
		} while (--cnt);
 8007ee2:	2e04      	cmp	r6, #4
 8007ee4:	d005      	beq.n	8007ef2 <f_read+0x1fe>
			*d++ = *s++;
 8007ee6:	790b      	ldrb	r3, [r1, #4]
 8007ee8:	7113      	strb	r3, [r2, #4]
		} while (--cnt);
 8007eea:	2e05      	cmp	r6, #5
 8007eec:	d001      	beq.n	8007ef2 <f_read+0x1fe>
			*d++ = *s++;
 8007eee:	794b      	ldrb	r3, [r1, #5]
 8007ef0:	7153      	strb	r3, [r2, #5]
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8007ef2:	9a02      	ldr	r2, [sp, #8]
 8007ef4:	f8d8 1018 	ldr.w	r1, [r8, #24]
 8007ef8:	6813      	ldr	r3, [r2, #0]
 8007efa:	4421      	add	r1, r4
 8007efc:	4423      	add	r3, r4
	for ( ;  btr;								/* Repeat until all data read */
 8007efe:	ebbb 0b04 	subs.w	fp, fp, r4
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8007f02:	f8c8 1018 	str.w	r1, [r8, #24]
 8007f06:	44a1      	add	r9, r4
 8007f08:	6013      	str	r3, [r2, #0]
	for ( ;  btr;								/* Repeat until all data read */
 8007f0a:	f47f af3f 	bne.w	8007d8c <f_read+0x98>
 8007f0e:	e705      	b.n	8007d1c <f_read+0x28>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8007f10:	b9c1      	cbnz	r1, 8007f44 <f_read+0x250>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8007f12:	f8d8 0008 	ldr.w	r0, [r8, #8]
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8007f16:	2801      	cmp	r0, #1
 8007f18:	d932      	bls.n	8007f80 <f_read+0x28c>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007f1a:	1c43      	adds	r3, r0, #1
 8007f1c:	f43f af66 	beq.w	8007dec <f_read+0xf8>
				fp->clust = clst;				/* Update current cluster */
 8007f20:	f8c8 001c 	str.w	r0, [r8, #28]
 8007f24:	e73f      	b.n	8007da6 <f_read+0xb2>
			*d++ = *s++;
 8007f26:	4608      	mov	r0, r1
 8007f28:	e7b2      	b.n	8007e90 <f_read+0x19c>
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8007f2a:	46ce      	mov	lr, r9
 8007f2c:	4626      	mov	r6, r4
 8007f2e:	e7af      	b.n	8007e90 <f_read+0x19c>
 8007f30:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
 8007f34:	1901      	adds	r1, r0, r4
			*d++ = *s++;
 8007f36:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007f3a:	f803 2f01 	strb.w	r2, [r3, #1]!
		} while (--cnt);
 8007f3e:	4288      	cmp	r0, r1
 8007f40:	d1f9      	bne.n	8007f36 <f_read+0x242>
 8007f42:	e7d6      	b.n	8007ef2 <f_read+0x1fe>
					if (fp->cltbl) {
 8007f44:	f8d8 102c 	ldr.w	r1, [r8, #44]	; 0x2c
 8007f48:	f8d8 0000 	ldr.w	r0, [r8]
 8007f4c:	b369      	cbz	r1, 8007faa <f_read+0x2b6>
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007f4e:	684a      	ldr	r2, [r1, #4]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8007f50:	8940      	ldrh	r0, [r0, #10]
 8007f52:	fbb3 f3f0 	udiv	r3, r3, r0
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8007f56:	3104      	adds	r1, #4
		if (ncl == 0) return 0;	/* End of table? (error) */
 8007f58:	b922      	cbnz	r2, 8007f64 <f_read+0x270>
 8007f5a:	e011      	b.n	8007f80 <f_read+0x28c>
		cl -= ncl; tbl++;		/* Next fragment */
 8007f5c:	1a9b      	subs	r3, r3, r2
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007f5e:	f851 2f08 	ldr.w	r2, [r1, #8]!
		if (ncl == 0) return 0;	/* End of table? (error) */
 8007f62:	b16a      	cbz	r2, 8007f80 <f_read+0x28c>
		if (cl < ncl) break;	/* In this fragment? */
 8007f64:	429a      	cmp	r2, r3
 8007f66:	d9f9      	bls.n	8007f5c <f_read+0x268>
	return cl + *tbl;	/* Return the cluster number */
 8007f68:	6848      	ldr	r0, [r1, #4]
 8007f6a:	4418      	add	r0, r3
 8007f6c:	e7d3      	b.n	8007f16 <f_read+0x222>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8007f6e:	2307      	movs	r3, #7
 8007f70:	9300      	str	r3, [sp, #0]
 8007f72:	e6d3      	b.n	8007d1c <f_read+0x28>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8007f74:	f998 3014 	ldrsb.w	r3, [r8, #20]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	db1b      	blt.n	8007fb4 <f_read+0x2c0>
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8007f7c:	0264      	lsls	r4, r4, #9
				continue;
 8007f7e:	e7b8      	b.n	8007ef2 <f_read+0x1fe>
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8007f80:	2302      	movs	r3, #2
 8007f82:	f888 3015 	strb.w	r3, [r8, #21]
 8007f86:	9300      	str	r3, [sp, #0]
 8007f88:	e6c8      	b.n	8007d1c <f_read+0x28>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007f8a:	2301      	movs	r3, #1
 8007f8c:	9901      	ldr	r1, [sp, #4]
 8007f8e:	f7fc fd63 	bl	8004a58 <disk_write>
 8007f92:	2800      	cmp	r0, #0
 8007f94:	f47f af2a 	bne.w	8007dec <f_read+0xf8>
					fp->flag &= (BYTE)~FA_DIRTY;
 8007f98:	f898 3014 	ldrb.w	r3, [r8, #20]
 8007f9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007fa0:	f888 3014 	strb.w	r3, [r8, #20]
 8007fa4:	f89a 0001 	ldrb.w	r0, [sl, #1]
 8007fa8:	e733      	b.n	8007e12 <f_read+0x11e>
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8007faa:	f8d8 101c 	ldr.w	r1, [r8, #28]
 8007fae:	f7fd fcbb 	bl	8005928 <get_fat.isra.8>
 8007fb2:	e7b0      	b.n	8007f16 <f_read+0x222>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8007fb4:	f8d8 2020 	ldr.w	r2, [r8, #32]
 8007fb8:	1bd7      	subs	r7, r2, r7
 8007fba:	42a7      	cmp	r7, r4
 8007fbc:	d2de      	bcs.n	8007f7c <f_read+0x288>
 8007fbe:	9b03      	ldr	r3, [sp, #12]
 8007fc0:	9805      	ldr	r0, [sp, #20]
 8007fc2:	1ad2      	subs	r2, r2, r3
 8007fc4:	1b92      	subs	r2, r2, r6
 8007fc6:	1b52      	subs	r2, r2, r5
 8007fc8:	0252      	lsls	r2, r2, #9
 8007fca:	eb09 0302 	add.w	r3, r9, r2
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8007fce:	9d01      	ldr	r5, [sp, #4]
 8007fd0:	4298      	cmp	r0, r3
 8007fd2:	eb09 2747 	add.w	r7, r9, r7, lsl #9
 8007fd6:	4629      	mov	r1, r5
 8007fd8:	d903      	bls.n	8007fe2 <f_read+0x2ee>
 8007fda:	1d13      	adds	r3, r2, #4
 8007fdc:	444b      	add	r3, r9
 8007fde:	429d      	cmp	r5, r3
 8007fe0:	d348      	bcc.n	8008074 <f_read+0x380>
 8007fe2:	9804      	ldr	r0, [sp, #16]
 8007fe4:	2800      	cmp	r0, #0
 8007fe6:	d041      	beq.n	800806c <f_read+0x378>
			*d++ = *s++;
 8007fe8:	f898 3030 	ldrb.w	r3, [r8, #48]	; 0x30
 8007fec:	703b      	strb	r3, [r7, #0]
 8007fee:	2801      	cmp	r0, #1
 8007ff0:	f108 0131 	add.w	r1, r8, #49	; 0x31
 8007ff4:	f107 0501 	add.w	r5, r7, #1
 8007ff8:	d035      	beq.n	8008066 <f_read+0x372>
 8007ffa:	f898 3031 	ldrb.w	r3, [r8, #49]	; 0x31
 8007ffe:	707b      	strb	r3, [r7, #1]
 8008000:	2803      	cmp	r0, #3
 8008002:	f108 0132 	add.w	r1, r8, #50	; 0x32
 8008006:	f107 0502 	add.w	r5, r7, #2
 800800a:	d13d      	bne.n	8008088 <f_read+0x394>
 800800c:	f898 3032 	ldrb.w	r3, [r8, #50]	; 0x32
 8008010:	70bb      	strb	r3, [r7, #2]
 8008012:	1cfd      	adds	r5, r7, #3
 8008014:	f108 0133 	add.w	r1, r8, #51	; 0x33
 8008018:	f240 10fd 	movw	r0, #509	; 0x1fd
 800801c:	9b04      	ldr	r3, [sp, #16]
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800801e:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8008022:	441a      	add	r2, r3
 8008024:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008026:	444a      	add	r2, r9
 8008028:	eb08 0603 	add.w	r6, r8, r3
 800802c:	2300      	movs	r3, #0
 800802e:	3301      	adds	r3, #1
			*d++ = *s++;
 8008030:	f856 7b04 	ldr.w	r7, [r6], #4
 8008034:	f842 7b04 	str.w	r7, [r2], #4
 8008038:	459c      	cmp	ip, r3
 800803a:	d8f8      	bhi.n	800802e <f_read+0x33a>
 800803c:	9e06      	ldr	r6, [sp, #24]
 800803e:	9f08      	ldr	r7, [sp, #32]
 8008040:	42be      	cmp	r6, r7
 8008042:	eba0 0006 	sub.w	r0, r0, r6
 8008046:	eb05 0306 	add.w	r3, r5, r6
 800804a:	eb01 0206 	add.w	r2, r1, r6
 800804e:	d095      	beq.n	8007f7c <f_read+0x288>
 8008050:	5d89      	ldrb	r1, [r1, r6]
 8008052:	55a9      	strb	r1, [r5, r6]
		} while (--cnt);
 8008054:	2801      	cmp	r0, #1
 8008056:	d091      	beq.n	8007f7c <f_read+0x288>
			*d++ = *s++;
 8008058:	7851      	ldrb	r1, [r2, #1]
 800805a:	7059      	strb	r1, [r3, #1]
		} while (--cnt);
 800805c:	2802      	cmp	r0, #2
 800805e:	d08d      	beq.n	8007f7c <f_read+0x288>
			*d++ = *s++;
 8008060:	7892      	ldrb	r2, [r2, #2]
 8008062:	709a      	strb	r2, [r3, #2]
 8008064:	e78a      	b.n	8007f7c <f_read+0x288>
 8008066:	f240 10ff 	movw	r0, #511	; 0x1ff
 800806a:	e7d7      	b.n	800801c <f_read+0x328>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800806c:	463d      	mov	r5, r7
 800806e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8008072:	e7d3      	b.n	800801c <f_read+0x328>
 8008074:	3f01      	subs	r7, #1
 8008076:	f508 720c 	add.w	r2, r8, #560	; 0x230
			*d++ = *s++;
 800807a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800807e:	f807 3f01 	strb.w	r3, [r7, #1]!
		} while (--cnt);
 8008082:	428a      	cmp	r2, r1
 8008084:	d1f9      	bne.n	800807a <f_read+0x386>
 8008086:	e779      	b.n	8007f7c <f_read+0x288>
			*d++ = *s++;
 8008088:	f44f 70ff 	mov.w	r0, #510	; 0x1fe
 800808c:	e7c6      	b.n	800801c <f_read+0x328>
 800808e:	bf00      	nop

08008090 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8008090:	b4f0      	push	{r4, r5, r6, r7}
  if(disk.nbr < _VOLUMES)
 8008092:	4b10      	ldr	r3, [pc, #64]	; (80080d4 <FATFS_LinkDriver+0x44>)
 8008094:	7a5c      	ldrb	r4, [r3, #9]
 8008096:	b114      	cbz	r4, 800809e <FATFS_LinkDriver+0xe>
  uint8_t ret = 1;
 8008098:	2001      	movs	r0, #1
  return FATFS_LinkDriverEx(drv, path, 0);
}
 800809a:	bcf0      	pop	{r4, r5, r6, r7}
 800809c:	4770      	bx	lr
    disk.is_initialized[disk.nbr] = 0;
 800809e:	7a5f      	ldrb	r7, [r3, #9]
    disk.drv[disk.nbr] = drv;
 80080a0:	7a5e      	ldrb	r6, [r3, #9]
    disk.lun[disk.nbr] = lun;
 80080a2:	7a5d      	ldrb	r5, [r3, #9]
 80080a4:	f004 02ff 	and.w	r2, r4, #255	; 0xff
    DiskNum = disk.nbr++;
 80080a8:	7a5c      	ldrb	r4, [r3, #9]
    disk.is_initialized[disk.nbr] = 0;
 80080aa:	55da      	strb	r2, [r3, r7]
    disk.drv[disk.nbr] = drv;
 80080ac:	eb03 0686 	add.w	r6, r3, r6, lsl #2
    DiskNum = disk.nbr++;
 80080b0:	b2e4      	uxtb	r4, r4
    disk.drv[disk.nbr] = drv;
 80080b2:	6070      	str	r0, [r6, #4]
    disk.lun[disk.nbr] = lun;
 80080b4:	441d      	add	r5, r3
    DiskNum = disk.nbr++;
 80080b6:	1c60      	adds	r0, r4, #1
 80080b8:	b2c0      	uxtb	r0, r0
 80080ba:	7258      	strb	r0, [r3, #9]
    disk.lun[disk.nbr] = lun;
 80080bc:	722a      	strb	r2, [r5, #8]
    path[0] = DiskNum + '0';
 80080be:	3430      	adds	r4, #48	; 0x30
    path[1] = ':';
 80080c0:	253a      	movs	r5, #58	; 0x3a
    path[2] = '/';
 80080c2:	232f      	movs	r3, #47	; 0x2f
    path[0] = DiskNum + '0';
 80080c4:	700c      	strb	r4, [r1, #0]
    path[3] = 0;
 80080c6:	4610      	mov	r0, r2
    path[1] = ':';
 80080c8:	704d      	strb	r5, [r1, #1]
    path[3] = 0;
 80080ca:	70ca      	strb	r2, [r1, #3]
    path[2] = '/';
 80080cc:	708b      	strb	r3, [r1, #2]
}
 80080ce:	bcf0      	pop	{r4, r5, r6, r7}
 80080d0:	4770      	bx	lr
 80080d2:	bf00      	nop
 80080d4:	2000042c 	.word	0x2000042c

080080d8 <ff_convert>:
)
{
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 80080d8:	287f      	cmp	r0, #127	; 0x7f
 80080da:	d919      	bls.n	8008110 <ff_convert+0x38>
		c = chr;

	} else {
		if (dir) {		/* OEM code to Unicode */
 80080dc:	b989      	cbnz	r1, 8008102 <ff_convert+0x2a>
{
 80080de:	b410      	push	{r4}
 80080e0:	4b0e      	ldr	r3, [pc, #56]	; (800811c <ff_convert+0x44>)
 80080e2:	e001      	b.n	80080e8 <ff_convert+0x10>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 80080e4:	2980      	cmp	r1, #128	; 0x80
 80080e6:	d016      	beq.n	8008116 <ff_convert+0x3e>
				if (chr == Tbl[c]) break;
 80080e8:	f833 2b02 	ldrh.w	r2, [r3], #2
 80080ec:	4282      	cmp	r2, r0
 80080ee:	b28c      	uxth	r4, r1
 80080f0:	f101 0101 	add.w	r1, r1, #1
 80080f4:	d1f6      	bne.n	80080e4 <ff_convert+0xc>
 80080f6:	f104 0080 	add.w	r0, r4, #128	; 0x80
 80080fa:	b280      	uxth	r0, r0
			c = (c + 0x80) & 0xFF;
		}
	}

	return c;
}
 80080fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008100:	4770      	bx	lr
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8008102:	28ff      	cmp	r0, #255	; 0xff
 8008104:	d805      	bhi.n	8008112 <ff_convert+0x3a>
 8008106:	4b05      	ldr	r3, [pc, #20]	; (800811c <ff_convert+0x44>)
 8008108:	3880      	subs	r0, #128	; 0x80
 800810a:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 800810e:	4770      	bx	lr
}
 8008110:	4770      	bx	lr
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8008112:	2000      	movs	r0, #0
 8008114:	4770      	bx	lr
 8008116:	2000      	movs	r0, #0
 8008118:	e7f0      	b.n	80080fc <ff_convert+0x24>
 800811a:	bf00      	nop
 800811c:	0800ad1c 	.word	0x0800ad1c

08008120 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8008120:	b470      	push	{r4, r5, r6}
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8008122:	4b23      	ldr	r3, [pc, #140]	; (80081b0 <ff_wtoupper+0x90>)
 8008124:	4a23      	ldr	r2, [pc, #140]	; (80081b4 <ff_wtoupper+0x94>)
 8008126:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 800812a:	bf28      	it	cs
 800812c:	4613      	movcs	r3, r2
 800812e:	3304      	adds	r3, #4
 8008130:	e00b      	b.n	800814a <ff_wtoupper+0x2a>
	for (;;) {
		bc = *p++;								/* Get block base */
		if (!bc || chr < bc) break;
 8008132:	4288      	cmp	r0, r1
 8008134:	d30e      	bcc.n	8008154 <ff_wtoupper+0x34>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8008136:	f833 2c02 	ldrh.w	r2, [r3, #-2]
 800813a:	b2d4      	uxtb	r4, r2
		if (chr < bc + nc) {	/* In the block? */
 800813c:	1865      	adds	r5, r4, r1
 800813e:	42a8      	cmp	r0, r5
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8008140:	ea4f 2212 	mov.w	r2, r2, lsr #8
		if (chr < bc + nc) {	/* In the block? */
 8008144:	db08      	blt.n	8008158 <ff_wtoupper+0x38>
 8008146:	3304      	adds	r3, #4
			case 7: chr -= 80; break;				/* Shift -80 */
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
			}
			break;
		}
		if (!cmd) p += nc;
 8008148:	b17a      	cbz	r2, 800816a <ff_wtoupper+0x4a>
		bc = *p++;								/* Get block base */
 800814a:	f833 1c04 	ldrh.w	r1, [r3, #-4]
 800814e:	461e      	mov	r6, r3
		if (!bc || chr < bc) break;
 8008150:	2900      	cmp	r1, #0
 8008152:	d1ee      	bne.n	8008132 <ff_wtoupper+0x12>
	}

	return chr;
}
 8008154:	bc70      	pop	{r4, r5, r6}
 8008156:	4770      	bx	lr
			switch (cmd) {
 8008158:	2a08      	cmp	r2, #8
 800815a:	d8fb      	bhi.n	8008154 <ff_wtoupper+0x34>
 800815c:	e8df f002 	tbb	[pc, r2]
 8008160:	1916100c 	.word	0x1916100c
 8008164:	25221f1c 	.word	0x25221f1c
 8008168:	08          	.byte	0x08
 8008169:	00          	.byte	0x00
		if (!cmd) p += nc;
 800816a:	eb06 0344 	add.w	r3, r6, r4, lsl #1
 800816e:	e7de      	b.n	800812e <ff_wtoupper+0xe>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8008170:	f5a0 50e3 	sub.w	r0, r0, #7264	; 0x1c60
 8008174:	b280      	uxth	r0, r0
 8008176:	e7ed      	b.n	8008154 <ff_wtoupper+0x34>
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8008178:	1a41      	subs	r1, r0, r1
 800817a:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
 800817e:	e7e9      	b.n	8008154 <ff_wtoupper+0x34>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8008180:	1a41      	subs	r1, r0, r1
 8008182:	f001 0301 	and.w	r3, r1, #1
 8008186:	1ac0      	subs	r0, r0, r3
 8008188:	b280      	uxth	r0, r0
 800818a:	e7e3      	b.n	8008154 <ff_wtoupper+0x34>
			case 2: chr -= 16; break;				/* Shift -16 */
 800818c:	3810      	subs	r0, #16
 800818e:	b280      	uxth	r0, r0
 8008190:	e7e0      	b.n	8008154 <ff_wtoupper+0x34>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8008192:	3820      	subs	r0, #32
 8008194:	b280      	uxth	r0, r0
 8008196:	e7dd      	b.n	8008154 <ff_wtoupper+0x34>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8008198:	3830      	subs	r0, #48	; 0x30
 800819a:	b280      	uxth	r0, r0
 800819c:	e7da      	b.n	8008154 <ff_wtoupper+0x34>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800819e:	381a      	subs	r0, #26
 80081a0:	b280      	uxth	r0, r0
 80081a2:	e7d7      	b.n	8008154 <ff_wtoupper+0x34>
			case 6:	chr += 8; break;				/* Shift +8 */
 80081a4:	3008      	adds	r0, #8
 80081a6:	b280      	uxth	r0, r0
 80081a8:	e7d4      	b.n	8008154 <ff_wtoupper+0x34>
			case 7: chr -= 80; break;				/* Shift -80 */
 80081aa:	3850      	subs	r0, #80	; 0x50
 80081ac:	b280      	uxth	r0, r0
 80081ae:	e7d1      	b.n	8008154 <ff_wtoupper+0x34>
 80081b0:	0800ae1c 	.word	0x0800ae1c
 80081b4:	0800b010 	.word	0x0800b010

080081b8 <__errno>:
 80081b8:	4b01      	ldr	r3, [pc, #4]	; (80081c0 <__errno+0x8>)
 80081ba:	6818      	ldr	r0, [r3, #0]
 80081bc:	4770      	bx	lr
 80081be:	bf00      	nop
 80081c0:	20000014 	.word	0x20000014

080081c4 <__libc_init_array>:
 80081c4:	b570      	push	{r4, r5, r6, lr}
 80081c6:	4e0d      	ldr	r6, [pc, #52]	; (80081fc <__libc_init_array+0x38>)
 80081c8:	4c0d      	ldr	r4, [pc, #52]	; (8008200 <__libc_init_array+0x3c>)
 80081ca:	1ba4      	subs	r4, r4, r6
 80081cc:	10a4      	asrs	r4, r4, #2
 80081ce:	2500      	movs	r5, #0
 80081d0:	42a5      	cmp	r5, r4
 80081d2:	d109      	bne.n	80081e8 <__libc_init_array+0x24>
 80081d4:	4e0b      	ldr	r6, [pc, #44]	; (8008204 <__libc_init_array+0x40>)
 80081d6:	4c0c      	ldr	r4, [pc, #48]	; (8008208 <__libc_init_array+0x44>)
 80081d8:	f002 fbac 	bl	800a934 <_init>
 80081dc:	1ba4      	subs	r4, r4, r6
 80081de:	10a4      	asrs	r4, r4, #2
 80081e0:	2500      	movs	r5, #0
 80081e2:	42a5      	cmp	r5, r4
 80081e4:	d105      	bne.n	80081f2 <__libc_init_array+0x2e>
 80081e6:	bd70      	pop	{r4, r5, r6, pc}
 80081e8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80081ec:	4798      	blx	r3
 80081ee:	3501      	adds	r5, #1
 80081f0:	e7ee      	b.n	80081d0 <__libc_init_array+0xc>
 80081f2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80081f6:	4798      	blx	r3
 80081f8:	3501      	adds	r5, #1
 80081fa:	e7f2      	b.n	80081e2 <__libc_init_array+0x1e>
 80081fc:	0800b398 	.word	0x0800b398
 8008200:	0800b398 	.word	0x0800b398
 8008204:	0800b398 	.word	0x0800b398
 8008208:	0800b39c 	.word	0x0800b39c

0800820c <memset>:
 800820c:	4402      	add	r2, r0
 800820e:	4603      	mov	r3, r0
 8008210:	4293      	cmp	r3, r2
 8008212:	d100      	bne.n	8008216 <memset+0xa>
 8008214:	4770      	bx	lr
 8008216:	f803 1b01 	strb.w	r1, [r3], #1
 800821a:	e7f9      	b.n	8008210 <memset+0x4>

0800821c <__cvt>:
 800821c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008220:	ec55 4b10 	vmov	r4, r5, d0
 8008224:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8008226:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800822a:	2d00      	cmp	r5, #0
 800822c:	460e      	mov	r6, r1
 800822e:	4691      	mov	r9, r2
 8008230:	4619      	mov	r1, r3
 8008232:	bfb8      	it	lt
 8008234:	4622      	movlt	r2, r4
 8008236:	462b      	mov	r3, r5
 8008238:	f027 0720 	bic.w	r7, r7, #32
 800823c:	bfbb      	ittet	lt
 800823e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008242:	461d      	movlt	r5, r3
 8008244:	2300      	movge	r3, #0
 8008246:	232d      	movlt	r3, #45	; 0x2d
 8008248:	bfb8      	it	lt
 800824a:	4614      	movlt	r4, r2
 800824c:	2f46      	cmp	r7, #70	; 0x46
 800824e:	700b      	strb	r3, [r1, #0]
 8008250:	d004      	beq.n	800825c <__cvt+0x40>
 8008252:	2f45      	cmp	r7, #69	; 0x45
 8008254:	d100      	bne.n	8008258 <__cvt+0x3c>
 8008256:	3601      	adds	r6, #1
 8008258:	2102      	movs	r1, #2
 800825a:	e000      	b.n	800825e <__cvt+0x42>
 800825c:	2103      	movs	r1, #3
 800825e:	ab03      	add	r3, sp, #12
 8008260:	9301      	str	r3, [sp, #4]
 8008262:	ab02      	add	r3, sp, #8
 8008264:	9300      	str	r3, [sp, #0]
 8008266:	4632      	mov	r2, r6
 8008268:	4653      	mov	r3, sl
 800826a:	ec45 4b10 	vmov	d0, r4, r5
 800826e:	f000 fdfb 	bl	8008e68 <_dtoa_r>
 8008272:	2f47      	cmp	r7, #71	; 0x47
 8008274:	4680      	mov	r8, r0
 8008276:	d102      	bne.n	800827e <__cvt+0x62>
 8008278:	f019 0f01 	tst.w	r9, #1
 800827c:	d026      	beq.n	80082cc <__cvt+0xb0>
 800827e:	2f46      	cmp	r7, #70	; 0x46
 8008280:	eb08 0906 	add.w	r9, r8, r6
 8008284:	d111      	bne.n	80082aa <__cvt+0x8e>
 8008286:	f898 3000 	ldrb.w	r3, [r8]
 800828a:	2b30      	cmp	r3, #48	; 0x30
 800828c:	d10a      	bne.n	80082a4 <__cvt+0x88>
 800828e:	2200      	movs	r2, #0
 8008290:	2300      	movs	r3, #0
 8008292:	4620      	mov	r0, r4
 8008294:	4629      	mov	r1, r5
 8008296:	f7f8 fc27 	bl	8000ae8 <__aeabi_dcmpeq>
 800829a:	b918      	cbnz	r0, 80082a4 <__cvt+0x88>
 800829c:	f1c6 0601 	rsb	r6, r6, #1
 80082a0:	f8ca 6000 	str.w	r6, [sl]
 80082a4:	f8da 3000 	ldr.w	r3, [sl]
 80082a8:	4499      	add	r9, r3
 80082aa:	2200      	movs	r2, #0
 80082ac:	2300      	movs	r3, #0
 80082ae:	4620      	mov	r0, r4
 80082b0:	4629      	mov	r1, r5
 80082b2:	f7f8 fc19 	bl	8000ae8 <__aeabi_dcmpeq>
 80082b6:	b938      	cbnz	r0, 80082c8 <__cvt+0xac>
 80082b8:	2230      	movs	r2, #48	; 0x30
 80082ba:	9b03      	ldr	r3, [sp, #12]
 80082bc:	454b      	cmp	r3, r9
 80082be:	d205      	bcs.n	80082cc <__cvt+0xb0>
 80082c0:	1c59      	adds	r1, r3, #1
 80082c2:	9103      	str	r1, [sp, #12]
 80082c4:	701a      	strb	r2, [r3, #0]
 80082c6:	e7f8      	b.n	80082ba <__cvt+0x9e>
 80082c8:	f8cd 900c 	str.w	r9, [sp, #12]
 80082cc:	9b03      	ldr	r3, [sp, #12]
 80082ce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80082d0:	eba3 0308 	sub.w	r3, r3, r8
 80082d4:	4640      	mov	r0, r8
 80082d6:	6013      	str	r3, [r2, #0]
 80082d8:	b004      	add	sp, #16
 80082da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080082de <__exponent>:
 80082de:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80082e0:	2900      	cmp	r1, #0
 80082e2:	4604      	mov	r4, r0
 80082e4:	bfba      	itte	lt
 80082e6:	4249      	neglt	r1, r1
 80082e8:	232d      	movlt	r3, #45	; 0x2d
 80082ea:	232b      	movge	r3, #43	; 0x2b
 80082ec:	2909      	cmp	r1, #9
 80082ee:	f804 2b02 	strb.w	r2, [r4], #2
 80082f2:	7043      	strb	r3, [r0, #1]
 80082f4:	dd20      	ble.n	8008338 <__exponent+0x5a>
 80082f6:	f10d 0307 	add.w	r3, sp, #7
 80082fa:	461f      	mov	r7, r3
 80082fc:	260a      	movs	r6, #10
 80082fe:	fb91 f5f6 	sdiv	r5, r1, r6
 8008302:	fb06 1115 	mls	r1, r6, r5, r1
 8008306:	3130      	adds	r1, #48	; 0x30
 8008308:	2d09      	cmp	r5, #9
 800830a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800830e:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 8008312:	4629      	mov	r1, r5
 8008314:	dc09      	bgt.n	800832a <__exponent+0x4c>
 8008316:	3130      	adds	r1, #48	; 0x30
 8008318:	3b02      	subs	r3, #2
 800831a:	f802 1c01 	strb.w	r1, [r2, #-1]
 800831e:	42bb      	cmp	r3, r7
 8008320:	4622      	mov	r2, r4
 8008322:	d304      	bcc.n	800832e <__exponent+0x50>
 8008324:	1a10      	subs	r0, r2, r0
 8008326:	b003      	add	sp, #12
 8008328:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800832a:	4613      	mov	r3, r2
 800832c:	e7e7      	b.n	80082fe <__exponent+0x20>
 800832e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008332:	f804 2b01 	strb.w	r2, [r4], #1
 8008336:	e7f2      	b.n	800831e <__exponent+0x40>
 8008338:	2330      	movs	r3, #48	; 0x30
 800833a:	4419      	add	r1, r3
 800833c:	7083      	strb	r3, [r0, #2]
 800833e:	1d02      	adds	r2, r0, #4
 8008340:	70c1      	strb	r1, [r0, #3]
 8008342:	e7ef      	b.n	8008324 <__exponent+0x46>

08008344 <_printf_float>:
 8008344:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008348:	b08d      	sub	sp, #52	; 0x34
 800834a:	460c      	mov	r4, r1
 800834c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8008350:	4616      	mov	r6, r2
 8008352:	461f      	mov	r7, r3
 8008354:	4605      	mov	r5, r0
 8008356:	f001 fcb9 	bl	8009ccc <_localeconv_r>
 800835a:	6803      	ldr	r3, [r0, #0]
 800835c:	9304      	str	r3, [sp, #16]
 800835e:	4618      	mov	r0, r3
 8008360:	f7f7 ff46 	bl	80001f0 <strlen>
 8008364:	2300      	movs	r3, #0
 8008366:	930a      	str	r3, [sp, #40]	; 0x28
 8008368:	f8d8 3000 	ldr.w	r3, [r8]
 800836c:	9005      	str	r0, [sp, #20]
 800836e:	3307      	adds	r3, #7
 8008370:	f023 0307 	bic.w	r3, r3, #7
 8008374:	f103 0208 	add.w	r2, r3, #8
 8008378:	f894 a018 	ldrb.w	sl, [r4, #24]
 800837c:	f8d4 b000 	ldr.w	fp, [r4]
 8008380:	f8c8 2000 	str.w	r2, [r8]
 8008384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008388:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800838c:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008390:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008394:	9307      	str	r3, [sp, #28]
 8008396:	f8cd 8018 	str.w	r8, [sp, #24]
 800839a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800839e:	4ba7      	ldr	r3, [pc, #668]	; (800863c <_printf_float+0x2f8>)
 80083a0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80083a4:	f7f8 fbd2 	bl	8000b4c <__aeabi_dcmpun>
 80083a8:	bb70      	cbnz	r0, 8008408 <_printf_float+0xc4>
 80083aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80083ae:	4ba3      	ldr	r3, [pc, #652]	; (800863c <_printf_float+0x2f8>)
 80083b0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80083b4:	f7f8 fbac 	bl	8000b10 <__aeabi_dcmple>
 80083b8:	bb30      	cbnz	r0, 8008408 <_printf_float+0xc4>
 80083ba:	2200      	movs	r2, #0
 80083bc:	2300      	movs	r3, #0
 80083be:	4640      	mov	r0, r8
 80083c0:	4649      	mov	r1, r9
 80083c2:	f7f8 fb9b 	bl	8000afc <__aeabi_dcmplt>
 80083c6:	b110      	cbz	r0, 80083ce <_printf_float+0x8a>
 80083c8:	232d      	movs	r3, #45	; 0x2d
 80083ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80083ce:	4a9c      	ldr	r2, [pc, #624]	; (8008640 <_printf_float+0x2fc>)
 80083d0:	4b9c      	ldr	r3, [pc, #624]	; (8008644 <_printf_float+0x300>)
 80083d2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80083d6:	bf8c      	ite	hi
 80083d8:	4690      	movhi	r8, r2
 80083da:	4698      	movls	r8, r3
 80083dc:	2303      	movs	r3, #3
 80083de:	f02b 0204 	bic.w	r2, fp, #4
 80083e2:	6123      	str	r3, [r4, #16]
 80083e4:	6022      	str	r2, [r4, #0]
 80083e6:	f04f 0900 	mov.w	r9, #0
 80083ea:	9700      	str	r7, [sp, #0]
 80083ec:	4633      	mov	r3, r6
 80083ee:	aa0b      	add	r2, sp, #44	; 0x2c
 80083f0:	4621      	mov	r1, r4
 80083f2:	4628      	mov	r0, r5
 80083f4:	f000 f9e6 	bl	80087c4 <_printf_common>
 80083f8:	3001      	adds	r0, #1
 80083fa:	f040 808d 	bne.w	8008518 <_printf_float+0x1d4>
 80083fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008402:	b00d      	add	sp, #52	; 0x34
 8008404:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008408:	4642      	mov	r2, r8
 800840a:	464b      	mov	r3, r9
 800840c:	4640      	mov	r0, r8
 800840e:	4649      	mov	r1, r9
 8008410:	f7f8 fb9c 	bl	8000b4c <__aeabi_dcmpun>
 8008414:	b110      	cbz	r0, 800841c <_printf_float+0xd8>
 8008416:	4a8c      	ldr	r2, [pc, #560]	; (8008648 <_printf_float+0x304>)
 8008418:	4b8c      	ldr	r3, [pc, #560]	; (800864c <_printf_float+0x308>)
 800841a:	e7da      	b.n	80083d2 <_printf_float+0x8e>
 800841c:	6861      	ldr	r1, [r4, #4]
 800841e:	1c4b      	adds	r3, r1, #1
 8008420:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8008424:	a80a      	add	r0, sp, #40	; 0x28
 8008426:	d13e      	bne.n	80084a6 <_printf_float+0x162>
 8008428:	2306      	movs	r3, #6
 800842a:	6063      	str	r3, [r4, #4]
 800842c:	2300      	movs	r3, #0
 800842e:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8008432:	ab09      	add	r3, sp, #36	; 0x24
 8008434:	9300      	str	r3, [sp, #0]
 8008436:	ec49 8b10 	vmov	d0, r8, r9
 800843a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800843e:	6022      	str	r2, [r4, #0]
 8008440:	f8cd a004 	str.w	sl, [sp, #4]
 8008444:	6861      	ldr	r1, [r4, #4]
 8008446:	4628      	mov	r0, r5
 8008448:	f7ff fee8 	bl	800821c <__cvt>
 800844c:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8008450:	2b47      	cmp	r3, #71	; 0x47
 8008452:	4680      	mov	r8, r0
 8008454:	d109      	bne.n	800846a <_printf_float+0x126>
 8008456:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008458:	1cd8      	adds	r0, r3, #3
 800845a:	db02      	blt.n	8008462 <_printf_float+0x11e>
 800845c:	6862      	ldr	r2, [r4, #4]
 800845e:	4293      	cmp	r3, r2
 8008460:	dd47      	ble.n	80084f2 <_printf_float+0x1ae>
 8008462:	f1aa 0a02 	sub.w	sl, sl, #2
 8008466:	fa5f fa8a 	uxtb.w	sl, sl
 800846a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800846e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008470:	d824      	bhi.n	80084bc <_printf_float+0x178>
 8008472:	3901      	subs	r1, #1
 8008474:	4652      	mov	r2, sl
 8008476:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800847a:	9109      	str	r1, [sp, #36]	; 0x24
 800847c:	f7ff ff2f 	bl	80082de <__exponent>
 8008480:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008482:	1813      	adds	r3, r2, r0
 8008484:	2a01      	cmp	r2, #1
 8008486:	4681      	mov	r9, r0
 8008488:	6123      	str	r3, [r4, #16]
 800848a:	dc02      	bgt.n	8008492 <_printf_float+0x14e>
 800848c:	6822      	ldr	r2, [r4, #0]
 800848e:	07d1      	lsls	r1, r2, #31
 8008490:	d501      	bpl.n	8008496 <_printf_float+0x152>
 8008492:	3301      	adds	r3, #1
 8008494:	6123      	str	r3, [r4, #16]
 8008496:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800849a:	2b00      	cmp	r3, #0
 800849c:	d0a5      	beq.n	80083ea <_printf_float+0xa6>
 800849e:	232d      	movs	r3, #45	; 0x2d
 80084a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80084a4:	e7a1      	b.n	80083ea <_printf_float+0xa6>
 80084a6:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 80084aa:	f000 8177 	beq.w	800879c <_printf_float+0x458>
 80084ae:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80084b2:	d1bb      	bne.n	800842c <_printf_float+0xe8>
 80084b4:	2900      	cmp	r1, #0
 80084b6:	d1b9      	bne.n	800842c <_printf_float+0xe8>
 80084b8:	2301      	movs	r3, #1
 80084ba:	e7b6      	b.n	800842a <_printf_float+0xe6>
 80084bc:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 80084c0:	d119      	bne.n	80084f6 <_printf_float+0x1b2>
 80084c2:	2900      	cmp	r1, #0
 80084c4:	6863      	ldr	r3, [r4, #4]
 80084c6:	dd0c      	ble.n	80084e2 <_printf_float+0x19e>
 80084c8:	6121      	str	r1, [r4, #16]
 80084ca:	b913      	cbnz	r3, 80084d2 <_printf_float+0x18e>
 80084cc:	6822      	ldr	r2, [r4, #0]
 80084ce:	07d2      	lsls	r2, r2, #31
 80084d0:	d502      	bpl.n	80084d8 <_printf_float+0x194>
 80084d2:	3301      	adds	r3, #1
 80084d4:	440b      	add	r3, r1
 80084d6:	6123      	str	r3, [r4, #16]
 80084d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084da:	65a3      	str	r3, [r4, #88]	; 0x58
 80084dc:	f04f 0900 	mov.w	r9, #0
 80084e0:	e7d9      	b.n	8008496 <_printf_float+0x152>
 80084e2:	b913      	cbnz	r3, 80084ea <_printf_float+0x1a6>
 80084e4:	6822      	ldr	r2, [r4, #0]
 80084e6:	07d0      	lsls	r0, r2, #31
 80084e8:	d501      	bpl.n	80084ee <_printf_float+0x1aa>
 80084ea:	3302      	adds	r3, #2
 80084ec:	e7f3      	b.n	80084d6 <_printf_float+0x192>
 80084ee:	2301      	movs	r3, #1
 80084f0:	e7f1      	b.n	80084d6 <_printf_float+0x192>
 80084f2:	f04f 0a67 	mov.w	sl, #103	; 0x67
 80084f6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80084fa:	4293      	cmp	r3, r2
 80084fc:	db05      	blt.n	800850a <_printf_float+0x1c6>
 80084fe:	6822      	ldr	r2, [r4, #0]
 8008500:	6123      	str	r3, [r4, #16]
 8008502:	07d1      	lsls	r1, r2, #31
 8008504:	d5e8      	bpl.n	80084d8 <_printf_float+0x194>
 8008506:	3301      	adds	r3, #1
 8008508:	e7e5      	b.n	80084d6 <_printf_float+0x192>
 800850a:	2b00      	cmp	r3, #0
 800850c:	bfd4      	ite	le
 800850e:	f1c3 0302 	rsble	r3, r3, #2
 8008512:	2301      	movgt	r3, #1
 8008514:	4413      	add	r3, r2
 8008516:	e7de      	b.n	80084d6 <_printf_float+0x192>
 8008518:	6823      	ldr	r3, [r4, #0]
 800851a:	055a      	lsls	r2, r3, #21
 800851c:	d407      	bmi.n	800852e <_printf_float+0x1ea>
 800851e:	6923      	ldr	r3, [r4, #16]
 8008520:	4642      	mov	r2, r8
 8008522:	4631      	mov	r1, r6
 8008524:	4628      	mov	r0, r5
 8008526:	47b8      	blx	r7
 8008528:	3001      	adds	r0, #1
 800852a:	d12b      	bne.n	8008584 <_printf_float+0x240>
 800852c:	e767      	b.n	80083fe <_printf_float+0xba>
 800852e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8008532:	f240 80dc 	bls.w	80086ee <_printf_float+0x3aa>
 8008536:	2200      	movs	r2, #0
 8008538:	2300      	movs	r3, #0
 800853a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800853e:	f7f8 fad3 	bl	8000ae8 <__aeabi_dcmpeq>
 8008542:	2800      	cmp	r0, #0
 8008544:	d033      	beq.n	80085ae <_printf_float+0x26a>
 8008546:	2301      	movs	r3, #1
 8008548:	4a41      	ldr	r2, [pc, #260]	; (8008650 <_printf_float+0x30c>)
 800854a:	4631      	mov	r1, r6
 800854c:	4628      	mov	r0, r5
 800854e:	47b8      	blx	r7
 8008550:	3001      	adds	r0, #1
 8008552:	f43f af54 	beq.w	80083fe <_printf_float+0xba>
 8008556:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800855a:	429a      	cmp	r2, r3
 800855c:	db02      	blt.n	8008564 <_printf_float+0x220>
 800855e:	6823      	ldr	r3, [r4, #0]
 8008560:	07d8      	lsls	r0, r3, #31
 8008562:	d50f      	bpl.n	8008584 <_printf_float+0x240>
 8008564:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008568:	4631      	mov	r1, r6
 800856a:	4628      	mov	r0, r5
 800856c:	47b8      	blx	r7
 800856e:	3001      	adds	r0, #1
 8008570:	f43f af45 	beq.w	80083fe <_printf_float+0xba>
 8008574:	f04f 0800 	mov.w	r8, #0
 8008578:	f104 091a 	add.w	r9, r4, #26
 800857c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800857e:	3b01      	subs	r3, #1
 8008580:	4543      	cmp	r3, r8
 8008582:	dc09      	bgt.n	8008598 <_printf_float+0x254>
 8008584:	6823      	ldr	r3, [r4, #0]
 8008586:	079b      	lsls	r3, r3, #30
 8008588:	f100 8103 	bmi.w	8008792 <_printf_float+0x44e>
 800858c:	68e0      	ldr	r0, [r4, #12]
 800858e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008590:	4298      	cmp	r0, r3
 8008592:	bfb8      	it	lt
 8008594:	4618      	movlt	r0, r3
 8008596:	e734      	b.n	8008402 <_printf_float+0xbe>
 8008598:	2301      	movs	r3, #1
 800859a:	464a      	mov	r2, r9
 800859c:	4631      	mov	r1, r6
 800859e:	4628      	mov	r0, r5
 80085a0:	47b8      	blx	r7
 80085a2:	3001      	adds	r0, #1
 80085a4:	f43f af2b 	beq.w	80083fe <_printf_float+0xba>
 80085a8:	f108 0801 	add.w	r8, r8, #1
 80085ac:	e7e6      	b.n	800857c <_printf_float+0x238>
 80085ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	dc2b      	bgt.n	800860c <_printf_float+0x2c8>
 80085b4:	2301      	movs	r3, #1
 80085b6:	4a26      	ldr	r2, [pc, #152]	; (8008650 <_printf_float+0x30c>)
 80085b8:	4631      	mov	r1, r6
 80085ba:	4628      	mov	r0, r5
 80085bc:	47b8      	blx	r7
 80085be:	3001      	adds	r0, #1
 80085c0:	f43f af1d 	beq.w	80083fe <_printf_float+0xba>
 80085c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085c6:	b923      	cbnz	r3, 80085d2 <_printf_float+0x28e>
 80085c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80085ca:	b913      	cbnz	r3, 80085d2 <_printf_float+0x28e>
 80085cc:	6823      	ldr	r3, [r4, #0]
 80085ce:	07d9      	lsls	r1, r3, #31
 80085d0:	d5d8      	bpl.n	8008584 <_printf_float+0x240>
 80085d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80085d6:	4631      	mov	r1, r6
 80085d8:	4628      	mov	r0, r5
 80085da:	47b8      	blx	r7
 80085dc:	3001      	adds	r0, #1
 80085de:	f43f af0e 	beq.w	80083fe <_printf_float+0xba>
 80085e2:	f04f 0900 	mov.w	r9, #0
 80085e6:	f104 0a1a 	add.w	sl, r4, #26
 80085ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085ec:	425b      	negs	r3, r3
 80085ee:	454b      	cmp	r3, r9
 80085f0:	dc01      	bgt.n	80085f6 <_printf_float+0x2b2>
 80085f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80085f4:	e794      	b.n	8008520 <_printf_float+0x1dc>
 80085f6:	2301      	movs	r3, #1
 80085f8:	4652      	mov	r2, sl
 80085fa:	4631      	mov	r1, r6
 80085fc:	4628      	mov	r0, r5
 80085fe:	47b8      	blx	r7
 8008600:	3001      	adds	r0, #1
 8008602:	f43f aefc 	beq.w	80083fe <_printf_float+0xba>
 8008606:	f109 0901 	add.w	r9, r9, #1
 800860a:	e7ee      	b.n	80085ea <_printf_float+0x2a6>
 800860c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800860e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008610:	429a      	cmp	r2, r3
 8008612:	bfa8      	it	ge
 8008614:	461a      	movge	r2, r3
 8008616:	2a00      	cmp	r2, #0
 8008618:	4691      	mov	r9, r2
 800861a:	dd07      	ble.n	800862c <_printf_float+0x2e8>
 800861c:	4613      	mov	r3, r2
 800861e:	4631      	mov	r1, r6
 8008620:	4642      	mov	r2, r8
 8008622:	4628      	mov	r0, r5
 8008624:	47b8      	blx	r7
 8008626:	3001      	adds	r0, #1
 8008628:	f43f aee9 	beq.w	80083fe <_printf_float+0xba>
 800862c:	f104 031a 	add.w	r3, r4, #26
 8008630:	f04f 0b00 	mov.w	fp, #0
 8008634:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008638:	9306      	str	r3, [sp, #24]
 800863a:	e015      	b.n	8008668 <_printf_float+0x324>
 800863c:	7fefffff 	.word	0x7fefffff
 8008640:	0800b0d4 	.word	0x0800b0d4
 8008644:	0800b0d0 	.word	0x0800b0d0
 8008648:	0800b0dc 	.word	0x0800b0dc
 800864c:	0800b0d8 	.word	0x0800b0d8
 8008650:	0800b0e0 	.word	0x0800b0e0
 8008654:	2301      	movs	r3, #1
 8008656:	9a06      	ldr	r2, [sp, #24]
 8008658:	4631      	mov	r1, r6
 800865a:	4628      	mov	r0, r5
 800865c:	47b8      	blx	r7
 800865e:	3001      	adds	r0, #1
 8008660:	f43f aecd 	beq.w	80083fe <_printf_float+0xba>
 8008664:	f10b 0b01 	add.w	fp, fp, #1
 8008668:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800866c:	ebaa 0309 	sub.w	r3, sl, r9
 8008670:	455b      	cmp	r3, fp
 8008672:	dcef      	bgt.n	8008654 <_printf_float+0x310>
 8008674:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008678:	429a      	cmp	r2, r3
 800867a:	44d0      	add	r8, sl
 800867c:	db15      	blt.n	80086aa <_printf_float+0x366>
 800867e:	6823      	ldr	r3, [r4, #0]
 8008680:	07da      	lsls	r2, r3, #31
 8008682:	d412      	bmi.n	80086aa <_printf_float+0x366>
 8008684:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008686:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008688:	eba3 020a 	sub.w	r2, r3, sl
 800868c:	eba3 0a01 	sub.w	sl, r3, r1
 8008690:	4592      	cmp	sl, r2
 8008692:	bfa8      	it	ge
 8008694:	4692      	movge	sl, r2
 8008696:	f1ba 0f00 	cmp.w	sl, #0
 800869a:	dc0e      	bgt.n	80086ba <_printf_float+0x376>
 800869c:	f04f 0800 	mov.w	r8, #0
 80086a0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80086a4:	f104 091a 	add.w	r9, r4, #26
 80086a8:	e019      	b.n	80086de <_printf_float+0x39a>
 80086aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80086ae:	4631      	mov	r1, r6
 80086b0:	4628      	mov	r0, r5
 80086b2:	47b8      	blx	r7
 80086b4:	3001      	adds	r0, #1
 80086b6:	d1e5      	bne.n	8008684 <_printf_float+0x340>
 80086b8:	e6a1      	b.n	80083fe <_printf_float+0xba>
 80086ba:	4653      	mov	r3, sl
 80086bc:	4642      	mov	r2, r8
 80086be:	4631      	mov	r1, r6
 80086c0:	4628      	mov	r0, r5
 80086c2:	47b8      	blx	r7
 80086c4:	3001      	adds	r0, #1
 80086c6:	d1e9      	bne.n	800869c <_printf_float+0x358>
 80086c8:	e699      	b.n	80083fe <_printf_float+0xba>
 80086ca:	2301      	movs	r3, #1
 80086cc:	464a      	mov	r2, r9
 80086ce:	4631      	mov	r1, r6
 80086d0:	4628      	mov	r0, r5
 80086d2:	47b8      	blx	r7
 80086d4:	3001      	adds	r0, #1
 80086d6:	f43f ae92 	beq.w	80083fe <_printf_float+0xba>
 80086da:	f108 0801 	add.w	r8, r8, #1
 80086de:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80086e2:	1a9b      	subs	r3, r3, r2
 80086e4:	eba3 030a 	sub.w	r3, r3, sl
 80086e8:	4543      	cmp	r3, r8
 80086ea:	dcee      	bgt.n	80086ca <_printf_float+0x386>
 80086ec:	e74a      	b.n	8008584 <_printf_float+0x240>
 80086ee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80086f0:	2a01      	cmp	r2, #1
 80086f2:	dc01      	bgt.n	80086f8 <_printf_float+0x3b4>
 80086f4:	07db      	lsls	r3, r3, #31
 80086f6:	d53a      	bpl.n	800876e <_printf_float+0x42a>
 80086f8:	2301      	movs	r3, #1
 80086fa:	4642      	mov	r2, r8
 80086fc:	4631      	mov	r1, r6
 80086fe:	4628      	mov	r0, r5
 8008700:	47b8      	blx	r7
 8008702:	3001      	adds	r0, #1
 8008704:	f43f ae7b 	beq.w	80083fe <_printf_float+0xba>
 8008708:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800870c:	4631      	mov	r1, r6
 800870e:	4628      	mov	r0, r5
 8008710:	47b8      	blx	r7
 8008712:	3001      	adds	r0, #1
 8008714:	f108 0801 	add.w	r8, r8, #1
 8008718:	f43f ae71 	beq.w	80083fe <_printf_float+0xba>
 800871c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800871e:	2200      	movs	r2, #0
 8008720:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 8008724:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008728:	2300      	movs	r3, #0
 800872a:	f7f8 f9dd 	bl	8000ae8 <__aeabi_dcmpeq>
 800872e:	b9c8      	cbnz	r0, 8008764 <_printf_float+0x420>
 8008730:	4653      	mov	r3, sl
 8008732:	4642      	mov	r2, r8
 8008734:	4631      	mov	r1, r6
 8008736:	4628      	mov	r0, r5
 8008738:	47b8      	blx	r7
 800873a:	3001      	adds	r0, #1
 800873c:	d10e      	bne.n	800875c <_printf_float+0x418>
 800873e:	e65e      	b.n	80083fe <_printf_float+0xba>
 8008740:	2301      	movs	r3, #1
 8008742:	4652      	mov	r2, sl
 8008744:	4631      	mov	r1, r6
 8008746:	4628      	mov	r0, r5
 8008748:	47b8      	blx	r7
 800874a:	3001      	adds	r0, #1
 800874c:	f43f ae57 	beq.w	80083fe <_printf_float+0xba>
 8008750:	f108 0801 	add.w	r8, r8, #1
 8008754:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008756:	3b01      	subs	r3, #1
 8008758:	4543      	cmp	r3, r8
 800875a:	dcf1      	bgt.n	8008740 <_printf_float+0x3fc>
 800875c:	464b      	mov	r3, r9
 800875e:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008762:	e6de      	b.n	8008522 <_printf_float+0x1de>
 8008764:	f04f 0800 	mov.w	r8, #0
 8008768:	f104 0a1a 	add.w	sl, r4, #26
 800876c:	e7f2      	b.n	8008754 <_printf_float+0x410>
 800876e:	2301      	movs	r3, #1
 8008770:	e7df      	b.n	8008732 <_printf_float+0x3ee>
 8008772:	2301      	movs	r3, #1
 8008774:	464a      	mov	r2, r9
 8008776:	4631      	mov	r1, r6
 8008778:	4628      	mov	r0, r5
 800877a:	47b8      	blx	r7
 800877c:	3001      	adds	r0, #1
 800877e:	f43f ae3e 	beq.w	80083fe <_printf_float+0xba>
 8008782:	f108 0801 	add.w	r8, r8, #1
 8008786:	68e3      	ldr	r3, [r4, #12]
 8008788:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800878a:	1a9b      	subs	r3, r3, r2
 800878c:	4543      	cmp	r3, r8
 800878e:	dcf0      	bgt.n	8008772 <_printf_float+0x42e>
 8008790:	e6fc      	b.n	800858c <_printf_float+0x248>
 8008792:	f04f 0800 	mov.w	r8, #0
 8008796:	f104 0919 	add.w	r9, r4, #25
 800879a:	e7f4      	b.n	8008786 <_printf_float+0x442>
 800879c:	2900      	cmp	r1, #0
 800879e:	f43f ae8b 	beq.w	80084b8 <_printf_float+0x174>
 80087a2:	2300      	movs	r3, #0
 80087a4:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80087a8:	ab09      	add	r3, sp, #36	; 0x24
 80087aa:	9300      	str	r3, [sp, #0]
 80087ac:	ec49 8b10 	vmov	d0, r8, r9
 80087b0:	6022      	str	r2, [r4, #0]
 80087b2:	f8cd a004 	str.w	sl, [sp, #4]
 80087b6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80087ba:	4628      	mov	r0, r5
 80087bc:	f7ff fd2e 	bl	800821c <__cvt>
 80087c0:	4680      	mov	r8, r0
 80087c2:	e648      	b.n	8008456 <_printf_float+0x112>

080087c4 <_printf_common>:
 80087c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80087c8:	4691      	mov	r9, r2
 80087ca:	461f      	mov	r7, r3
 80087cc:	688a      	ldr	r2, [r1, #8]
 80087ce:	690b      	ldr	r3, [r1, #16]
 80087d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80087d4:	4293      	cmp	r3, r2
 80087d6:	bfb8      	it	lt
 80087d8:	4613      	movlt	r3, r2
 80087da:	f8c9 3000 	str.w	r3, [r9]
 80087de:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80087e2:	4606      	mov	r6, r0
 80087e4:	460c      	mov	r4, r1
 80087e6:	b112      	cbz	r2, 80087ee <_printf_common+0x2a>
 80087e8:	3301      	adds	r3, #1
 80087ea:	f8c9 3000 	str.w	r3, [r9]
 80087ee:	6823      	ldr	r3, [r4, #0]
 80087f0:	0699      	lsls	r1, r3, #26
 80087f2:	bf42      	ittt	mi
 80087f4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80087f8:	3302      	addmi	r3, #2
 80087fa:	f8c9 3000 	strmi.w	r3, [r9]
 80087fe:	6825      	ldr	r5, [r4, #0]
 8008800:	f015 0506 	ands.w	r5, r5, #6
 8008804:	d107      	bne.n	8008816 <_printf_common+0x52>
 8008806:	f104 0a19 	add.w	sl, r4, #25
 800880a:	68e3      	ldr	r3, [r4, #12]
 800880c:	f8d9 2000 	ldr.w	r2, [r9]
 8008810:	1a9b      	subs	r3, r3, r2
 8008812:	42ab      	cmp	r3, r5
 8008814:	dc28      	bgt.n	8008868 <_printf_common+0xa4>
 8008816:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800881a:	6822      	ldr	r2, [r4, #0]
 800881c:	3300      	adds	r3, #0
 800881e:	bf18      	it	ne
 8008820:	2301      	movne	r3, #1
 8008822:	0692      	lsls	r2, r2, #26
 8008824:	d42d      	bmi.n	8008882 <_printf_common+0xbe>
 8008826:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800882a:	4639      	mov	r1, r7
 800882c:	4630      	mov	r0, r6
 800882e:	47c0      	blx	r8
 8008830:	3001      	adds	r0, #1
 8008832:	d020      	beq.n	8008876 <_printf_common+0xb2>
 8008834:	6823      	ldr	r3, [r4, #0]
 8008836:	68e5      	ldr	r5, [r4, #12]
 8008838:	f8d9 2000 	ldr.w	r2, [r9]
 800883c:	f003 0306 	and.w	r3, r3, #6
 8008840:	2b04      	cmp	r3, #4
 8008842:	bf08      	it	eq
 8008844:	1aad      	subeq	r5, r5, r2
 8008846:	68a3      	ldr	r3, [r4, #8]
 8008848:	6922      	ldr	r2, [r4, #16]
 800884a:	bf0c      	ite	eq
 800884c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008850:	2500      	movne	r5, #0
 8008852:	4293      	cmp	r3, r2
 8008854:	bfc4      	itt	gt
 8008856:	1a9b      	subgt	r3, r3, r2
 8008858:	18ed      	addgt	r5, r5, r3
 800885a:	f04f 0900 	mov.w	r9, #0
 800885e:	341a      	adds	r4, #26
 8008860:	454d      	cmp	r5, r9
 8008862:	d11a      	bne.n	800889a <_printf_common+0xd6>
 8008864:	2000      	movs	r0, #0
 8008866:	e008      	b.n	800887a <_printf_common+0xb6>
 8008868:	2301      	movs	r3, #1
 800886a:	4652      	mov	r2, sl
 800886c:	4639      	mov	r1, r7
 800886e:	4630      	mov	r0, r6
 8008870:	47c0      	blx	r8
 8008872:	3001      	adds	r0, #1
 8008874:	d103      	bne.n	800887e <_printf_common+0xba>
 8008876:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800887a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800887e:	3501      	adds	r5, #1
 8008880:	e7c3      	b.n	800880a <_printf_common+0x46>
 8008882:	18e1      	adds	r1, r4, r3
 8008884:	1c5a      	adds	r2, r3, #1
 8008886:	2030      	movs	r0, #48	; 0x30
 8008888:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800888c:	4422      	add	r2, r4
 800888e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008892:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008896:	3302      	adds	r3, #2
 8008898:	e7c5      	b.n	8008826 <_printf_common+0x62>
 800889a:	2301      	movs	r3, #1
 800889c:	4622      	mov	r2, r4
 800889e:	4639      	mov	r1, r7
 80088a0:	4630      	mov	r0, r6
 80088a2:	47c0      	blx	r8
 80088a4:	3001      	adds	r0, #1
 80088a6:	d0e6      	beq.n	8008876 <_printf_common+0xb2>
 80088a8:	f109 0901 	add.w	r9, r9, #1
 80088ac:	e7d8      	b.n	8008860 <_printf_common+0x9c>
	...

080088b0 <_printf_i>:
 80088b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80088b4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80088b8:	460c      	mov	r4, r1
 80088ba:	7e09      	ldrb	r1, [r1, #24]
 80088bc:	b085      	sub	sp, #20
 80088be:	296e      	cmp	r1, #110	; 0x6e
 80088c0:	4617      	mov	r7, r2
 80088c2:	4606      	mov	r6, r0
 80088c4:	4698      	mov	r8, r3
 80088c6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80088c8:	f000 80b3 	beq.w	8008a32 <_printf_i+0x182>
 80088cc:	d822      	bhi.n	8008914 <_printf_i+0x64>
 80088ce:	2963      	cmp	r1, #99	; 0x63
 80088d0:	d036      	beq.n	8008940 <_printf_i+0x90>
 80088d2:	d80a      	bhi.n	80088ea <_printf_i+0x3a>
 80088d4:	2900      	cmp	r1, #0
 80088d6:	f000 80b9 	beq.w	8008a4c <_printf_i+0x19c>
 80088da:	2958      	cmp	r1, #88	; 0x58
 80088dc:	f000 8083 	beq.w	80089e6 <_printf_i+0x136>
 80088e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80088e4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80088e8:	e032      	b.n	8008950 <_printf_i+0xa0>
 80088ea:	2964      	cmp	r1, #100	; 0x64
 80088ec:	d001      	beq.n	80088f2 <_printf_i+0x42>
 80088ee:	2969      	cmp	r1, #105	; 0x69
 80088f0:	d1f6      	bne.n	80088e0 <_printf_i+0x30>
 80088f2:	6820      	ldr	r0, [r4, #0]
 80088f4:	6813      	ldr	r3, [r2, #0]
 80088f6:	0605      	lsls	r5, r0, #24
 80088f8:	f103 0104 	add.w	r1, r3, #4
 80088fc:	d52a      	bpl.n	8008954 <_printf_i+0xa4>
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	6011      	str	r1, [r2, #0]
 8008902:	2b00      	cmp	r3, #0
 8008904:	da03      	bge.n	800890e <_printf_i+0x5e>
 8008906:	222d      	movs	r2, #45	; 0x2d
 8008908:	425b      	negs	r3, r3
 800890a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800890e:	486f      	ldr	r0, [pc, #444]	; (8008acc <_printf_i+0x21c>)
 8008910:	220a      	movs	r2, #10
 8008912:	e039      	b.n	8008988 <_printf_i+0xd8>
 8008914:	2973      	cmp	r1, #115	; 0x73
 8008916:	f000 809d 	beq.w	8008a54 <_printf_i+0x1a4>
 800891a:	d808      	bhi.n	800892e <_printf_i+0x7e>
 800891c:	296f      	cmp	r1, #111	; 0x6f
 800891e:	d020      	beq.n	8008962 <_printf_i+0xb2>
 8008920:	2970      	cmp	r1, #112	; 0x70
 8008922:	d1dd      	bne.n	80088e0 <_printf_i+0x30>
 8008924:	6823      	ldr	r3, [r4, #0]
 8008926:	f043 0320 	orr.w	r3, r3, #32
 800892a:	6023      	str	r3, [r4, #0]
 800892c:	e003      	b.n	8008936 <_printf_i+0x86>
 800892e:	2975      	cmp	r1, #117	; 0x75
 8008930:	d017      	beq.n	8008962 <_printf_i+0xb2>
 8008932:	2978      	cmp	r1, #120	; 0x78
 8008934:	d1d4      	bne.n	80088e0 <_printf_i+0x30>
 8008936:	2378      	movs	r3, #120	; 0x78
 8008938:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800893c:	4864      	ldr	r0, [pc, #400]	; (8008ad0 <_printf_i+0x220>)
 800893e:	e055      	b.n	80089ec <_printf_i+0x13c>
 8008940:	6813      	ldr	r3, [r2, #0]
 8008942:	1d19      	adds	r1, r3, #4
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	6011      	str	r1, [r2, #0]
 8008948:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800894c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008950:	2301      	movs	r3, #1
 8008952:	e08c      	b.n	8008a6e <_printf_i+0x1be>
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	6011      	str	r1, [r2, #0]
 8008958:	f010 0f40 	tst.w	r0, #64	; 0x40
 800895c:	bf18      	it	ne
 800895e:	b21b      	sxthne	r3, r3
 8008960:	e7cf      	b.n	8008902 <_printf_i+0x52>
 8008962:	6813      	ldr	r3, [r2, #0]
 8008964:	6825      	ldr	r5, [r4, #0]
 8008966:	1d18      	adds	r0, r3, #4
 8008968:	6010      	str	r0, [r2, #0]
 800896a:	0628      	lsls	r0, r5, #24
 800896c:	d501      	bpl.n	8008972 <_printf_i+0xc2>
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	e002      	b.n	8008978 <_printf_i+0xc8>
 8008972:	0668      	lsls	r0, r5, #25
 8008974:	d5fb      	bpl.n	800896e <_printf_i+0xbe>
 8008976:	881b      	ldrh	r3, [r3, #0]
 8008978:	4854      	ldr	r0, [pc, #336]	; (8008acc <_printf_i+0x21c>)
 800897a:	296f      	cmp	r1, #111	; 0x6f
 800897c:	bf14      	ite	ne
 800897e:	220a      	movne	r2, #10
 8008980:	2208      	moveq	r2, #8
 8008982:	2100      	movs	r1, #0
 8008984:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008988:	6865      	ldr	r5, [r4, #4]
 800898a:	60a5      	str	r5, [r4, #8]
 800898c:	2d00      	cmp	r5, #0
 800898e:	f2c0 8095 	blt.w	8008abc <_printf_i+0x20c>
 8008992:	6821      	ldr	r1, [r4, #0]
 8008994:	f021 0104 	bic.w	r1, r1, #4
 8008998:	6021      	str	r1, [r4, #0]
 800899a:	2b00      	cmp	r3, #0
 800899c:	d13d      	bne.n	8008a1a <_printf_i+0x16a>
 800899e:	2d00      	cmp	r5, #0
 80089a0:	f040 808e 	bne.w	8008ac0 <_printf_i+0x210>
 80089a4:	4665      	mov	r5, ip
 80089a6:	2a08      	cmp	r2, #8
 80089a8:	d10b      	bne.n	80089c2 <_printf_i+0x112>
 80089aa:	6823      	ldr	r3, [r4, #0]
 80089ac:	07db      	lsls	r3, r3, #31
 80089ae:	d508      	bpl.n	80089c2 <_printf_i+0x112>
 80089b0:	6923      	ldr	r3, [r4, #16]
 80089b2:	6862      	ldr	r2, [r4, #4]
 80089b4:	429a      	cmp	r2, r3
 80089b6:	bfde      	ittt	le
 80089b8:	2330      	movle	r3, #48	; 0x30
 80089ba:	f805 3c01 	strble.w	r3, [r5, #-1]
 80089be:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80089c2:	ebac 0305 	sub.w	r3, ip, r5
 80089c6:	6123      	str	r3, [r4, #16]
 80089c8:	f8cd 8000 	str.w	r8, [sp]
 80089cc:	463b      	mov	r3, r7
 80089ce:	aa03      	add	r2, sp, #12
 80089d0:	4621      	mov	r1, r4
 80089d2:	4630      	mov	r0, r6
 80089d4:	f7ff fef6 	bl	80087c4 <_printf_common>
 80089d8:	3001      	adds	r0, #1
 80089da:	d14d      	bne.n	8008a78 <_printf_i+0x1c8>
 80089dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80089e0:	b005      	add	sp, #20
 80089e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80089e6:	4839      	ldr	r0, [pc, #228]	; (8008acc <_printf_i+0x21c>)
 80089e8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80089ec:	6813      	ldr	r3, [r2, #0]
 80089ee:	6821      	ldr	r1, [r4, #0]
 80089f0:	1d1d      	adds	r5, r3, #4
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	6015      	str	r5, [r2, #0]
 80089f6:	060a      	lsls	r2, r1, #24
 80089f8:	d50b      	bpl.n	8008a12 <_printf_i+0x162>
 80089fa:	07ca      	lsls	r2, r1, #31
 80089fc:	bf44      	itt	mi
 80089fe:	f041 0120 	orrmi.w	r1, r1, #32
 8008a02:	6021      	strmi	r1, [r4, #0]
 8008a04:	b91b      	cbnz	r3, 8008a0e <_printf_i+0x15e>
 8008a06:	6822      	ldr	r2, [r4, #0]
 8008a08:	f022 0220 	bic.w	r2, r2, #32
 8008a0c:	6022      	str	r2, [r4, #0]
 8008a0e:	2210      	movs	r2, #16
 8008a10:	e7b7      	b.n	8008982 <_printf_i+0xd2>
 8008a12:	064d      	lsls	r5, r1, #25
 8008a14:	bf48      	it	mi
 8008a16:	b29b      	uxthmi	r3, r3
 8008a18:	e7ef      	b.n	80089fa <_printf_i+0x14a>
 8008a1a:	4665      	mov	r5, ip
 8008a1c:	fbb3 f1f2 	udiv	r1, r3, r2
 8008a20:	fb02 3311 	mls	r3, r2, r1, r3
 8008a24:	5cc3      	ldrb	r3, [r0, r3]
 8008a26:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8008a2a:	460b      	mov	r3, r1
 8008a2c:	2900      	cmp	r1, #0
 8008a2e:	d1f5      	bne.n	8008a1c <_printf_i+0x16c>
 8008a30:	e7b9      	b.n	80089a6 <_printf_i+0xf6>
 8008a32:	6813      	ldr	r3, [r2, #0]
 8008a34:	6825      	ldr	r5, [r4, #0]
 8008a36:	6961      	ldr	r1, [r4, #20]
 8008a38:	1d18      	adds	r0, r3, #4
 8008a3a:	6010      	str	r0, [r2, #0]
 8008a3c:	0628      	lsls	r0, r5, #24
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	d501      	bpl.n	8008a46 <_printf_i+0x196>
 8008a42:	6019      	str	r1, [r3, #0]
 8008a44:	e002      	b.n	8008a4c <_printf_i+0x19c>
 8008a46:	066a      	lsls	r2, r5, #25
 8008a48:	d5fb      	bpl.n	8008a42 <_printf_i+0x192>
 8008a4a:	8019      	strh	r1, [r3, #0]
 8008a4c:	2300      	movs	r3, #0
 8008a4e:	6123      	str	r3, [r4, #16]
 8008a50:	4665      	mov	r5, ip
 8008a52:	e7b9      	b.n	80089c8 <_printf_i+0x118>
 8008a54:	6813      	ldr	r3, [r2, #0]
 8008a56:	1d19      	adds	r1, r3, #4
 8008a58:	6011      	str	r1, [r2, #0]
 8008a5a:	681d      	ldr	r5, [r3, #0]
 8008a5c:	6862      	ldr	r2, [r4, #4]
 8008a5e:	2100      	movs	r1, #0
 8008a60:	4628      	mov	r0, r5
 8008a62:	f7f7 fbcd 	bl	8000200 <memchr>
 8008a66:	b108      	cbz	r0, 8008a6c <_printf_i+0x1bc>
 8008a68:	1b40      	subs	r0, r0, r5
 8008a6a:	6060      	str	r0, [r4, #4]
 8008a6c:	6863      	ldr	r3, [r4, #4]
 8008a6e:	6123      	str	r3, [r4, #16]
 8008a70:	2300      	movs	r3, #0
 8008a72:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008a76:	e7a7      	b.n	80089c8 <_printf_i+0x118>
 8008a78:	6923      	ldr	r3, [r4, #16]
 8008a7a:	462a      	mov	r2, r5
 8008a7c:	4639      	mov	r1, r7
 8008a7e:	4630      	mov	r0, r6
 8008a80:	47c0      	blx	r8
 8008a82:	3001      	adds	r0, #1
 8008a84:	d0aa      	beq.n	80089dc <_printf_i+0x12c>
 8008a86:	6823      	ldr	r3, [r4, #0]
 8008a88:	079b      	lsls	r3, r3, #30
 8008a8a:	d413      	bmi.n	8008ab4 <_printf_i+0x204>
 8008a8c:	68e0      	ldr	r0, [r4, #12]
 8008a8e:	9b03      	ldr	r3, [sp, #12]
 8008a90:	4298      	cmp	r0, r3
 8008a92:	bfb8      	it	lt
 8008a94:	4618      	movlt	r0, r3
 8008a96:	e7a3      	b.n	80089e0 <_printf_i+0x130>
 8008a98:	2301      	movs	r3, #1
 8008a9a:	464a      	mov	r2, r9
 8008a9c:	4639      	mov	r1, r7
 8008a9e:	4630      	mov	r0, r6
 8008aa0:	47c0      	blx	r8
 8008aa2:	3001      	adds	r0, #1
 8008aa4:	d09a      	beq.n	80089dc <_printf_i+0x12c>
 8008aa6:	3501      	adds	r5, #1
 8008aa8:	68e3      	ldr	r3, [r4, #12]
 8008aaa:	9a03      	ldr	r2, [sp, #12]
 8008aac:	1a9b      	subs	r3, r3, r2
 8008aae:	42ab      	cmp	r3, r5
 8008ab0:	dcf2      	bgt.n	8008a98 <_printf_i+0x1e8>
 8008ab2:	e7eb      	b.n	8008a8c <_printf_i+0x1dc>
 8008ab4:	2500      	movs	r5, #0
 8008ab6:	f104 0919 	add.w	r9, r4, #25
 8008aba:	e7f5      	b.n	8008aa8 <_printf_i+0x1f8>
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d1ac      	bne.n	8008a1a <_printf_i+0x16a>
 8008ac0:	7803      	ldrb	r3, [r0, #0]
 8008ac2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008ac6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008aca:	e76c      	b.n	80089a6 <_printf_i+0xf6>
 8008acc:	0800b0e2 	.word	0x0800b0e2
 8008ad0:	0800b0f3 	.word	0x0800b0f3

08008ad4 <iprintf>:
 8008ad4:	b40f      	push	{r0, r1, r2, r3}
 8008ad6:	4b0a      	ldr	r3, [pc, #40]	; (8008b00 <iprintf+0x2c>)
 8008ad8:	b513      	push	{r0, r1, r4, lr}
 8008ada:	681c      	ldr	r4, [r3, #0]
 8008adc:	b124      	cbz	r4, 8008ae8 <iprintf+0x14>
 8008ade:	69a3      	ldr	r3, [r4, #24]
 8008ae0:	b913      	cbnz	r3, 8008ae8 <iprintf+0x14>
 8008ae2:	4620      	mov	r0, r4
 8008ae4:	f001 f868 	bl	8009bb8 <__sinit>
 8008ae8:	ab05      	add	r3, sp, #20
 8008aea:	9a04      	ldr	r2, [sp, #16]
 8008aec:	68a1      	ldr	r1, [r4, #8]
 8008aee:	9301      	str	r3, [sp, #4]
 8008af0:	4620      	mov	r0, r4
 8008af2:	f001 fd2b 	bl	800a54c <_vfiprintf_r>
 8008af6:	b002      	add	sp, #8
 8008af8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008afc:	b004      	add	sp, #16
 8008afe:	4770      	bx	lr
 8008b00:	20000014 	.word	0x20000014

08008b04 <_puts_r>:
 8008b04:	b570      	push	{r4, r5, r6, lr}
 8008b06:	460e      	mov	r6, r1
 8008b08:	4605      	mov	r5, r0
 8008b0a:	b118      	cbz	r0, 8008b14 <_puts_r+0x10>
 8008b0c:	6983      	ldr	r3, [r0, #24]
 8008b0e:	b90b      	cbnz	r3, 8008b14 <_puts_r+0x10>
 8008b10:	f001 f852 	bl	8009bb8 <__sinit>
 8008b14:	69ab      	ldr	r3, [r5, #24]
 8008b16:	68ac      	ldr	r4, [r5, #8]
 8008b18:	b913      	cbnz	r3, 8008b20 <_puts_r+0x1c>
 8008b1a:	4628      	mov	r0, r5
 8008b1c:	f001 f84c 	bl	8009bb8 <__sinit>
 8008b20:	4b23      	ldr	r3, [pc, #140]	; (8008bb0 <_puts_r+0xac>)
 8008b22:	429c      	cmp	r4, r3
 8008b24:	d117      	bne.n	8008b56 <_puts_r+0x52>
 8008b26:	686c      	ldr	r4, [r5, #4]
 8008b28:	89a3      	ldrh	r3, [r4, #12]
 8008b2a:	071b      	lsls	r3, r3, #28
 8008b2c:	d51d      	bpl.n	8008b6a <_puts_r+0x66>
 8008b2e:	6923      	ldr	r3, [r4, #16]
 8008b30:	b1db      	cbz	r3, 8008b6a <_puts_r+0x66>
 8008b32:	3e01      	subs	r6, #1
 8008b34:	68a3      	ldr	r3, [r4, #8]
 8008b36:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008b3a:	3b01      	subs	r3, #1
 8008b3c:	60a3      	str	r3, [r4, #8]
 8008b3e:	b9e9      	cbnz	r1, 8008b7c <_puts_r+0x78>
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	da2e      	bge.n	8008ba2 <_puts_r+0x9e>
 8008b44:	4622      	mov	r2, r4
 8008b46:	210a      	movs	r1, #10
 8008b48:	4628      	mov	r0, r5
 8008b4a:	f000 f83f 	bl	8008bcc <__swbuf_r>
 8008b4e:	3001      	adds	r0, #1
 8008b50:	d011      	beq.n	8008b76 <_puts_r+0x72>
 8008b52:	200a      	movs	r0, #10
 8008b54:	e011      	b.n	8008b7a <_puts_r+0x76>
 8008b56:	4b17      	ldr	r3, [pc, #92]	; (8008bb4 <_puts_r+0xb0>)
 8008b58:	429c      	cmp	r4, r3
 8008b5a:	d101      	bne.n	8008b60 <_puts_r+0x5c>
 8008b5c:	68ac      	ldr	r4, [r5, #8]
 8008b5e:	e7e3      	b.n	8008b28 <_puts_r+0x24>
 8008b60:	4b15      	ldr	r3, [pc, #84]	; (8008bb8 <_puts_r+0xb4>)
 8008b62:	429c      	cmp	r4, r3
 8008b64:	bf08      	it	eq
 8008b66:	68ec      	ldreq	r4, [r5, #12]
 8008b68:	e7de      	b.n	8008b28 <_puts_r+0x24>
 8008b6a:	4621      	mov	r1, r4
 8008b6c:	4628      	mov	r0, r5
 8008b6e:	f000 f87f 	bl	8008c70 <__swsetup_r>
 8008b72:	2800      	cmp	r0, #0
 8008b74:	d0dd      	beq.n	8008b32 <_puts_r+0x2e>
 8008b76:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008b7a:	bd70      	pop	{r4, r5, r6, pc}
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	da04      	bge.n	8008b8a <_puts_r+0x86>
 8008b80:	69a2      	ldr	r2, [r4, #24]
 8008b82:	429a      	cmp	r2, r3
 8008b84:	dc06      	bgt.n	8008b94 <_puts_r+0x90>
 8008b86:	290a      	cmp	r1, #10
 8008b88:	d004      	beq.n	8008b94 <_puts_r+0x90>
 8008b8a:	6823      	ldr	r3, [r4, #0]
 8008b8c:	1c5a      	adds	r2, r3, #1
 8008b8e:	6022      	str	r2, [r4, #0]
 8008b90:	7019      	strb	r1, [r3, #0]
 8008b92:	e7cf      	b.n	8008b34 <_puts_r+0x30>
 8008b94:	4622      	mov	r2, r4
 8008b96:	4628      	mov	r0, r5
 8008b98:	f000 f818 	bl	8008bcc <__swbuf_r>
 8008b9c:	3001      	adds	r0, #1
 8008b9e:	d1c9      	bne.n	8008b34 <_puts_r+0x30>
 8008ba0:	e7e9      	b.n	8008b76 <_puts_r+0x72>
 8008ba2:	6823      	ldr	r3, [r4, #0]
 8008ba4:	200a      	movs	r0, #10
 8008ba6:	1c5a      	adds	r2, r3, #1
 8008ba8:	6022      	str	r2, [r4, #0]
 8008baa:	7018      	strb	r0, [r3, #0]
 8008bac:	e7e5      	b.n	8008b7a <_puts_r+0x76>
 8008bae:	bf00      	nop
 8008bb0:	0800b134 	.word	0x0800b134
 8008bb4:	0800b154 	.word	0x0800b154
 8008bb8:	0800b114 	.word	0x0800b114

08008bbc <puts>:
 8008bbc:	4b02      	ldr	r3, [pc, #8]	; (8008bc8 <puts+0xc>)
 8008bbe:	4601      	mov	r1, r0
 8008bc0:	6818      	ldr	r0, [r3, #0]
 8008bc2:	f7ff bf9f 	b.w	8008b04 <_puts_r>
 8008bc6:	bf00      	nop
 8008bc8:	20000014 	.word	0x20000014

08008bcc <__swbuf_r>:
 8008bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bce:	460e      	mov	r6, r1
 8008bd0:	4614      	mov	r4, r2
 8008bd2:	4605      	mov	r5, r0
 8008bd4:	b118      	cbz	r0, 8008bde <__swbuf_r+0x12>
 8008bd6:	6983      	ldr	r3, [r0, #24]
 8008bd8:	b90b      	cbnz	r3, 8008bde <__swbuf_r+0x12>
 8008bda:	f000 ffed 	bl	8009bb8 <__sinit>
 8008bde:	4b21      	ldr	r3, [pc, #132]	; (8008c64 <__swbuf_r+0x98>)
 8008be0:	429c      	cmp	r4, r3
 8008be2:	d12a      	bne.n	8008c3a <__swbuf_r+0x6e>
 8008be4:	686c      	ldr	r4, [r5, #4]
 8008be6:	69a3      	ldr	r3, [r4, #24]
 8008be8:	60a3      	str	r3, [r4, #8]
 8008bea:	89a3      	ldrh	r3, [r4, #12]
 8008bec:	071a      	lsls	r2, r3, #28
 8008bee:	d52e      	bpl.n	8008c4e <__swbuf_r+0x82>
 8008bf0:	6923      	ldr	r3, [r4, #16]
 8008bf2:	b363      	cbz	r3, 8008c4e <__swbuf_r+0x82>
 8008bf4:	6923      	ldr	r3, [r4, #16]
 8008bf6:	6820      	ldr	r0, [r4, #0]
 8008bf8:	1ac0      	subs	r0, r0, r3
 8008bfa:	6963      	ldr	r3, [r4, #20]
 8008bfc:	b2f6      	uxtb	r6, r6
 8008bfe:	4283      	cmp	r3, r0
 8008c00:	4637      	mov	r7, r6
 8008c02:	dc04      	bgt.n	8008c0e <__swbuf_r+0x42>
 8008c04:	4621      	mov	r1, r4
 8008c06:	4628      	mov	r0, r5
 8008c08:	f000 ff6c 	bl	8009ae4 <_fflush_r>
 8008c0c:	bb28      	cbnz	r0, 8008c5a <__swbuf_r+0x8e>
 8008c0e:	68a3      	ldr	r3, [r4, #8]
 8008c10:	3b01      	subs	r3, #1
 8008c12:	60a3      	str	r3, [r4, #8]
 8008c14:	6823      	ldr	r3, [r4, #0]
 8008c16:	1c5a      	adds	r2, r3, #1
 8008c18:	6022      	str	r2, [r4, #0]
 8008c1a:	701e      	strb	r6, [r3, #0]
 8008c1c:	6963      	ldr	r3, [r4, #20]
 8008c1e:	3001      	adds	r0, #1
 8008c20:	4283      	cmp	r3, r0
 8008c22:	d004      	beq.n	8008c2e <__swbuf_r+0x62>
 8008c24:	89a3      	ldrh	r3, [r4, #12]
 8008c26:	07db      	lsls	r3, r3, #31
 8008c28:	d519      	bpl.n	8008c5e <__swbuf_r+0x92>
 8008c2a:	2e0a      	cmp	r6, #10
 8008c2c:	d117      	bne.n	8008c5e <__swbuf_r+0x92>
 8008c2e:	4621      	mov	r1, r4
 8008c30:	4628      	mov	r0, r5
 8008c32:	f000 ff57 	bl	8009ae4 <_fflush_r>
 8008c36:	b190      	cbz	r0, 8008c5e <__swbuf_r+0x92>
 8008c38:	e00f      	b.n	8008c5a <__swbuf_r+0x8e>
 8008c3a:	4b0b      	ldr	r3, [pc, #44]	; (8008c68 <__swbuf_r+0x9c>)
 8008c3c:	429c      	cmp	r4, r3
 8008c3e:	d101      	bne.n	8008c44 <__swbuf_r+0x78>
 8008c40:	68ac      	ldr	r4, [r5, #8]
 8008c42:	e7d0      	b.n	8008be6 <__swbuf_r+0x1a>
 8008c44:	4b09      	ldr	r3, [pc, #36]	; (8008c6c <__swbuf_r+0xa0>)
 8008c46:	429c      	cmp	r4, r3
 8008c48:	bf08      	it	eq
 8008c4a:	68ec      	ldreq	r4, [r5, #12]
 8008c4c:	e7cb      	b.n	8008be6 <__swbuf_r+0x1a>
 8008c4e:	4621      	mov	r1, r4
 8008c50:	4628      	mov	r0, r5
 8008c52:	f000 f80d 	bl	8008c70 <__swsetup_r>
 8008c56:	2800      	cmp	r0, #0
 8008c58:	d0cc      	beq.n	8008bf4 <__swbuf_r+0x28>
 8008c5a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8008c5e:	4638      	mov	r0, r7
 8008c60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008c62:	bf00      	nop
 8008c64:	0800b134 	.word	0x0800b134
 8008c68:	0800b154 	.word	0x0800b154
 8008c6c:	0800b114 	.word	0x0800b114

08008c70 <__swsetup_r>:
 8008c70:	4b32      	ldr	r3, [pc, #200]	; (8008d3c <__swsetup_r+0xcc>)
 8008c72:	b570      	push	{r4, r5, r6, lr}
 8008c74:	681d      	ldr	r5, [r3, #0]
 8008c76:	4606      	mov	r6, r0
 8008c78:	460c      	mov	r4, r1
 8008c7a:	b125      	cbz	r5, 8008c86 <__swsetup_r+0x16>
 8008c7c:	69ab      	ldr	r3, [r5, #24]
 8008c7e:	b913      	cbnz	r3, 8008c86 <__swsetup_r+0x16>
 8008c80:	4628      	mov	r0, r5
 8008c82:	f000 ff99 	bl	8009bb8 <__sinit>
 8008c86:	4b2e      	ldr	r3, [pc, #184]	; (8008d40 <__swsetup_r+0xd0>)
 8008c88:	429c      	cmp	r4, r3
 8008c8a:	d10f      	bne.n	8008cac <__swsetup_r+0x3c>
 8008c8c:	686c      	ldr	r4, [r5, #4]
 8008c8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c92:	b29a      	uxth	r2, r3
 8008c94:	0715      	lsls	r5, r2, #28
 8008c96:	d42c      	bmi.n	8008cf2 <__swsetup_r+0x82>
 8008c98:	06d0      	lsls	r0, r2, #27
 8008c9a:	d411      	bmi.n	8008cc0 <__swsetup_r+0x50>
 8008c9c:	2209      	movs	r2, #9
 8008c9e:	6032      	str	r2, [r6, #0]
 8008ca0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ca4:	81a3      	strh	r3, [r4, #12]
 8008ca6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008caa:	e03e      	b.n	8008d2a <__swsetup_r+0xba>
 8008cac:	4b25      	ldr	r3, [pc, #148]	; (8008d44 <__swsetup_r+0xd4>)
 8008cae:	429c      	cmp	r4, r3
 8008cb0:	d101      	bne.n	8008cb6 <__swsetup_r+0x46>
 8008cb2:	68ac      	ldr	r4, [r5, #8]
 8008cb4:	e7eb      	b.n	8008c8e <__swsetup_r+0x1e>
 8008cb6:	4b24      	ldr	r3, [pc, #144]	; (8008d48 <__swsetup_r+0xd8>)
 8008cb8:	429c      	cmp	r4, r3
 8008cba:	bf08      	it	eq
 8008cbc:	68ec      	ldreq	r4, [r5, #12]
 8008cbe:	e7e6      	b.n	8008c8e <__swsetup_r+0x1e>
 8008cc0:	0751      	lsls	r1, r2, #29
 8008cc2:	d512      	bpl.n	8008cea <__swsetup_r+0x7a>
 8008cc4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008cc6:	b141      	cbz	r1, 8008cda <__swsetup_r+0x6a>
 8008cc8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008ccc:	4299      	cmp	r1, r3
 8008cce:	d002      	beq.n	8008cd6 <__swsetup_r+0x66>
 8008cd0:	4630      	mov	r0, r6
 8008cd2:	f001 fb69 	bl	800a3a8 <_free_r>
 8008cd6:	2300      	movs	r3, #0
 8008cd8:	6363      	str	r3, [r4, #52]	; 0x34
 8008cda:	89a3      	ldrh	r3, [r4, #12]
 8008cdc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008ce0:	81a3      	strh	r3, [r4, #12]
 8008ce2:	2300      	movs	r3, #0
 8008ce4:	6063      	str	r3, [r4, #4]
 8008ce6:	6923      	ldr	r3, [r4, #16]
 8008ce8:	6023      	str	r3, [r4, #0]
 8008cea:	89a3      	ldrh	r3, [r4, #12]
 8008cec:	f043 0308 	orr.w	r3, r3, #8
 8008cf0:	81a3      	strh	r3, [r4, #12]
 8008cf2:	6923      	ldr	r3, [r4, #16]
 8008cf4:	b94b      	cbnz	r3, 8008d0a <__swsetup_r+0x9a>
 8008cf6:	89a3      	ldrh	r3, [r4, #12]
 8008cf8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008cfc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008d00:	d003      	beq.n	8008d0a <__swsetup_r+0x9a>
 8008d02:	4621      	mov	r1, r4
 8008d04:	4630      	mov	r0, r6
 8008d06:	f001 f813 	bl	8009d30 <__smakebuf_r>
 8008d0a:	89a2      	ldrh	r2, [r4, #12]
 8008d0c:	f012 0301 	ands.w	r3, r2, #1
 8008d10:	d00c      	beq.n	8008d2c <__swsetup_r+0xbc>
 8008d12:	2300      	movs	r3, #0
 8008d14:	60a3      	str	r3, [r4, #8]
 8008d16:	6963      	ldr	r3, [r4, #20]
 8008d18:	425b      	negs	r3, r3
 8008d1a:	61a3      	str	r3, [r4, #24]
 8008d1c:	6923      	ldr	r3, [r4, #16]
 8008d1e:	b953      	cbnz	r3, 8008d36 <__swsetup_r+0xc6>
 8008d20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d24:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8008d28:	d1ba      	bne.n	8008ca0 <__swsetup_r+0x30>
 8008d2a:	bd70      	pop	{r4, r5, r6, pc}
 8008d2c:	0792      	lsls	r2, r2, #30
 8008d2e:	bf58      	it	pl
 8008d30:	6963      	ldrpl	r3, [r4, #20]
 8008d32:	60a3      	str	r3, [r4, #8]
 8008d34:	e7f2      	b.n	8008d1c <__swsetup_r+0xac>
 8008d36:	2000      	movs	r0, #0
 8008d38:	e7f7      	b.n	8008d2a <__swsetup_r+0xba>
 8008d3a:	bf00      	nop
 8008d3c:	20000014 	.word	0x20000014
 8008d40:	0800b134 	.word	0x0800b134
 8008d44:	0800b154 	.word	0x0800b154
 8008d48:	0800b114 	.word	0x0800b114

08008d4c <quorem>:
 8008d4c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d50:	6903      	ldr	r3, [r0, #16]
 8008d52:	690c      	ldr	r4, [r1, #16]
 8008d54:	42a3      	cmp	r3, r4
 8008d56:	4680      	mov	r8, r0
 8008d58:	f2c0 8082 	blt.w	8008e60 <quorem+0x114>
 8008d5c:	3c01      	subs	r4, #1
 8008d5e:	f101 0714 	add.w	r7, r1, #20
 8008d62:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8008d66:	f100 0614 	add.w	r6, r0, #20
 8008d6a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8008d6e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8008d72:	eb06 030c 	add.w	r3, r6, ip
 8008d76:	3501      	adds	r5, #1
 8008d78:	eb07 090c 	add.w	r9, r7, ip
 8008d7c:	9301      	str	r3, [sp, #4]
 8008d7e:	fbb0 f5f5 	udiv	r5, r0, r5
 8008d82:	b395      	cbz	r5, 8008dea <quorem+0x9e>
 8008d84:	f04f 0a00 	mov.w	sl, #0
 8008d88:	4638      	mov	r0, r7
 8008d8a:	46b6      	mov	lr, r6
 8008d8c:	46d3      	mov	fp, sl
 8008d8e:	f850 2b04 	ldr.w	r2, [r0], #4
 8008d92:	b293      	uxth	r3, r2
 8008d94:	fb05 a303 	mla	r3, r5, r3, sl
 8008d98:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008d9c:	b29b      	uxth	r3, r3
 8008d9e:	ebab 0303 	sub.w	r3, fp, r3
 8008da2:	0c12      	lsrs	r2, r2, #16
 8008da4:	f8de b000 	ldr.w	fp, [lr]
 8008da8:	fb05 a202 	mla	r2, r5, r2, sl
 8008dac:	fa13 f38b 	uxtah	r3, r3, fp
 8008db0:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8008db4:	fa1f fb82 	uxth.w	fp, r2
 8008db8:	f8de 2000 	ldr.w	r2, [lr]
 8008dbc:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8008dc0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008dc4:	b29b      	uxth	r3, r3
 8008dc6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008dca:	4581      	cmp	r9, r0
 8008dcc:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8008dd0:	f84e 3b04 	str.w	r3, [lr], #4
 8008dd4:	d2db      	bcs.n	8008d8e <quorem+0x42>
 8008dd6:	f856 300c 	ldr.w	r3, [r6, ip]
 8008dda:	b933      	cbnz	r3, 8008dea <quorem+0x9e>
 8008ddc:	9b01      	ldr	r3, [sp, #4]
 8008dde:	3b04      	subs	r3, #4
 8008de0:	429e      	cmp	r6, r3
 8008de2:	461a      	mov	r2, r3
 8008de4:	d330      	bcc.n	8008e48 <quorem+0xfc>
 8008de6:	f8c8 4010 	str.w	r4, [r8, #16]
 8008dea:	4640      	mov	r0, r8
 8008dec:	f001 fa08 	bl	800a200 <__mcmp>
 8008df0:	2800      	cmp	r0, #0
 8008df2:	db25      	blt.n	8008e40 <quorem+0xf4>
 8008df4:	3501      	adds	r5, #1
 8008df6:	4630      	mov	r0, r6
 8008df8:	f04f 0c00 	mov.w	ip, #0
 8008dfc:	f857 2b04 	ldr.w	r2, [r7], #4
 8008e00:	f8d0 e000 	ldr.w	lr, [r0]
 8008e04:	b293      	uxth	r3, r2
 8008e06:	ebac 0303 	sub.w	r3, ip, r3
 8008e0a:	0c12      	lsrs	r2, r2, #16
 8008e0c:	fa13 f38e 	uxtah	r3, r3, lr
 8008e10:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008e14:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008e18:	b29b      	uxth	r3, r3
 8008e1a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008e1e:	45b9      	cmp	r9, r7
 8008e20:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008e24:	f840 3b04 	str.w	r3, [r0], #4
 8008e28:	d2e8      	bcs.n	8008dfc <quorem+0xb0>
 8008e2a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8008e2e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8008e32:	b92a      	cbnz	r2, 8008e40 <quorem+0xf4>
 8008e34:	3b04      	subs	r3, #4
 8008e36:	429e      	cmp	r6, r3
 8008e38:	461a      	mov	r2, r3
 8008e3a:	d30b      	bcc.n	8008e54 <quorem+0x108>
 8008e3c:	f8c8 4010 	str.w	r4, [r8, #16]
 8008e40:	4628      	mov	r0, r5
 8008e42:	b003      	add	sp, #12
 8008e44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e48:	6812      	ldr	r2, [r2, #0]
 8008e4a:	3b04      	subs	r3, #4
 8008e4c:	2a00      	cmp	r2, #0
 8008e4e:	d1ca      	bne.n	8008de6 <quorem+0x9a>
 8008e50:	3c01      	subs	r4, #1
 8008e52:	e7c5      	b.n	8008de0 <quorem+0x94>
 8008e54:	6812      	ldr	r2, [r2, #0]
 8008e56:	3b04      	subs	r3, #4
 8008e58:	2a00      	cmp	r2, #0
 8008e5a:	d1ef      	bne.n	8008e3c <quorem+0xf0>
 8008e5c:	3c01      	subs	r4, #1
 8008e5e:	e7ea      	b.n	8008e36 <quorem+0xea>
 8008e60:	2000      	movs	r0, #0
 8008e62:	e7ee      	b.n	8008e42 <quorem+0xf6>
 8008e64:	0000      	movs	r0, r0
	...

08008e68 <_dtoa_r>:
 8008e68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e6c:	ec57 6b10 	vmov	r6, r7, d0
 8008e70:	b097      	sub	sp, #92	; 0x5c
 8008e72:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008e74:	9106      	str	r1, [sp, #24]
 8008e76:	4604      	mov	r4, r0
 8008e78:	920b      	str	r2, [sp, #44]	; 0x2c
 8008e7a:	9312      	str	r3, [sp, #72]	; 0x48
 8008e7c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008e80:	e9cd 6700 	strd	r6, r7, [sp]
 8008e84:	b93d      	cbnz	r5, 8008e96 <_dtoa_r+0x2e>
 8008e86:	2010      	movs	r0, #16
 8008e88:	f000 ff92 	bl	8009db0 <malloc>
 8008e8c:	6260      	str	r0, [r4, #36]	; 0x24
 8008e8e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008e92:	6005      	str	r5, [r0, #0]
 8008e94:	60c5      	str	r5, [r0, #12]
 8008e96:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008e98:	6819      	ldr	r1, [r3, #0]
 8008e9a:	b151      	cbz	r1, 8008eb2 <_dtoa_r+0x4a>
 8008e9c:	685a      	ldr	r2, [r3, #4]
 8008e9e:	604a      	str	r2, [r1, #4]
 8008ea0:	2301      	movs	r3, #1
 8008ea2:	4093      	lsls	r3, r2
 8008ea4:	608b      	str	r3, [r1, #8]
 8008ea6:	4620      	mov	r0, r4
 8008ea8:	f000 ffc9 	bl	8009e3e <_Bfree>
 8008eac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008eae:	2200      	movs	r2, #0
 8008eb0:	601a      	str	r2, [r3, #0]
 8008eb2:	1e3b      	subs	r3, r7, #0
 8008eb4:	bfbb      	ittet	lt
 8008eb6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008eba:	9301      	strlt	r3, [sp, #4]
 8008ebc:	2300      	movge	r3, #0
 8008ebe:	2201      	movlt	r2, #1
 8008ec0:	bfac      	ite	ge
 8008ec2:	f8c8 3000 	strge.w	r3, [r8]
 8008ec6:	f8c8 2000 	strlt.w	r2, [r8]
 8008eca:	4baf      	ldr	r3, [pc, #700]	; (8009188 <_dtoa_r+0x320>)
 8008ecc:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008ed0:	ea33 0308 	bics.w	r3, r3, r8
 8008ed4:	d114      	bne.n	8008f00 <_dtoa_r+0x98>
 8008ed6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008ed8:	f242 730f 	movw	r3, #9999	; 0x270f
 8008edc:	6013      	str	r3, [r2, #0]
 8008ede:	9b00      	ldr	r3, [sp, #0]
 8008ee0:	b923      	cbnz	r3, 8008eec <_dtoa_r+0x84>
 8008ee2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8008ee6:	2800      	cmp	r0, #0
 8008ee8:	f000 8542 	beq.w	8009970 <_dtoa_r+0xb08>
 8008eec:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008eee:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800919c <_dtoa_r+0x334>
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	f000 8544 	beq.w	8009980 <_dtoa_r+0xb18>
 8008ef8:	f10b 0303 	add.w	r3, fp, #3
 8008efc:	f000 bd3e 	b.w	800997c <_dtoa_r+0xb14>
 8008f00:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008f04:	2200      	movs	r2, #0
 8008f06:	2300      	movs	r3, #0
 8008f08:	4630      	mov	r0, r6
 8008f0a:	4639      	mov	r1, r7
 8008f0c:	f7f7 fdec 	bl	8000ae8 <__aeabi_dcmpeq>
 8008f10:	4681      	mov	r9, r0
 8008f12:	b168      	cbz	r0, 8008f30 <_dtoa_r+0xc8>
 8008f14:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008f16:	2301      	movs	r3, #1
 8008f18:	6013      	str	r3, [r2, #0]
 8008f1a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	f000 8524 	beq.w	800996a <_dtoa_r+0xb02>
 8008f22:	4b9a      	ldr	r3, [pc, #616]	; (800918c <_dtoa_r+0x324>)
 8008f24:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008f26:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 8008f2a:	6013      	str	r3, [r2, #0]
 8008f2c:	f000 bd28 	b.w	8009980 <_dtoa_r+0xb18>
 8008f30:	aa14      	add	r2, sp, #80	; 0x50
 8008f32:	a915      	add	r1, sp, #84	; 0x54
 8008f34:	ec47 6b10 	vmov	d0, r6, r7
 8008f38:	4620      	mov	r0, r4
 8008f3a:	f001 f9d8 	bl	800a2ee <__d2b>
 8008f3e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8008f42:	9004      	str	r0, [sp, #16]
 8008f44:	2d00      	cmp	r5, #0
 8008f46:	d07c      	beq.n	8009042 <_dtoa_r+0x1da>
 8008f48:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008f4c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8008f50:	46b2      	mov	sl, r6
 8008f52:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8008f56:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008f5a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8008f5e:	2200      	movs	r2, #0
 8008f60:	4b8b      	ldr	r3, [pc, #556]	; (8009190 <_dtoa_r+0x328>)
 8008f62:	4650      	mov	r0, sl
 8008f64:	4659      	mov	r1, fp
 8008f66:	f7f7 f99f 	bl	80002a8 <__aeabi_dsub>
 8008f6a:	a381      	add	r3, pc, #516	; (adr r3, 8009170 <_dtoa_r+0x308>)
 8008f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f70:	f7f7 fb52 	bl	8000618 <__aeabi_dmul>
 8008f74:	a380      	add	r3, pc, #512	; (adr r3, 8009178 <_dtoa_r+0x310>)
 8008f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f7a:	f7f7 f997 	bl	80002ac <__adddf3>
 8008f7e:	4606      	mov	r6, r0
 8008f80:	4628      	mov	r0, r5
 8008f82:	460f      	mov	r7, r1
 8008f84:	f7f7 fade 	bl	8000544 <__aeabi_i2d>
 8008f88:	a37d      	add	r3, pc, #500	; (adr r3, 8009180 <_dtoa_r+0x318>)
 8008f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f8e:	f7f7 fb43 	bl	8000618 <__aeabi_dmul>
 8008f92:	4602      	mov	r2, r0
 8008f94:	460b      	mov	r3, r1
 8008f96:	4630      	mov	r0, r6
 8008f98:	4639      	mov	r1, r7
 8008f9a:	f7f7 f987 	bl	80002ac <__adddf3>
 8008f9e:	4606      	mov	r6, r0
 8008fa0:	460f      	mov	r7, r1
 8008fa2:	f7f7 fde9 	bl	8000b78 <__aeabi_d2iz>
 8008fa6:	2200      	movs	r2, #0
 8008fa8:	4682      	mov	sl, r0
 8008faa:	2300      	movs	r3, #0
 8008fac:	4630      	mov	r0, r6
 8008fae:	4639      	mov	r1, r7
 8008fb0:	f7f7 fda4 	bl	8000afc <__aeabi_dcmplt>
 8008fb4:	b148      	cbz	r0, 8008fca <_dtoa_r+0x162>
 8008fb6:	4650      	mov	r0, sl
 8008fb8:	f7f7 fac4 	bl	8000544 <__aeabi_i2d>
 8008fbc:	4632      	mov	r2, r6
 8008fbe:	463b      	mov	r3, r7
 8008fc0:	f7f7 fd92 	bl	8000ae8 <__aeabi_dcmpeq>
 8008fc4:	b908      	cbnz	r0, 8008fca <_dtoa_r+0x162>
 8008fc6:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8008fca:	f1ba 0f16 	cmp.w	sl, #22
 8008fce:	d859      	bhi.n	8009084 <_dtoa_r+0x21c>
 8008fd0:	4970      	ldr	r1, [pc, #448]	; (8009194 <_dtoa_r+0x32c>)
 8008fd2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8008fd6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008fda:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008fde:	f7f7 fdab 	bl	8000b38 <__aeabi_dcmpgt>
 8008fe2:	2800      	cmp	r0, #0
 8008fe4:	d050      	beq.n	8009088 <_dtoa_r+0x220>
 8008fe6:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8008fea:	2300      	movs	r3, #0
 8008fec:	930f      	str	r3, [sp, #60]	; 0x3c
 8008fee:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008ff0:	1b5d      	subs	r5, r3, r5
 8008ff2:	f1b5 0801 	subs.w	r8, r5, #1
 8008ff6:	bf49      	itett	mi
 8008ff8:	f1c5 0301 	rsbmi	r3, r5, #1
 8008ffc:	2300      	movpl	r3, #0
 8008ffe:	9305      	strmi	r3, [sp, #20]
 8009000:	f04f 0800 	movmi.w	r8, #0
 8009004:	bf58      	it	pl
 8009006:	9305      	strpl	r3, [sp, #20]
 8009008:	f1ba 0f00 	cmp.w	sl, #0
 800900c:	db3e      	blt.n	800908c <_dtoa_r+0x224>
 800900e:	2300      	movs	r3, #0
 8009010:	44d0      	add	r8, sl
 8009012:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8009016:	9307      	str	r3, [sp, #28]
 8009018:	9b06      	ldr	r3, [sp, #24]
 800901a:	2b09      	cmp	r3, #9
 800901c:	f200 8090 	bhi.w	8009140 <_dtoa_r+0x2d8>
 8009020:	2b05      	cmp	r3, #5
 8009022:	bfc4      	itt	gt
 8009024:	3b04      	subgt	r3, #4
 8009026:	9306      	strgt	r3, [sp, #24]
 8009028:	9b06      	ldr	r3, [sp, #24]
 800902a:	f1a3 0302 	sub.w	r3, r3, #2
 800902e:	bfcc      	ite	gt
 8009030:	2500      	movgt	r5, #0
 8009032:	2501      	movle	r5, #1
 8009034:	2b03      	cmp	r3, #3
 8009036:	f200 808f 	bhi.w	8009158 <_dtoa_r+0x2f0>
 800903a:	e8df f003 	tbb	[pc, r3]
 800903e:	7f7d      	.short	0x7f7d
 8009040:	7131      	.short	0x7131
 8009042:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8009046:	441d      	add	r5, r3
 8009048:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800904c:	2820      	cmp	r0, #32
 800904e:	dd13      	ble.n	8009078 <_dtoa_r+0x210>
 8009050:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8009054:	9b00      	ldr	r3, [sp, #0]
 8009056:	fa08 f800 	lsl.w	r8, r8, r0
 800905a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800905e:	fa23 f000 	lsr.w	r0, r3, r0
 8009062:	ea48 0000 	orr.w	r0, r8, r0
 8009066:	f7f7 fa5d 	bl	8000524 <__aeabi_ui2d>
 800906a:	2301      	movs	r3, #1
 800906c:	4682      	mov	sl, r0
 800906e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8009072:	3d01      	subs	r5, #1
 8009074:	9313      	str	r3, [sp, #76]	; 0x4c
 8009076:	e772      	b.n	8008f5e <_dtoa_r+0xf6>
 8009078:	9b00      	ldr	r3, [sp, #0]
 800907a:	f1c0 0020 	rsb	r0, r0, #32
 800907e:	fa03 f000 	lsl.w	r0, r3, r0
 8009082:	e7f0      	b.n	8009066 <_dtoa_r+0x1fe>
 8009084:	2301      	movs	r3, #1
 8009086:	e7b1      	b.n	8008fec <_dtoa_r+0x184>
 8009088:	900f      	str	r0, [sp, #60]	; 0x3c
 800908a:	e7b0      	b.n	8008fee <_dtoa_r+0x186>
 800908c:	9b05      	ldr	r3, [sp, #20]
 800908e:	eba3 030a 	sub.w	r3, r3, sl
 8009092:	9305      	str	r3, [sp, #20]
 8009094:	f1ca 0300 	rsb	r3, sl, #0
 8009098:	9307      	str	r3, [sp, #28]
 800909a:	2300      	movs	r3, #0
 800909c:	930e      	str	r3, [sp, #56]	; 0x38
 800909e:	e7bb      	b.n	8009018 <_dtoa_r+0x1b0>
 80090a0:	2301      	movs	r3, #1
 80090a2:	930a      	str	r3, [sp, #40]	; 0x28
 80090a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	dd59      	ble.n	800915e <_dtoa_r+0x2f6>
 80090aa:	9302      	str	r3, [sp, #8]
 80090ac:	4699      	mov	r9, r3
 80090ae:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80090b0:	2200      	movs	r2, #0
 80090b2:	6072      	str	r2, [r6, #4]
 80090b4:	2204      	movs	r2, #4
 80090b6:	f102 0014 	add.w	r0, r2, #20
 80090ba:	4298      	cmp	r0, r3
 80090bc:	6871      	ldr	r1, [r6, #4]
 80090be:	d953      	bls.n	8009168 <_dtoa_r+0x300>
 80090c0:	4620      	mov	r0, r4
 80090c2:	f000 fe88 	bl	8009dd6 <_Balloc>
 80090c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80090c8:	6030      	str	r0, [r6, #0]
 80090ca:	f1b9 0f0e 	cmp.w	r9, #14
 80090ce:	f8d3 b000 	ldr.w	fp, [r3]
 80090d2:	f200 80e6 	bhi.w	80092a2 <_dtoa_r+0x43a>
 80090d6:	2d00      	cmp	r5, #0
 80090d8:	f000 80e3 	beq.w	80092a2 <_dtoa_r+0x43a>
 80090dc:	ed9d 7b00 	vldr	d7, [sp]
 80090e0:	f1ba 0f00 	cmp.w	sl, #0
 80090e4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80090e8:	dd74      	ble.n	80091d4 <_dtoa_r+0x36c>
 80090ea:	4a2a      	ldr	r2, [pc, #168]	; (8009194 <_dtoa_r+0x32c>)
 80090ec:	f00a 030f 	and.w	r3, sl, #15
 80090f0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80090f4:	ed93 7b00 	vldr	d7, [r3]
 80090f8:	ea4f 162a 	mov.w	r6, sl, asr #4
 80090fc:	06f0      	lsls	r0, r6, #27
 80090fe:	ed8d 7b08 	vstr	d7, [sp, #32]
 8009102:	d565      	bpl.n	80091d0 <_dtoa_r+0x368>
 8009104:	4b24      	ldr	r3, [pc, #144]	; (8009198 <_dtoa_r+0x330>)
 8009106:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800910a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800910e:	f7f7 fbad 	bl	800086c <__aeabi_ddiv>
 8009112:	e9cd 0100 	strd	r0, r1, [sp]
 8009116:	f006 060f 	and.w	r6, r6, #15
 800911a:	2503      	movs	r5, #3
 800911c:	4f1e      	ldr	r7, [pc, #120]	; (8009198 <_dtoa_r+0x330>)
 800911e:	e04c      	b.n	80091ba <_dtoa_r+0x352>
 8009120:	2301      	movs	r3, #1
 8009122:	930a      	str	r3, [sp, #40]	; 0x28
 8009124:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009126:	4453      	add	r3, sl
 8009128:	f103 0901 	add.w	r9, r3, #1
 800912c:	9302      	str	r3, [sp, #8]
 800912e:	464b      	mov	r3, r9
 8009130:	2b01      	cmp	r3, #1
 8009132:	bfb8      	it	lt
 8009134:	2301      	movlt	r3, #1
 8009136:	e7ba      	b.n	80090ae <_dtoa_r+0x246>
 8009138:	2300      	movs	r3, #0
 800913a:	e7b2      	b.n	80090a2 <_dtoa_r+0x23a>
 800913c:	2300      	movs	r3, #0
 800913e:	e7f0      	b.n	8009122 <_dtoa_r+0x2ba>
 8009140:	2501      	movs	r5, #1
 8009142:	2300      	movs	r3, #0
 8009144:	9306      	str	r3, [sp, #24]
 8009146:	950a      	str	r5, [sp, #40]	; 0x28
 8009148:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800914c:	9302      	str	r3, [sp, #8]
 800914e:	4699      	mov	r9, r3
 8009150:	2200      	movs	r2, #0
 8009152:	2312      	movs	r3, #18
 8009154:	920b      	str	r2, [sp, #44]	; 0x2c
 8009156:	e7aa      	b.n	80090ae <_dtoa_r+0x246>
 8009158:	2301      	movs	r3, #1
 800915a:	930a      	str	r3, [sp, #40]	; 0x28
 800915c:	e7f4      	b.n	8009148 <_dtoa_r+0x2e0>
 800915e:	2301      	movs	r3, #1
 8009160:	9302      	str	r3, [sp, #8]
 8009162:	4699      	mov	r9, r3
 8009164:	461a      	mov	r2, r3
 8009166:	e7f5      	b.n	8009154 <_dtoa_r+0x2ec>
 8009168:	3101      	adds	r1, #1
 800916a:	6071      	str	r1, [r6, #4]
 800916c:	0052      	lsls	r2, r2, #1
 800916e:	e7a2      	b.n	80090b6 <_dtoa_r+0x24e>
 8009170:	636f4361 	.word	0x636f4361
 8009174:	3fd287a7 	.word	0x3fd287a7
 8009178:	8b60c8b3 	.word	0x8b60c8b3
 800917c:	3fc68a28 	.word	0x3fc68a28
 8009180:	509f79fb 	.word	0x509f79fb
 8009184:	3fd34413 	.word	0x3fd34413
 8009188:	7ff00000 	.word	0x7ff00000
 800918c:	0800b0e1 	.word	0x0800b0e1
 8009190:	3ff80000 	.word	0x3ff80000
 8009194:	0800b1a0 	.word	0x0800b1a0
 8009198:	0800b178 	.word	0x0800b178
 800919c:	0800b10d 	.word	0x0800b10d
 80091a0:	07f1      	lsls	r1, r6, #31
 80091a2:	d508      	bpl.n	80091b6 <_dtoa_r+0x34e>
 80091a4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80091a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80091ac:	f7f7 fa34 	bl	8000618 <__aeabi_dmul>
 80091b0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80091b4:	3501      	adds	r5, #1
 80091b6:	1076      	asrs	r6, r6, #1
 80091b8:	3708      	adds	r7, #8
 80091ba:	2e00      	cmp	r6, #0
 80091bc:	d1f0      	bne.n	80091a0 <_dtoa_r+0x338>
 80091be:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80091c2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80091c6:	f7f7 fb51 	bl	800086c <__aeabi_ddiv>
 80091ca:	e9cd 0100 	strd	r0, r1, [sp]
 80091ce:	e01a      	b.n	8009206 <_dtoa_r+0x39e>
 80091d0:	2502      	movs	r5, #2
 80091d2:	e7a3      	b.n	800911c <_dtoa_r+0x2b4>
 80091d4:	f000 80a0 	beq.w	8009318 <_dtoa_r+0x4b0>
 80091d8:	f1ca 0600 	rsb	r6, sl, #0
 80091dc:	4b9f      	ldr	r3, [pc, #636]	; (800945c <_dtoa_r+0x5f4>)
 80091de:	4fa0      	ldr	r7, [pc, #640]	; (8009460 <_dtoa_r+0x5f8>)
 80091e0:	f006 020f 	and.w	r2, r6, #15
 80091e4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80091e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091ec:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80091f0:	f7f7 fa12 	bl	8000618 <__aeabi_dmul>
 80091f4:	e9cd 0100 	strd	r0, r1, [sp]
 80091f8:	1136      	asrs	r6, r6, #4
 80091fa:	2300      	movs	r3, #0
 80091fc:	2502      	movs	r5, #2
 80091fe:	2e00      	cmp	r6, #0
 8009200:	d17f      	bne.n	8009302 <_dtoa_r+0x49a>
 8009202:	2b00      	cmp	r3, #0
 8009204:	d1e1      	bne.n	80091ca <_dtoa_r+0x362>
 8009206:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009208:	2b00      	cmp	r3, #0
 800920a:	f000 8087 	beq.w	800931c <_dtoa_r+0x4b4>
 800920e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8009212:	2200      	movs	r2, #0
 8009214:	4b93      	ldr	r3, [pc, #588]	; (8009464 <_dtoa_r+0x5fc>)
 8009216:	4630      	mov	r0, r6
 8009218:	4639      	mov	r1, r7
 800921a:	f7f7 fc6f 	bl	8000afc <__aeabi_dcmplt>
 800921e:	2800      	cmp	r0, #0
 8009220:	d07c      	beq.n	800931c <_dtoa_r+0x4b4>
 8009222:	f1b9 0f00 	cmp.w	r9, #0
 8009226:	d079      	beq.n	800931c <_dtoa_r+0x4b4>
 8009228:	9b02      	ldr	r3, [sp, #8]
 800922a:	2b00      	cmp	r3, #0
 800922c:	dd35      	ble.n	800929a <_dtoa_r+0x432>
 800922e:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8009232:	9308      	str	r3, [sp, #32]
 8009234:	4639      	mov	r1, r7
 8009236:	2200      	movs	r2, #0
 8009238:	4b8b      	ldr	r3, [pc, #556]	; (8009468 <_dtoa_r+0x600>)
 800923a:	4630      	mov	r0, r6
 800923c:	f7f7 f9ec 	bl	8000618 <__aeabi_dmul>
 8009240:	e9cd 0100 	strd	r0, r1, [sp]
 8009244:	9f02      	ldr	r7, [sp, #8]
 8009246:	3501      	adds	r5, #1
 8009248:	4628      	mov	r0, r5
 800924a:	f7f7 f97b 	bl	8000544 <__aeabi_i2d>
 800924e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009252:	f7f7 f9e1 	bl	8000618 <__aeabi_dmul>
 8009256:	2200      	movs	r2, #0
 8009258:	4b84      	ldr	r3, [pc, #528]	; (800946c <_dtoa_r+0x604>)
 800925a:	f7f7 f827 	bl	80002ac <__adddf3>
 800925e:	4605      	mov	r5, r0
 8009260:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8009264:	2f00      	cmp	r7, #0
 8009266:	d15d      	bne.n	8009324 <_dtoa_r+0x4bc>
 8009268:	2200      	movs	r2, #0
 800926a:	4b81      	ldr	r3, [pc, #516]	; (8009470 <_dtoa_r+0x608>)
 800926c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009270:	f7f7 f81a 	bl	80002a8 <__aeabi_dsub>
 8009274:	462a      	mov	r2, r5
 8009276:	4633      	mov	r3, r6
 8009278:	e9cd 0100 	strd	r0, r1, [sp]
 800927c:	f7f7 fc5c 	bl	8000b38 <__aeabi_dcmpgt>
 8009280:	2800      	cmp	r0, #0
 8009282:	f040 8288 	bne.w	8009796 <_dtoa_r+0x92e>
 8009286:	462a      	mov	r2, r5
 8009288:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800928c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009290:	f7f7 fc34 	bl	8000afc <__aeabi_dcmplt>
 8009294:	2800      	cmp	r0, #0
 8009296:	f040 827c 	bne.w	8009792 <_dtoa_r+0x92a>
 800929a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800929e:	e9cd 2300 	strd	r2, r3, [sp]
 80092a2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	f2c0 8150 	blt.w	800954a <_dtoa_r+0x6e2>
 80092aa:	f1ba 0f0e 	cmp.w	sl, #14
 80092ae:	f300 814c 	bgt.w	800954a <_dtoa_r+0x6e2>
 80092b2:	4b6a      	ldr	r3, [pc, #424]	; (800945c <_dtoa_r+0x5f4>)
 80092b4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80092b8:	ed93 7b00 	vldr	d7, [r3]
 80092bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80092be:	2b00      	cmp	r3, #0
 80092c0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80092c4:	f280 80d8 	bge.w	8009478 <_dtoa_r+0x610>
 80092c8:	f1b9 0f00 	cmp.w	r9, #0
 80092cc:	f300 80d4 	bgt.w	8009478 <_dtoa_r+0x610>
 80092d0:	f040 825e 	bne.w	8009790 <_dtoa_r+0x928>
 80092d4:	2200      	movs	r2, #0
 80092d6:	4b66      	ldr	r3, [pc, #408]	; (8009470 <_dtoa_r+0x608>)
 80092d8:	ec51 0b17 	vmov	r0, r1, d7
 80092dc:	f7f7 f99c 	bl	8000618 <__aeabi_dmul>
 80092e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80092e4:	f7f7 fc1e 	bl	8000b24 <__aeabi_dcmpge>
 80092e8:	464f      	mov	r7, r9
 80092ea:	464e      	mov	r6, r9
 80092ec:	2800      	cmp	r0, #0
 80092ee:	f040 8234 	bne.w	800975a <_dtoa_r+0x8f2>
 80092f2:	2331      	movs	r3, #49	; 0x31
 80092f4:	f10b 0501 	add.w	r5, fp, #1
 80092f8:	f88b 3000 	strb.w	r3, [fp]
 80092fc:	f10a 0a01 	add.w	sl, sl, #1
 8009300:	e22f      	b.n	8009762 <_dtoa_r+0x8fa>
 8009302:	07f2      	lsls	r2, r6, #31
 8009304:	d505      	bpl.n	8009312 <_dtoa_r+0x4aa>
 8009306:	e9d7 2300 	ldrd	r2, r3, [r7]
 800930a:	f7f7 f985 	bl	8000618 <__aeabi_dmul>
 800930e:	3501      	adds	r5, #1
 8009310:	2301      	movs	r3, #1
 8009312:	1076      	asrs	r6, r6, #1
 8009314:	3708      	adds	r7, #8
 8009316:	e772      	b.n	80091fe <_dtoa_r+0x396>
 8009318:	2502      	movs	r5, #2
 800931a:	e774      	b.n	8009206 <_dtoa_r+0x39e>
 800931c:	f8cd a020 	str.w	sl, [sp, #32]
 8009320:	464f      	mov	r7, r9
 8009322:	e791      	b.n	8009248 <_dtoa_r+0x3e0>
 8009324:	4b4d      	ldr	r3, [pc, #308]	; (800945c <_dtoa_r+0x5f4>)
 8009326:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800932a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800932e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009330:	2b00      	cmp	r3, #0
 8009332:	d047      	beq.n	80093c4 <_dtoa_r+0x55c>
 8009334:	4602      	mov	r2, r0
 8009336:	460b      	mov	r3, r1
 8009338:	2000      	movs	r0, #0
 800933a:	494e      	ldr	r1, [pc, #312]	; (8009474 <_dtoa_r+0x60c>)
 800933c:	f7f7 fa96 	bl	800086c <__aeabi_ddiv>
 8009340:	462a      	mov	r2, r5
 8009342:	4633      	mov	r3, r6
 8009344:	f7f6 ffb0 	bl	80002a8 <__aeabi_dsub>
 8009348:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800934c:	465d      	mov	r5, fp
 800934e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009352:	f7f7 fc11 	bl	8000b78 <__aeabi_d2iz>
 8009356:	4606      	mov	r6, r0
 8009358:	f7f7 f8f4 	bl	8000544 <__aeabi_i2d>
 800935c:	4602      	mov	r2, r0
 800935e:	460b      	mov	r3, r1
 8009360:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009364:	f7f6 ffa0 	bl	80002a8 <__aeabi_dsub>
 8009368:	3630      	adds	r6, #48	; 0x30
 800936a:	f805 6b01 	strb.w	r6, [r5], #1
 800936e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8009372:	e9cd 0100 	strd	r0, r1, [sp]
 8009376:	f7f7 fbc1 	bl	8000afc <__aeabi_dcmplt>
 800937a:	2800      	cmp	r0, #0
 800937c:	d163      	bne.n	8009446 <_dtoa_r+0x5de>
 800937e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009382:	2000      	movs	r0, #0
 8009384:	4937      	ldr	r1, [pc, #220]	; (8009464 <_dtoa_r+0x5fc>)
 8009386:	f7f6 ff8f 	bl	80002a8 <__aeabi_dsub>
 800938a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800938e:	f7f7 fbb5 	bl	8000afc <__aeabi_dcmplt>
 8009392:	2800      	cmp	r0, #0
 8009394:	f040 80b7 	bne.w	8009506 <_dtoa_r+0x69e>
 8009398:	eba5 030b 	sub.w	r3, r5, fp
 800939c:	429f      	cmp	r7, r3
 800939e:	f77f af7c 	ble.w	800929a <_dtoa_r+0x432>
 80093a2:	2200      	movs	r2, #0
 80093a4:	4b30      	ldr	r3, [pc, #192]	; (8009468 <_dtoa_r+0x600>)
 80093a6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80093aa:	f7f7 f935 	bl	8000618 <__aeabi_dmul>
 80093ae:	2200      	movs	r2, #0
 80093b0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80093b4:	4b2c      	ldr	r3, [pc, #176]	; (8009468 <_dtoa_r+0x600>)
 80093b6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80093ba:	f7f7 f92d 	bl	8000618 <__aeabi_dmul>
 80093be:	e9cd 0100 	strd	r0, r1, [sp]
 80093c2:	e7c4      	b.n	800934e <_dtoa_r+0x4e6>
 80093c4:	462a      	mov	r2, r5
 80093c6:	4633      	mov	r3, r6
 80093c8:	f7f7 f926 	bl	8000618 <__aeabi_dmul>
 80093cc:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80093d0:	eb0b 0507 	add.w	r5, fp, r7
 80093d4:	465e      	mov	r6, fp
 80093d6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80093da:	f7f7 fbcd 	bl	8000b78 <__aeabi_d2iz>
 80093de:	4607      	mov	r7, r0
 80093e0:	f7f7 f8b0 	bl	8000544 <__aeabi_i2d>
 80093e4:	3730      	adds	r7, #48	; 0x30
 80093e6:	4602      	mov	r2, r0
 80093e8:	460b      	mov	r3, r1
 80093ea:	e9dd 0100 	ldrd	r0, r1, [sp]
 80093ee:	f7f6 ff5b 	bl	80002a8 <__aeabi_dsub>
 80093f2:	f806 7b01 	strb.w	r7, [r6], #1
 80093f6:	42ae      	cmp	r6, r5
 80093f8:	e9cd 0100 	strd	r0, r1, [sp]
 80093fc:	f04f 0200 	mov.w	r2, #0
 8009400:	d126      	bne.n	8009450 <_dtoa_r+0x5e8>
 8009402:	4b1c      	ldr	r3, [pc, #112]	; (8009474 <_dtoa_r+0x60c>)
 8009404:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009408:	f7f6 ff50 	bl	80002ac <__adddf3>
 800940c:	4602      	mov	r2, r0
 800940e:	460b      	mov	r3, r1
 8009410:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009414:	f7f7 fb90 	bl	8000b38 <__aeabi_dcmpgt>
 8009418:	2800      	cmp	r0, #0
 800941a:	d174      	bne.n	8009506 <_dtoa_r+0x69e>
 800941c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8009420:	2000      	movs	r0, #0
 8009422:	4914      	ldr	r1, [pc, #80]	; (8009474 <_dtoa_r+0x60c>)
 8009424:	f7f6 ff40 	bl	80002a8 <__aeabi_dsub>
 8009428:	4602      	mov	r2, r0
 800942a:	460b      	mov	r3, r1
 800942c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009430:	f7f7 fb64 	bl	8000afc <__aeabi_dcmplt>
 8009434:	2800      	cmp	r0, #0
 8009436:	f43f af30 	beq.w	800929a <_dtoa_r+0x432>
 800943a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800943e:	2b30      	cmp	r3, #48	; 0x30
 8009440:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8009444:	d002      	beq.n	800944c <_dtoa_r+0x5e4>
 8009446:	f8dd a020 	ldr.w	sl, [sp, #32]
 800944a:	e04a      	b.n	80094e2 <_dtoa_r+0x67a>
 800944c:	4615      	mov	r5, r2
 800944e:	e7f4      	b.n	800943a <_dtoa_r+0x5d2>
 8009450:	4b05      	ldr	r3, [pc, #20]	; (8009468 <_dtoa_r+0x600>)
 8009452:	f7f7 f8e1 	bl	8000618 <__aeabi_dmul>
 8009456:	e9cd 0100 	strd	r0, r1, [sp]
 800945a:	e7bc      	b.n	80093d6 <_dtoa_r+0x56e>
 800945c:	0800b1a0 	.word	0x0800b1a0
 8009460:	0800b178 	.word	0x0800b178
 8009464:	3ff00000 	.word	0x3ff00000
 8009468:	40240000 	.word	0x40240000
 800946c:	401c0000 	.word	0x401c0000
 8009470:	40140000 	.word	0x40140000
 8009474:	3fe00000 	.word	0x3fe00000
 8009478:	e9dd 6700 	ldrd	r6, r7, [sp]
 800947c:	465d      	mov	r5, fp
 800947e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009482:	4630      	mov	r0, r6
 8009484:	4639      	mov	r1, r7
 8009486:	f7f7 f9f1 	bl	800086c <__aeabi_ddiv>
 800948a:	f7f7 fb75 	bl	8000b78 <__aeabi_d2iz>
 800948e:	4680      	mov	r8, r0
 8009490:	f7f7 f858 	bl	8000544 <__aeabi_i2d>
 8009494:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009498:	f7f7 f8be 	bl	8000618 <__aeabi_dmul>
 800949c:	4602      	mov	r2, r0
 800949e:	460b      	mov	r3, r1
 80094a0:	4630      	mov	r0, r6
 80094a2:	4639      	mov	r1, r7
 80094a4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 80094a8:	f7f6 fefe 	bl	80002a8 <__aeabi_dsub>
 80094ac:	f805 6b01 	strb.w	r6, [r5], #1
 80094b0:	eba5 060b 	sub.w	r6, r5, fp
 80094b4:	45b1      	cmp	r9, r6
 80094b6:	4602      	mov	r2, r0
 80094b8:	460b      	mov	r3, r1
 80094ba:	d139      	bne.n	8009530 <_dtoa_r+0x6c8>
 80094bc:	f7f6 fef6 	bl	80002ac <__adddf3>
 80094c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80094c4:	4606      	mov	r6, r0
 80094c6:	460f      	mov	r7, r1
 80094c8:	f7f7 fb36 	bl	8000b38 <__aeabi_dcmpgt>
 80094cc:	b9c8      	cbnz	r0, 8009502 <_dtoa_r+0x69a>
 80094ce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80094d2:	4630      	mov	r0, r6
 80094d4:	4639      	mov	r1, r7
 80094d6:	f7f7 fb07 	bl	8000ae8 <__aeabi_dcmpeq>
 80094da:	b110      	cbz	r0, 80094e2 <_dtoa_r+0x67a>
 80094dc:	f018 0f01 	tst.w	r8, #1
 80094e0:	d10f      	bne.n	8009502 <_dtoa_r+0x69a>
 80094e2:	9904      	ldr	r1, [sp, #16]
 80094e4:	4620      	mov	r0, r4
 80094e6:	f000 fcaa 	bl	8009e3e <_Bfree>
 80094ea:	2300      	movs	r3, #0
 80094ec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80094ee:	702b      	strb	r3, [r5, #0]
 80094f0:	f10a 0301 	add.w	r3, sl, #1
 80094f4:	6013      	str	r3, [r2, #0]
 80094f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	f000 8241 	beq.w	8009980 <_dtoa_r+0xb18>
 80094fe:	601d      	str	r5, [r3, #0]
 8009500:	e23e      	b.n	8009980 <_dtoa_r+0xb18>
 8009502:	f8cd a020 	str.w	sl, [sp, #32]
 8009506:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800950a:	2a39      	cmp	r2, #57	; 0x39
 800950c:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 8009510:	d108      	bne.n	8009524 <_dtoa_r+0x6bc>
 8009512:	459b      	cmp	fp, r3
 8009514:	d10a      	bne.n	800952c <_dtoa_r+0x6c4>
 8009516:	9b08      	ldr	r3, [sp, #32]
 8009518:	3301      	adds	r3, #1
 800951a:	9308      	str	r3, [sp, #32]
 800951c:	2330      	movs	r3, #48	; 0x30
 800951e:	f88b 3000 	strb.w	r3, [fp]
 8009522:	465b      	mov	r3, fp
 8009524:	781a      	ldrb	r2, [r3, #0]
 8009526:	3201      	adds	r2, #1
 8009528:	701a      	strb	r2, [r3, #0]
 800952a:	e78c      	b.n	8009446 <_dtoa_r+0x5de>
 800952c:	461d      	mov	r5, r3
 800952e:	e7ea      	b.n	8009506 <_dtoa_r+0x69e>
 8009530:	2200      	movs	r2, #0
 8009532:	4b9b      	ldr	r3, [pc, #620]	; (80097a0 <_dtoa_r+0x938>)
 8009534:	f7f7 f870 	bl	8000618 <__aeabi_dmul>
 8009538:	2200      	movs	r2, #0
 800953a:	2300      	movs	r3, #0
 800953c:	4606      	mov	r6, r0
 800953e:	460f      	mov	r7, r1
 8009540:	f7f7 fad2 	bl	8000ae8 <__aeabi_dcmpeq>
 8009544:	2800      	cmp	r0, #0
 8009546:	d09a      	beq.n	800947e <_dtoa_r+0x616>
 8009548:	e7cb      	b.n	80094e2 <_dtoa_r+0x67a>
 800954a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800954c:	2a00      	cmp	r2, #0
 800954e:	f000 808b 	beq.w	8009668 <_dtoa_r+0x800>
 8009552:	9a06      	ldr	r2, [sp, #24]
 8009554:	2a01      	cmp	r2, #1
 8009556:	dc6e      	bgt.n	8009636 <_dtoa_r+0x7ce>
 8009558:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800955a:	2a00      	cmp	r2, #0
 800955c:	d067      	beq.n	800962e <_dtoa_r+0x7c6>
 800955e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009562:	9f07      	ldr	r7, [sp, #28]
 8009564:	9d05      	ldr	r5, [sp, #20]
 8009566:	9a05      	ldr	r2, [sp, #20]
 8009568:	2101      	movs	r1, #1
 800956a:	441a      	add	r2, r3
 800956c:	4620      	mov	r0, r4
 800956e:	9205      	str	r2, [sp, #20]
 8009570:	4498      	add	r8, r3
 8009572:	f000 fd04 	bl	8009f7e <__i2b>
 8009576:	4606      	mov	r6, r0
 8009578:	2d00      	cmp	r5, #0
 800957a:	dd0c      	ble.n	8009596 <_dtoa_r+0x72e>
 800957c:	f1b8 0f00 	cmp.w	r8, #0
 8009580:	dd09      	ble.n	8009596 <_dtoa_r+0x72e>
 8009582:	4545      	cmp	r5, r8
 8009584:	9a05      	ldr	r2, [sp, #20]
 8009586:	462b      	mov	r3, r5
 8009588:	bfa8      	it	ge
 800958a:	4643      	movge	r3, r8
 800958c:	1ad2      	subs	r2, r2, r3
 800958e:	9205      	str	r2, [sp, #20]
 8009590:	1aed      	subs	r5, r5, r3
 8009592:	eba8 0803 	sub.w	r8, r8, r3
 8009596:	9b07      	ldr	r3, [sp, #28]
 8009598:	b1eb      	cbz	r3, 80095d6 <_dtoa_r+0x76e>
 800959a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800959c:	2b00      	cmp	r3, #0
 800959e:	d067      	beq.n	8009670 <_dtoa_r+0x808>
 80095a0:	b18f      	cbz	r7, 80095c6 <_dtoa_r+0x75e>
 80095a2:	4631      	mov	r1, r6
 80095a4:	463a      	mov	r2, r7
 80095a6:	4620      	mov	r0, r4
 80095a8:	f000 fd88 	bl	800a0bc <__pow5mult>
 80095ac:	9a04      	ldr	r2, [sp, #16]
 80095ae:	4601      	mov	r1, r0
 80095b0:	4606      	mov	r6, r0
 80095b2:	4620      	mov	r0, r4
 80095b4:	f000 fcec 	bl	8009f90 <__multiply>
 80095b8:	9904      	ldr	r1, [sp, #16]
 80095ba:	9008      	str	r0, [sp, #32]
 80095bc:	4620      	mov	r0, r4
 80095be:	f000 fc3e 	bl	8009e3e <_Bfree>
 80095c2:	9b08      	ldr	r3, [sp, #32]
 80095c4:	9304      	str	r3, [sp, #16]
 80095c6:	9b07      	ldr	r3, [sp, #28]
 80095c8:	1bda      	subs	r2, r3, r7
 80095ca:	d004      	beq.n	80095d6 <_dtoa_r+0x76e>
 80095cc:	9904      	ldr	r1, [sp, #16]
 80095ce:	4620      	mov	r0, r4
 80095d0:	f000 fd74 	bl	800a0bc <__pow5mult>
 80095d4:	9004      	str	r0, [sp, #16]
 80095d6:	2101      	movs	r1, #1
 80095d8:	4620      	mov	r0, r4
 80095da:	f000 fcd0 	bl	8009f7e <__i2b>
 80095de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80095e0:	4607      	mov	r7, r0
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	f000 81d0 	beq.w	8009988 <_dtoa_r+0xb20>
 80095e8:	461a      	mov	r2, r3
 80095ea:	4601      	mov	r1, r0
 80095ec:	4620      	mov	r0, r4
 80095ee:	f000 fd65 	bl	800a0bc <__pow5mult>
 80095f2:	9b06      	ldr	r3, [sp, #24]
 80095f4:	2b01      	cmp	r3, #1
 80095f6:	4607      	mov	r7, r0
 80095f8:	dc40      	bgt.n	800967c <_dtoa_r+0x814>
 80095fa:	9b00      	ldr	r3, [sp, #0]
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d139      	bne.n	8009674 <_dtoa_r+0x80c>
 8009600:	9b01      	ldr	r3, [sp, #4]
 8009602:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009606:	2b00      	cmp	r3, #0
 8009608:	d136      	bne.n	8009678 <_dtoa_r+0x810>
 800960a:	9b01      	ldr	r3, [sp, #4]
 800960c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009610:	0d1b      	lsrs	r3, r3, #20
 8009612:	051b      	lsls	r3, r3, #20
 8009614:	b12b      	cbz	r3, 8009622 <_dtoa_r+0x7ba>
 8009616:	9b05      	ldr	r3, [sp, #20]
 8009618:	3301      	adds	r3, #1
 800961a:	9305      	str	r3, [sp, #20]
 800961c:	f108 0801 	add.w	r8, r8, #1
 8009620:	2301      	movs	r3, #1
 8009622:	9307      	str	r3, [sp, #28]
 8009624:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009626:	2b00      	cmp	r3, #0
 8009628:	d12a      	bne.n	8009680 <_dtoa_r+0x818>
 800962a:	2001      	movs	r0, #1
 800962c:	e030      	b.n	8009690 <_dtoa_r+0x828>
 800962e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009630:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009634:	e795      	b.n	8009562 <_dtoa_r+0x6fa>
 8009636:	9b07      	ldr	r3, [sp, #28]
 8009638:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 800963c:	42bb      	cmp	r3, r7
 800963e:	bfbf      	itttt	lt
 8009640:	9b07      	ldrlt	r3, [sp, #28]
 8009642:	9707      	strlt	r7, [sp, #28]
 8009644:	1afa      	sublt	r2, r7, r3
 8009646:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8009648:	bfbb      	ittet	lt
 800964a:	189b      	addlt	r3, r3, r2
 800964c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800964e:	1bdf      	subge	r7, r3, r7
 8009650:	2700      	movlt	r7, #0
 8009652:	f1b9 0f00 	cmp.w	r9, #0
 8009656:	bfb5      	itete	lt
 8009658:	9b05      	ldrlt	r3, [sp, #20]
 800965a:	9d05      	ldrge	r5, [sp, #20]
 800965c:	eba3 0509 	sublt.w	r5, r3, r9
 8009660:	464b      	movge	r3, r9
 8009662:	bfb8      	it	lt
 8009664:	2300      	movlt	r3, #0
 8009666:	e77e      	b.n	8009566 <_dtoa_r+0x6fe>
 8009668:	9f07      	ldr	r7, [sp, #28]
 800966a:	9d05      	ldr	r5, [sp, #20]
 800966c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800966e:	e783      	b.n	8009578 <_dtoa_r+0x710>
 8009670:	9a07      	ldr	r2, [sp, #28]
 8009672:	e7ab      	b.n	80095cc <_dtoa_r+0x764>
 8009674:	2300      	movs	r3, #0
 8009676:	e7d4      	b.n	8009622 <_dtoa_r+0x7ba>
 8009678:	9b00      	ldr	r3, [sp, #0]
 800967a:	e7d2      	b.n	8009622 <_dtoa_r+0x7ba>
 800967c:	2300      	movs	r3, #0
 800967e:	9307      	str	r3, [sp, #28]
 8009680:	693b      	ldr	r3, [r7, #16]
 8009682:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8009686:	6918      	ldr	r0, [r3, #16]
 8009688:	f000 fc2b 	bl	8009ee2 <__hi0bits>
 800968c:	f1c0 0020 	rsb	r0, r0, #32
 8009690:	4440      	add	r0, r8
 8009692:	f010 001f 	ands.w	r0, r0, #31
 8009696:	d047      	beq.n	8009728 <_dtoa_r+0x8c0>
 8009698:	f1c0 0320 	rsb	r3, r0, #32
 800969c:	2b04      	cmp	r3, #4
 800969e:	dd3b      	ble.n	8009718 <_dtoa_r+0x8b0>
 80096a0:	9b05      	ldr	r3, [sp, #20]
 80096a2:	f1c0 001c 	rsb	r0, r0, #28
 80096a6:	4403      	add	r3, r0
 80096a8:	9305      	str	r3, [sp, #20]
 80096aa:	4405      	add	r5, r0
 80096ac:	4480      	add	r8, r0
 80096ae:	9b05      	ldr	r3, [sp, #20]
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	dd05      	ble.n	80096c0 <_dtoa_r+0x858>
 80096b4:	461a      	mov	r2, r3
 80096b6:	9904      	ldr	r1, [sp, #16]
 80096b8:	4620      	mov	r0, r4
 80096ba:	f000 fd4d 	bl	800a158 <__lshift>
 80096be:	9004      	str	r0, [sp, #16]
 80096c0:	f1b8 0f00 	cmp.w	r8, #0
 80096c4:	dd05      	ble.n	80096d2 <_dtoa_r+0x86a>
 80096c6:	4639      	mov	r1, r7
 80096c8:	4642      	mov	r2, r8
 80096ca:	4620      	mov	r0, r4
 80096cc:	f000 fd44 	bl	800a158 <__lshift>
 80096d0:	4607      	mov	r7, r0
 80096d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80096d4:	b353      	cbz	r3, 800972c <_dtoa_r+0x8c4>
 80096d6:	4639      	mov	r1, r7
 80096d8:	9804      	ldr	r0, [sp, #16]
 80096da:	f000 fd91 	bl	800a200 <__mcmp>
 80096de:	2800      	cmp	r0, #0
 80096e0:	da24      	bge.n	800972c <_dtoa_r+0x8c4>
 80096e2:	2300      	movs	r3, #0
 80096e4:	220a      	movs	r2, #10
 80096e6:	9904      	ldr	r1, [sp, #16]
 80096e8:	4620      	mov	r0, r4
 80096ea:	f000 fbbf 	bl	8009e6c <__multadd>
 80096ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80096f0:	9004      	str	r0, [sp, #16]
 80096f2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	f000 814d 	beq.w	8009996 <_dtoa_r+0xb2e>
 80096fc:	2300      	movs	r3, #0
 80096fe:	4631      	mov	r1, r6
 8009700:	220a      	movs	r2, #10
 8009702:	4620      	mov	r0, r4
 8009704:	f000 fbb2 	bl	8009e6c <__multadd>
 8009708:	9b02      	ldr	r3, [sp, #8]
 800970a:	2b00      	cmp	r3, #0
 800970c:	4606      	mov	r6, r0
 800970e:	dc4f      	bgt.n	80097b0 <_dtoa_r+0x948>
 8009710:	9b06      	ldr	r3, [sp, #24]
 8009712:	2b02      	cmp	r3, #2
 8009714:	dd4c      	ble.n	80097b0 <_dtoa_r+0x948>
 8009716:	e011      	b.n	800973c <_dtoa_r+0x8d4>
 8009718:	d0c9      	beq.n	80096ae <_dtoa_r+0x846>
 800971a:	9a05      	ldr	r2, [sp, #20]
 800971c:	331c      	adds	r3, #28
 800971e:	441a      	add	r2, r3
 8009720:	9205      	str	r2, [sp, #20]
 8009722:	441d      	add	r5, r3
 8009724:	4498      	add	r8, r3
 8009726:	e7c2      	b.n	80096ae <_dtoa_r+0x846>
 8009728:	4603      	mov	r3, r0
 800972a:	e7f6      	b.n	800971a <_dtoa_r+0x8b2>
 800972c:	f1b9 0f00 	cmp.w	r9, #0
 8009730:	dc38      	bgt.n	80097a4 <_dtoa_r+0x93c>
 8009732:	9b06      	ldr	r3, [sp, #24]
 8009734:	2b02      	cmp	r3, #2
 8009736:	dd35      	ble.n	80097a4 <_dtoa_r+0x93c>
 8009738:	f8cd 9008 	str.w	r9, [sp, #8]
 800973c:	9b02      	ldr	r3, [sp, #8]
 800973e:	b963      	cbnz	r3, 800975a <_dtoa_r+0x8f2>
 8009740:	4639      	mov	r1, r7
 8009742:	2205      	movs	r2, #5
 8009744:	4620      	mov	r0, r4
 8009746:	f000 fb91 	bl	8009e6c <__multadd>
 800974a:	4601      	mov	r1, r0
 800974c:	4607      	mov	r7, r0
 800974e:	9804      	ldr	r0, [sp, #16]
 8009750:	f000 fd56 	bl	800a200 <__mcmp>
 8009754:	2800      	cmp	r0, #0
 8009756:	f73f adcc 	bgt.w	80092f2 <_dtoa_r+0x48a>
 800975a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800975c:	465d      	mov	r5, fp
 800975e:	ea6f 0a03 	mvn.w	sl, r3
 8009762:	f04f 0900 	mov.w	r9, #0
 8009766:	4639      	mov	r1, r7
 8009768:	4620      	mov	r0, r4
 800976a:	f000 fb68 	bl	8009e3e <_Bfree>
 800976e:	2e00      	cmp	r6, #0
 8009770:	f43f aeb7 	beq.w	80094e2 <_dtoa_r+0x67a>
 8009774:	f1b9 0f00 	cmp.w	r9, #0
 8009778:	d005      	beq.n	8009786 <_dtoa_r+0x91e>
 800977a:	45b1      	cmp	r9, r6
 800977c:	d003      	beq.n	8009786 <_dtoa_r+0x91e>
 800977e:	4649      	mov	r1, r9
 8009780:	4620      	mov	r0, r4
 8009782:	f000 fb5c 	bl	8009e3e <_Bfree>
 8009786:	4631      	mov	r1, r6
 8009788:	4620      	mov	r0, r4
 800978a:	f000 fb58 	bl	8009e3e <_Bfree>
 800978e:	e6a8      	b.n	80094e2 <_dtoa_r+0x67a>
 8009790:	2700      	movs	r7, #0
 8009792:	463e      	mov	r6, r7
 8009794:	e7e1      	b.n	800975a <_dtoa_r+0x8f2>
 8009796:	f8dd a020 	ldr.w	sl, [sp, #32]
 800979a:	463e      	mov	r6, r7
 800979c:	e5a9      	b.n	80092f2 <_dtoa_r+0x48a>
 800979e:	bf00      	nop
 80097a0:	40240000 	.word	0x40240000
 80097a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80097a6:	f8cd 9008 	str.w	r9, [sp, #8]
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	f000 80fa 	beq.w	80099a4 <_dtoa_r+0xb3c>
 80097b0:	2d00      	cmp	r5, #0
 80097b2:	dd05      	ble.n	80097c0 <_dtoa_r+0x958>
 80097b4:	4631      	mov	r1, r6
 80097b6:	462a      	mov	r2, r5
 80097b8:	4620      	mov	r0, r4
 80097ba:	f000 fccd 	bl	800a158 <__lshift>
 80097be:	4606      	mov	r6, r0
 80097c0:	9b07      	ldr	r3, [sp, #28]
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d04c      	beq.n	8009860 <_dtoa_r+0x9f8>
 80097c6:	6871      	ldr	r1, [r6, #4]
 80097c8:	4620      	mov	r0, r4
 80097ca:	f000 fb04 	bl	8009dd6 <_Balloc>
 80097ce:	6932      	ldr	r2, [r6, #16]
 80097d0:	3202      	adds	r2, #2
 80097d2:	4605      	mov	r5, r0
 80097d4:	0092      	lsls	r2, r2, #2
 80097d6:	f106 010c 	add.w	r1, r6, #12
 80097da:	300c      	adds	r0, #12
 80097dc:	f000 faf0 	bl	8009dc0 <memcpy>
 80097e0:	2201      	movs	r2, #1
 80097e2:	4629      	mov	r1, r5
 80097e4:	4620      	mov	r0, r4
 80097e6:	f000 fcb7 	bl	800a158 <__lshift>
 80097ea:	9b00      	ldr	r3, [sp, #0]
 80097ec:	f8cd b014 	str.w	fp, [sp, #20]
 80097f0:	f003 0301 	and.w	r3, r3, #1
 80097f4:	46b1      	mov	r9, r6
 80097f6:	9307      	str	r3, [sp, #28]
 80097f8:	4606      	mov	r6, r0
 80097fa:	4639      	mov	r1, r7
 80097fc:	9804      	ldr	r0, [sp, #16]
 80097fe:	f7ff faa5 	bl	8008d4c <quorem>
 8009802:	4649      	mov	r1, r9
 8009804:	4605      	mov	r5, r0
 8009806:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800980a:	9804      	ldr	r0, [sp, #16]
 800980c:	f000 fcf8 	bl	800a200 <__mcmp>
 8009810:	4632      	mov	r2, r6
 8009812:	9000      	str	r0, [sp, #0]
 8009814:	4639      	mov	r1, r7
 8009816:	4620      	mov	r0, r4
 8009818:	f000 fd0c 	bl	800a234 <__mdiff>
 800981c:	68c3      	ldr	r3, [r0, #12]
 800981e:	4602      	mov	r2, r0
 8009820:	bb03      	cbnz	r3, 8009864 <_dtoa_r+0x9fc>
 8009822:	4601      	mov	r1, r0
 8009824:	9008      	str	r0, [sp, #32]
 8009826:	9804      	ldr	r0, [sp, #16]
 8009828:	f000 fcea 	bl	800a200 <__mcmp>
 800982c:	9a08      	ldr	r2, [sp, #32]
 800982e:	4603      	mov	r3, r0
 8009830:	4611      	mov	r1, r2
 8009832:	4620      	mov	r0, r4
 8009834:	9308      	str	r3, [sp, #32]
 8009836:	f000 fb02 	bl	8009e3e <_Bfree>
 800983a:	9b08      	ldr	r3, [sp, #32]
 800983c:	b9a3      	cbnz	r3, 8009868 <_dtoa_r+0xa00>
 800983e:	9a06      	ldr	r2, [sp, #24]
 8009840:	b992      	cbnz	r2, 8009868 <_dtoa_r+0xa00>
 8009842:	9a07      	ldr	r2, [sp, #28]
 8009844:	b982      	cbnz	r2, 8009868 <_dtoa_r+0xa00>
 8009846:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800984a:	d029      	beq.n	80098a0 <_dtoa_r+0xa38>
 800984c:	9b00      	ldr	r3, [sp, #0]
 800984e:	2b00      	cmp	r3, #0
 8009850:	dd01      	ble.n	8009856 <_dtoa_r+0x9ee>
 8009852:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8009856:	9b05      	ldr	r3, [sp, #20]
 8009858:	1c5d      	adds	r5, r3, #1
 800985a:	f883 8000 	strb.w	r8, [r3]
 800985e:	e782      	b.n	8009766 <_dtoa_r+0x8fe>
 8009860:	4630      	mov	r0, r6
 8009862:	e7c2      	b.n	80097ea <_dtoa_r+0x982>
 8009864:	2301      	movs	r3, #1
 8009866:	e7e3      	b.n	8009830 <_dtoa_r+0x9c8>
 8009868:	9a00      	ldr	r2, [sp, #0]
 800986a:	2a00      	cmp	r2, #0
 800986c:	db04      	blt.n	8009878 <_dtoa_r+0xa10>
 800986e:	d125      	bne.n	80098bc <_dtoa_r+0xa54>
 8009870:	9a06      	ldr	r2, [sp, #24]
 8009872:	bb1a      	cbnz	r2, 80098bc <_dtoa_r+0xa54>
 8009874:	9a07      	ldr	r2, [sp, #28]
 8009876:	bb0a      	cbnz	r2, 80098bc <_dtoa_r+0xa54>
 8009878:	2b00      	cmp	r3, #0
 800987a:	ddec      	ble.n	8009856 <_dtoa_r+0x9ee>
 800987c:	2201      	movs	r2, #1
 800987e:	9904      	ldr	r1, [sp, #16]
 8009880:	4620      	mov	r0, r4
 8009882:	f000 fc69 	bl	800a158 <__lshift>
 8009886:	4639      	mov	r1, r7
 8009888:	9004      	str	r0, [sp, #16]
 800988a:	f000 fcb9 	bl	800a200 <__mcmp>
 800988e:	2800      	cmp	r0, #0
 8009890:	dc03      	bgt.n	800989a <_dtoa_r+0xa32>
 8009892:	d1e0      	bne.n	8009856 <_dtoa_r+0x9ee>
 8009894:	f018 0f01 	tst.w	r8, #1
 8009898:	d0dd      	beq.n	8009856 <_dtoa_r+0x9ee>
 800989a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800989e:	d1d8      	bne.n	8009852 <_dtoa_r+0x9ea>
 80098a0:	9b05      	ldr	r3, [sp, #20]
 80098a2:	9a05      	ldr	r2, [sp, #20]
 80098a4:	1c5d      	adds	r5, r3, #1
 80098a6:	2339      	movs	r3, #57	; 0x39
 80098a8:	7013      	strb	r3, [r2, #0]
 80098aa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80098ae:	2b39      	cmp	r3, #57	; 0x39
 80098b0:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 80098b4:	d04f      	beq.n	8009956 <_dtoa_r+0xaee>
 80098b6:	3301      	adds	r3, #1
 80098b8:	7013      	strb	r3, [r2, #0]
 80098ba:	e754      	b.n	8009766 <_dtoa_r+0x8fe>
 80098bc:	9a05      	ldr	r2, [sp, #20]
 80098be:	2b00      	cmp	r3, #0
 80098c0:	f102 0501 	add.w	r5, r2, #1
 80098c4:	dd06      	ble.n	80098d4 <_dtoa_r+0xa6c>
 80098c6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80098ca:	d0e9      	beq.n	80098a0 <_dtoa_r+0xa38>
 80098cc:	f108 0801 	add.w	r8, r8, #1
 80098d0:	9b05      	ldr	r3, [sp, #20]
 80098d2:	e7c2      	b.n	800985a <_dtoa_r+0x9f2>
 80098d4:	9a02      	ldr	r2, [sp, #8]
 80098d6:	f805 8c01 	strb.w	r8, [r5, #-1]
 80098da:	eba5 030b 	sub.w	r3, r5, fp
 80098de:	4293      	cmp	r3, r2
 80098e0:	d021      	beq.n	8009926 <_dtoa_r+0xabe>
 80098e2:	2300      	movs	r3, #0
 80098e4:	220a      	movs	r2, #10
 80098e6:	9904      	ldr	r1, [sp, #16]
 80098e8:	4620      	mov	r0, r4
 80098ea:	f000 fabf 	bl	8009e6c <__multadd>
 80098ee:	45b1      	cmp	r9, r6
 80098f0:	9004      	str	r0, [sp, #16]
 80098f2:	f04f 0300 	mov.w	r3, #0
 80098f6:	f04f 020a 	mov.w	r2, #10
 80098fa:	4649      	mov	r1, r9
 80098fc:	4620      	mov	r0, r4
 80098fe:	d105      	bne.n	800990c <_dtoa_r+0xaa4>
 8009900:	f000 fab4 	bl	8009e6c <__multadd>
 8009904:	4681      	mov	r9, r0
 8009906:	4606      	mov	r6, r0
 8009908:	9505      	str	r5, [sp, #20]
 800990a:	e776      	b.n	80097fa <_dtoa_r+0x992>
 800990c:	f000 faae 	bl	8009e6c <__multadd>
 8009910:	4631      	mov	r1, r6
 8009912:	4681      	mov	r9, r0
 8009914:	2300      	movs	r3, #0
 8009916:	220a      	movs	r2, #10
 8009918:	4620      	mov	r0, r4
 800991a:	f000 faa7 	bl	8009e6c <__multadd>
 800991e:	4606      	mov	r6, r0
 8009920:	e7f2      	b.n	8009908 <_dtoa_r+0xaa0>
 8009922:	f04f 0900 	mov.w	r9, #0
 8009926:	2201      	movs	r2, #1
 8009928:	9904      	ldr	r1, [sp, #16]
 800992a:	4620      	mov	r0, r4
 800992c:	f000 fc14 	bl	800a158 <__lshift>
 8009930:	4639      	mov	r1, r7
 8009932:	9004      	str	r0, [sp, #16]
 8009934:	f000 fc64 	bl	800a200 <__mcmp>
 8009938:	2800      	cmp	r0, #0
 800993a:	dcb6      	bgt.n	80098aa <_dtoa_r+0xa42>
 800993c:	d102      	bne.n	8009944 <_dtoa_r+0xadc>
 800993e:	f018 0f01 	tst.w	r8, #1
 8009942:	d1b2      	bne.n	80098aa <_dtoa_r+0xa42>
 8009944:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009948:	2b30      	cmp	r3, #48	; 0x30
 800994a:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800994e:	f47f af0a 	bne.w	8009766 <_dtoa_r+0x8fe>
 8009952:	4615      	mov	r5, r2
 8009954:	e7f6      	b.n	8009944 <_dtoa_r+0xadc>
 8009956:	4593      	cmp	fp, r2
 8009958:	d105      	bne.n	8009966 <_dtoa_r+0xafe>
 800995a:	2331      	movs	r3, #49	; 0x31
 800995c:	f10a 0a01 	add.w	sl, sl, #1
 8009960:	f88b 3000 	strb.w	r3, [fp]
 8009964:	e6ff      	b.n	8009766 <_dtoa_r+0x8fe>
 8009966:	4615      	mov	r5, r2
 8009968:	e79f      	b.n	80098aa <_dtoa_r+0xa42>
 800996a:	f8df b064 	ldr.w	fp, [pc, #100]	; 80099d0 <_dtoa_r+0xb68>
 800996e:	e007      	b.n	8009980 <_dtoa_r+0xb18>
 8009970:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009972:	f8df b060 	ldr.w	fp, [pc, #96]	; 80099d4 <_dtoa_r+0xb6c>
 8009976:	b11b      	cbz	r3, 8009980 <_dtoa_r+0xb18>
 8009978:	f10b 0308 	add.w	r3, fp, #8
 800997c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800997e:	6013      	str	r3, [r2, #0]
 8009980:	4658      	mov	r0, fp
 8009982:	b017      	add	sp, #92	; 0x5c
 8009984:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009988:	9b06      	ldr	r3, [sp, #24]
 800998a:	2b01      	cmp	r3, #1
 800998c:	f77f ae35 	ble.w	80095fa <_dtoa_r+0x792>
 8009990:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009992:	9307      	str	r3, [sp, #28]
 8009994:	e649      	b.n	800962a <_dtoa_r+0x7c2>
 8009996:	9b02      	ldr	r3, [sp, #8]
 8009998:	2b00      	cmp	r3, #0
 800999a:	dc03      	bgt.n	80099a4 <_dtoa_r+0xb3c>
 800999c:	9b06      	ldr	r3, [sp, #24]
 800999e:	2b02      	cmp	r3, #2
 80099a0:	f73f aecc 	bgt.w	800973c <_dtoa_r+0x8d4>
 80099a4:	465d      	mov	r5, fp
 80099a6:	4639      	mov	r1, r7
 80099a8:	9804      	ldr	r0, [sp, #16]
 80099aa:	f7ff f9cf 	bl	8008d4c <quorem>
 80099ae:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80099b2:	f805 8b01 	strb.w	r8, [r5], #1
 80099b6:	9a02      	ldr	r2, [sp, #8]
 80099b8:	eba5 030b 	sub.w	r3, r5, fp
 80099bc:	429a      	cmp	r2, r3
 80099be:	ddb0      	ble.n	8009922 <_dtoa_r+0xaba>
 80099c0:	2300      	movs	r3, #0
 80099c2:	220a      	movs	r2, #10
 80099c4:	9904      	ldr	r1, [sp, #16]
 80099c6:	4620      	mov	r0, r4
 80099c8:	f000 fa50 	bl	8009e6c <__multadd>
 80099cc:	9004      	str	r0, [sp, #16]
 80099ce:	e7ea      	b.n	80099a6 <_dtoa_r+0xb3e>
 80099d0:	0800b0e0 	.word	0x0800b0e0
 80099d4:	0800b104 	.word	0x0800b104

080099d8 <__sflush_r>:
 80099d8:	898a      	ldrh	r2, [r1, #12]
 80099da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099de:	4605      	mov	r5, r0
 80099e0:	0710      	lsls	r0, r2, #28
 80099e2:	460c      	mov	r4, r1
 80099e4:	d458      	bmi.n	8009a98 <__sflush_r+0xc0>
 80099e6:	684b      	ldr	r3, [r1, #4]
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	dc05      	bgt.n	80099f8 <__sflush_r+0x20>
 80099ec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	dc02      	bgt.n	80099f8 <__sflush_r+0x20>
 80099f2:	2000      	movs	r0, #0
 80099f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80099f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80099fa:	2e00      	cmp	r6, #0
 80099fc:	d0f9      	beq.n	80099f2 <__sflush_r+0x1a>
 80099fe:	2300      	movs	r3, #0
 8009a00:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009a04:	682f      	ldr	r7, [r5, #0]
 8009a06:	6a21      	ldr	r1, [r4, #32]
 8009a08:	602b      	str	r3, [r5, #0]
 8009a0a:	d032      	beq.n	8009a72 <__sflush_r+0x9a>
 8009a0c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009a0e:	89a3      	ldrh	r3, [r4, #12]
 8009a10:	075a      	lsls	r2, r3, #29
 8009a12:	d505      	bpl.n	8009a20 <__sflush_r+0x48>
 8009a14:	6863      	ldr	r3, [r4, #4]
 8009a16:	1ac0      	subs	r0, r0, r3
 8009a18:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009a1a:	b10b      	cbz	r3, 8009a20 <__sflush_r+0x48>
 8009a1c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009a1e:	1ac0      	subs	r0, r0, r3
 8009a20:	2300      	movs	r3, #0
 8009a22:	4602      	mov	r2, r0
 8009a24:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009a26:	6a21      	ldr	r1, [r4, #32]
 8009a28:	4628      	mov	r0, r5
 8009a2a:	47b0      	blx	r6
 8009a2c:	1c43      	adds	r3, r0, #1
 8009a2e:	89a3      	ldrh	r3, [r4, #12]
 8009a30:	d106      	bne.n	8009a40 <__sflush_r+0x68>
 8009a32:	6829      	ldr	r1, [r5, #0]
 8009a34:	291d      	cmp	r1, #29
 8009a36:	d848      	bhi.n	8009aca <__sflush_r+0xf2>
 8009a38:	4a29      	ldr	r2, [pc, #164]	; (8009ae0 <__sflush_r+0x108>)
 8009a3a:	40ca      	lsrs	r2, r1
 8009a3c:	07d6      	lsls	r6, r2, #31
 8009a3e:	d544      	bpl.n	8009aca <__sflush_r+0xf2>
 8009a40:	2200      	movs	r2, #0
 8009a42:	6062      	str	r2, [r4, #4]
 8009a44:	04d9      	lsls	r1, r3, #19
 8009a46:	6922      	ldr	r2, [r4, #16]
 8009a48:	6022      	str	r2, [r4, #0]
 8009a4a:	d504      	bpl.n	8009a56 <__sflush_r+0x7e>
 8009a4c:	1c42      	adds	r2, r0, #1
 8009a4e:	d101      	bne.n	8009a54 <__sflush_r+0x7c>
 8009a50:	682b      	ldr	r3, [r5, #0]
 8009a52:	b903      	cbnz	r3, 8009a56 <__sflush_r+0x7e>
 8009a54:	6560      	str	r0, [r4, #84]	; 0x54
 8009a56:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009a58:	602f      	str	r7, [r5, #0]
 8009a5a:	2900      	cmp	r1, #0
 8009a5c:	d0c9      	beq.n	80099f2 <__sflush_r+0x1a>
 8009a5e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009a62:	4299      	cmp	r1, r3
 8009a64:	d002      	beq.n	8009a6c <__sflush_r+0x94>
 8009a66:	4628      	mov	r0, r5
 8009a68:	f000 fc9e 	bl	800a3a8 <_free_r>
 8009a6c:	2000      	movs	r0, #0
 8009a6e:	6360      	str	r0, [r4, #52]	; 0x34
 8009a70:	e7c0      	b.n	80099f4 <__sflush_r+0x1c>
 8009a72:	2301      	movs	r3, #1
 8009a74:	4628      	mov	r0, r5
 8009a76:	47b0      	blx	r6
 8009a78:	1c41      	adds	r1, r0, #1
 8009a7a:	d1c8      	bne.n	8009a0e <__sflush_r+0x36>
 8009a7c:	682b      	ldr	r3, [r5, #0]
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d0c5      	beq.n	8009a0e <__sflush_r+0x36>
 8009a82:	2b1d      	cmp	r3, #29
 8009a84:	d001      	beq.n	8009a8a <__sflush_r+0xb2>
 8009a86:	2b16      	cmp	r3, #22
 8009a88:	d101      	bne.n	8009a8e <__sflush_r+0xb6>
 8009a8a:	602f      	str	r7, [r5, #0]
 8009a8c:	e7b1      	b.n	80099f2 <__sflush_r+0x1a>
 8009a8e:	89a3      	ldrh	r3, [r4, #12]
 8009a90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a94:	81a3      	strh	r3, [r4, #12]
 8009a96:	e7ad      	b.n	80099f4 <__sflush_r+0x1c>
 8009a98:	690f      	ldr	r7, [r1, #16]
 8009a9a:	2f00      	cmp	r7, #0
 8009a9c:	d0a9      	beq.n	80099f2 <__sflush_r+0x1a>
 8009a9e:	0793      	lsls	r3, r2, #30
 8009aa0:	680e      	ldr	r6, [r1, #0]
 8009aa2:	bf08      	it	eq
 8009aa4:	694b      	ldreq	r3, [r1, #20]
 8009aa6:	600f      	str	r7, [r1, #0]
 8009aa8:	bf18      	it	ne
 8009aaa:	2300      	movne	r3, #0
 8009aac:	eba6 0807 	sub.w	r8, r6, r7
 8009ab0:	608b      	str	r3, [r1, #8]
 8009ab2:	f1b8 0f00 	cmp.w	r8, #0
 8009ab6:	dd9c      	ble.n	80099f2 <__sflush_r+0x1a>
 8009ab8:	4643      	mov	r3, r8
 8009aba:	463a      	mov	r2, r7
 8009abc:	6a21      	ldr	r1, [r4, #32]
 8009abe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009ac0:	4628      	mov	r0, r5
 8009ac2:	47b0      	blx	r6
 8009ac4:	2800      	cmp	r0, #0
 8009ac6:	dc06      	bgt.n	8009ad6 <__sflush_r+0xfe>
 8009ac8:	89a3      	ldrh	r3, [r4, #12]
 8009aca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009ace:	81a3      	strh	r3, [r4, #12]
 8009ad0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009ad4:	e78e      	b.n	80099f4 <__sflush_r+0x1c>
 8009ad6:	4407      	add	r7, r0
 8009ad8:	eba8 0800 	sub.w	r8, r8, r0
 8009adc:	e7e9      	b.n	8009ab2 <__sflush_r+0xda>
 8009ade:	bf00      	nop
 8009ae0:	20400001 	.word	0x20400001

08009ae4 <_fflush_r>:
 8009ae4:	b538      	push	{r3, r4, r5, lr}
 8009ae6:	690b      	ldr	r3, [r1, #16]
 8009ae8:	4605      	mov	r5, r0
 8009aea:	460c      	mov	r4, r1
 8009aec:	b1db      	cbz	r3, 8009b26 <_fflush_r+0x42>
 8009aee:	b118      	cbz	r0, 8009af8 <_fflush_r+0x14>
 8009af0:	6983      	ldr	r3, [r0, #24]
 8009af2:	b90b      	cbnz	r3, 8009af8 <_fflush_r+0x14>
 8009af4:	f000 f860 	bl	8009bb8 <__sinit>
 8009af8:	4b0c      	ldr	r3, [pc, #48]	; (8009b2c <_fflush_r+0x48>)
 8009afa:	429c      	cmp	r4, r3
 8009afc:	d109      	bne.n	8009b12 <_fflush_r+0x2e>
 8009afe:	686c      	ldr	r4, [r5, #4]
 8009b00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009b04:	b17b      	cbz	r3, 8009b26 <_fflush_r+0x42>
 8009b06:	4621      	mov	r1, r4
 8009b08:	4628      	mov	r0, r5
 8009b0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009b0e:	f7ff bf63 	b.w	80099d8 <__sflush_r>
 8009b12:	4b07      	ldr	r3, [pc, #28]	; (8009b30 <_fflush_r+0x4c>)
 8009b14:	429c      	cmp	r4, r3
 8009b16:	d101      	bne.n	8009b1c <_fflush_r+0x38>
 8009b18:	68ac      	ldr	r4, [r5, #8]
 8009b1a:	e7f1      	b.n	8009b00 <_fflush_r+0x1c>
 8009b1c:	4b05      	ldr	r3, [pc, #20]	; (8009b34 <_fflush_r+0x50>)
 8009b1e:	429c      	cmp	r4, r3
 8009b20:	bf08      	it	eq
 8009b22:	68ec      	ldreq	r4, [r5, #12]
 8009b24:	e7ec      	b.n	8009b00 <_fflush_r+0x1c>
 8009b26:	2000      	movs	r0, #0
 8009b28:	bd38      	pop	{r3, r4, r5, pc}
 8009b2a:	bf00      	nop
 8009b2c:	0800b134 	.word	0x0800b134
 8009b30:	0800b154 	.word	0x0800b154
 8009b34:	0800b114 	.word	0x0800b114

08009b38 <std>:
 8009b38:	2300      	movs	r3, #0
 8009b3a:	b510      	push	{r4, lr}
 8009b3c:	4604      	mov	r4, r0
 8009b3e:	e9c0 3300 	strd	r3, r3, [r0]
 8009b42:	6083      	str	r3, [r0, #8]
 8009b44:	8181      	strh	r1, [r0, #12]
 8009b46:	6643      	str	r3, [r0, #100]	; 0x64
 8009b48:	81c2      	strh	r2, [r0, #14]
 8009b4a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009b4e:	6183      	str	r3, [r0, #24]
 8009b50:	4619      	mov	r1, r3
 8009b52:	2208      	movs	r2, #8
 8009b54:	305c      	adds	r0, #92	; 0x5c
 8009b56:	f7fe fb59 	bl	800820c <memset>
 8009b5a:	4b05      	ldr	r3, [pc, #20]	; (8009b70 <std+0x38>)
 8009b5c:	6263      	str	r3, [r4, #36]	; 0x24
 8009b5e:	4b05      	ldr	r3, [pc, #20]	; (8009b74 <std+0x3c>)
 8009b60:	62a3      	str	r3, [r4, #40]	; 0x28
 8009b62:	4b05      	ldr	r3, [pc, #20]	; (8009b78 <std+0x40>)
 8009b64:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009b66:	4b05      	ldr	r3, [pc, #20]	; (8009b7c <std+0x44>)
 8009b68:	6224      	str	r4, [r4, #32]
 8009b6a:	6323      	str	r3, [r4, #48]	; 0x30
 8009b6c:	bd10      	pop	{r4, pc}
 8009b6e:	bf00      	nop
 8009b70:	0800a799 	.word	0x0800a799
 8009b74:	0800a7bb 	.word	0x0800a7bb
 8009b78:	0800a7f3 	.word	0x0800a7f3
 8009b7c:	0800a817 	.word	0x0800a817

08009b80 <_cleanup_r>:
 8009b80:	4901      	ldr	r1, [pc, #4]	; (8009b88 <_cleanup_r+0x8>)
 8009b82:	f000 b885 	b.w	8009c90 <_fwalk_reent>
 8009b86:	bf00      	nop
 8009b88:	08009ae5 	.word	0x08009ae5

08009b8c <__sfmoreglue>:
 8009b8c:	b570      	push	{r4, r5, r6, lr}
 8009b8e:	1e4a      	subs	r2, r1, #1
 8009b90:	2568      	movs	r5, #104	; 0x68
 8009b92:	4355      	muls	r5, r2
 8009b94:	460e      	mov	r6, r1
 8009b96:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009b9a:	f000 fc53 	bl	800a444 <_malloc_r>
 8009b9e:	4604      	mov	r4, r0
 8009ba0:	b140      	cbz	r0, 8009bb4 <__sfmoreglue+0x28>
 8009ba2:	2100      	movs	r1, #0
 8009ba4:	e9c0 1600 	strd	r1, r6, [r0]
 8009ba8:	300c      	adds	r0, #12
 8009baa:	60a0      	str	r0, [r4, #8]
 8009bac:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009bb0:	f7fe fb2c 	bl	800820c <memset>
 8009bb4:	4620      	mov	r0, r4
 8009bb6:	bd70      	pop	{r4, r5, r6, pc}

08009bb8 <__sinit>:
 8009bb8:	6983      	ldr	r3, [r0, #24]
 8009bba:	b510      	push	{r4, lr}
 8009bbc:	4604      	mov	r4, r0
 8009bbe:	bb33      	cbnz	r3, 8009c0e <__sinit+0x56>
 8009bc0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8009bc4:	6503      	str	r3, [r0, #80]	; 0x50
 8009bc6:	4b12      	ldr	r3, [pc, #72]	; (8009c10 <__sinit+0x58>)
 8009bc8:	4a12      	ldr	r2, [pc, #72]	; (8009c14 <__sinit+0x5c>)
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	6282      	str	r2, [r0, #40]	; 0x28
 8009bce:	4298      	cmp	r0, r3
 8009bd0:	bf04      	itt	eq
 8009bd2:	2301      	moveq	r3, #1
 8009bd4:	6183      	streq	r3, [r0, #24]
 8009bd6:	f000 f81f 	bl	8009c18 <__sfp>
 8009bda:	6060      	str	r0, [r4, #4]
 8009bdc:	4620      	mov	r0, r4
 8009bde:	f000 f81b 	bl	8009c18 <__sfp>
 8009be2:	60a0      	str	r0, [r4, #8]
 8009be4:	4620      	mov	r0, r4
 8009be6:	f000 f817 	bl	8009c18 <__sfp>
 8009bea:	2200      	movs	r2, #0
 8009bec:	60e0      	str	r0, [r4, #12]
 8009bee:	2104      	movs	r1, #4
 8009bf0:	6860      	ldr	r0, [r4, #4]
 8009bf2:	f7ff ffa1 	bl	8009b38 <std>
 8009bf6:	2201      	movs	r2, #1
 8009bf8:	2109      	movs	r1, #9
 8009bfa:	68a0      	ldr	r0, [r4, #8]
 8009bfc:	f7ff ff9c 	bl	8009b38 <std>
 8009c00:	2202      	movs	r2, #2
 8009c02:	2112      	movs	r1, #18
 8009c04:	68e0      	ldr	r0, [r4, #12]
 8009c06:	f7ff ff97 	bl	8009b38 <std>
 8009c0a:	2301      	movs	r3, #1
 8009c0c:	61a3      	str	r3, [r4, #24]
 8009c0e:	bd10      	pop	{r4, pc}
 8009c10:	0800b0cc 	.word	0x0800b0cc
 8009c14:	08009b81 	.word	0x08009b81

08009c18 <__sfp>:
 8009c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c1a:	4b1b      	ldr	r3, [pc, #108]	; (8009c88 <__sfp+0x70>)
 8009c1c:	681e      	ldr	r6, [r3, #0]
 8009c1e:	69b3      	ldr	r3, [r6, #24]
 8009c20:	4607      	mov	r7, r0
 8009c22:	b913      	cbnz	r3, 8009c2a <__sfp+0x12>
 8009c24:	4630      	mov	r0, r6
 8009c26:	f7ff ffc7 	bl	8009bb8 <__sinit>
 8009c2a:	3648      	adds	r6, #72	; 0x48
 8009c2c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009c30:	3b01      	subs	r3, #1
 8009c32:	d503      	bpl.n	8009c3c <__sfp+0x24>
 8009c34:	6833      	ldr	r3, [r6, #0]
 8009c36:	b133      	cbz	r3, 8009c46 <__sfp+0x2e>
 8009c38:	6836      	ldr	r6, [r6, #0]
 8009c3a:	e7f7      	b.n	8009c2c <__sfp+0x14>
 8009c3c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009c40:	b16d      	cbz	r5, 8009c5e <__sfp+0x46>
 8009c42:	3468      	adds	r4, #104	; 0x68
 8009c44:	e7f4      	b.n	8009c30 <__sfp+0x18>
 8009c46:	2104      	movs	r1, #4
 8009c48:	4638      	mov	r0, r7
 8009c4a:	f7ff ff9f 	bl	8009b8c <__sfmoreglue>
 8009c4e:	6030      	str	r0, [r6, #0]
 8009c50:	2800      	cmp	r0, #0
 8009c52:	d1f1      	bne.n	8009c38 <__sfp+0x20>
 8009c54:	230c      	movs	r3, #12
 8009c56:	603b      	str	r3, [r7, #0]
 8009c58:	4604      	mov	r4, r0
 8009c5a:	4620      	mov	r0, r4
 8009c5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c5e:	4b0b      	ldr	r3, [pc, #44]	; (8009c8c <__sfp+0x74>)
 8009c60:	6665      	str	r5, [r4, #100]	; 0x64
 8009c62:	e9c4 5500 	strd	r5, r5, [r4]
 8009c66:	60a5      	str	r5, [r4, #8]
 8009c68:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8009c6c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8009c70:	2208      	movs	r2, #8
 8009c72:	4629      	mov	r1, r5
 8009c74:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009c78:	f7fe fac8 	bl	800820c <memset>
 8009c7c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009c80:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009c84:	e7e9      	b.n	8009c5a <__sfp+0x42>
 8009c86:	bf00      	nop
 8009c88:	0800b0cc 	.word	0x0800b0cc
 8009c8c:	ffff0001 	.word	0xffff0001

08009c90 <_fwalk_reent>:
 8009c90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009c94:	4680      	mov	r8, r0
 8009c96:	4689      	mov	r9, r1
 8009c98:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009c9c:	2600      	movs	r6, #0
 8009c9e:	b914      	cbnz	r4, 8009ca6 <_fwalk_reent+0x16>
 8009ca0:	4630      	mov	r0, r6
 8009ca2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009ca6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8009caa:	3f01      	subs	r7, #1
 8009cac:	d501      	bpl.n	8009cb2 <_fwalk_reent+0x22>
 8009cae:	6824      	ldr	r4, [r4, #0]
 8009cb0:	e7f5      	b.n	8009c9e <_fwalk_reent+0xe>
 8009cb2:	89ab      	ldrh	r3, [r5, #12]
 8009cb4:	2b01      	cmp	r3, #1
 8009cb6:	d907      	bls.n	8009cc8 <_fwalk_reent+0x38>
 8009cb8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009cbc:	3301      	adds	r3, #1
 8009cbe:	d003      	beq.n	8009cc8 <_fwalk_reent+0x38>
 8009cc0:	4629      	mov	r1, r5
 8009cc2:	4640      	mov	r0, r8
 8009cc4:	47c8      	blx	r9
 8009cc6:	4306      	orrs	r6, r0
 8009cc8:	3568      	adds	r5, #104	; 0x68
 8009cca:	e7ee      	b.n	8009caa <_fwalk_reent+0x1a>

08009ccc <_localeconv_r>:
 8009ccc:	4b04      	ldr	r3, [pc, #16]	; (8009ce0 <_localeconv_r+0x14>)
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	6a18      	ldr	r0, [r3, #32]
 8009cd2:	4b04      	ldr	r3, [pc, #16]	; (8009ce4 <_localeconv_r+0x18>)
 8009cd4:	2800      	cmp	r0, #0
 8009cd6:	bf08      	it	eq
 8009cd8:	4618      	moveq	r0, r3
 8009cda:	30f0      	adds	r0, #240	; 0xf0
 8009cdc:	4770      	bx	lr
 8009cde:	bf00      	nop
 8009ce0:	20000014 	.word	0x20000014
 8009ce4:	20000078 	.word	0x20000078

08009ce8 <__swhatbuf_r>:
 8009ce8:	b570      	push	{r4, r5, r6, lr}
 8009cea:	460e      	mov	r6, r1
 8009cec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009cf0:	2900      	cmp	r1, #0
 8009cf2:	b096      	sub	sp, #88	; 0x58
 8009cf4:	4614      	mov	r4, r2
 8009cf6:	461d      	mov	r5, r3
 8009cf8:	da07      	bge.n	8009d0a <__swhatbuf_r+0x22>
 8009cfa:	2300      	movs	r3, #0
 8009cfc:	602b      	str	r3, [r5, #0]
 8009cfe:	89b3      	ldrh	r3, [r6, #12]
 8009d00:	061a      	lsls	r2, r3, #24
 8009d02:	d410      	bmi.n	8009d26 <__swhatbuf_r+0x3e>
 8009d04:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009d08:	e00e      	b.n	8009d28 <__swhatbuf_r+0x40>
 8009d0a:	466a      	mov	r2, sp
 8009d0c:	f000 fdaa 	bl	800a864 <_fstat_r>
 8009d10:	2800      	cmp	r0, #0
 8009d12:	dbf2      	blt.n	8009cfa <__swhatbuf_r+0x12>
 8009d14:	9a01      	ldr	r2, [sp, #4]
 8009d16:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009d1a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009d1e:	425a      	negs	r2, r3
 8009d20:	415a      	adcs	r2, r3
 8009d22:	602a      	str	r2, [r5, #0]
 8009d24:	e7ee      	b.n	8009d04 <__swhatbuf_r+0x1c>
 8009d26:	2340      	movs	r3, #64	; 0x40
 8009d28:	2000      	movs	r0, #0
 8009d2a:	6023      	str	r3, [r4, #0]
 8009d2c:	b016      	add	sp, #88	; 0x58
 8009d2e:	bd70      	pop	{r4, r5, r6, pc}

08009d30 <__smakebuf_r>:
 8009d30:	898b      	ldrh	r3, [r1, #12]
 8009d32:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009d34:	079d      	lsls	r5, r3, #30
 8009d36:	4606      	mov	r6, r0
 8009d38:	460c      	mov	r4, r1
 8009d3a:	d507      	bpl.n	8009d4c <__smakebuf_r+0x1c>
 8009d3c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009d40:	6023      	str	r3, [r4, #0]
 8009d42:	6123      	str	r3, [r4, #16]
 8009d44:	2301      	movs	r3, #1
 8009d46:	6163      	str	r3, [r4, #20]
 8009d48:	b002      	add	sp, #8
 8009d4a:	bd70      	pop	{r4, r5, r6, pc}
 8009d4c:	ab01      	add	r3, sp, #4
 8009d4e:	466a      	mov	r2, sp
 8009d50:	f7ff ffca 	bl	8009ce8 <__swhatbuf_r>
 8009d54:	9900      	ldr	r1, [sp, #0]
 8009d56:	4605      	mov	r5, r0
 8009d58:	4630      	mov	r0, r6
 8009d5a:	f000 fb73 	bl	800a444 <_malloc_r>
 8009d5e:	b948      	cbnz	r0, 8009d74 <__smakebuf_r+0x44>
 8009d60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d64:	059a      	lsls	r2, r3, #22
 8009d66:	d4ef      	bmi.n	8009d48 <__smakebuf_r+0x18>
 8009d68:	f023 0303 	bic.w	r3, r3, #3
 8009d6c:	f043 0302 	orr.w	r3, r3, #2
 8009d70:	81a3      	strh	r3, [r4, #12]
 8009d72:	e7e3      	b.n	8009d3c <__smakebuf_r+0xc>
 8009d74:	4b0d      	ldr	r3, [pc, #52]	; (8009dac <__smakebuf_r+0x7c>)
 8009d76:	62b3      	str	r3, [r6, #40]	; 0x28
 8009d78:	89a3      	ldrh	r3, [r4, #12]
 8009d7a:	6020      	str	r0, [r4, #0]
 8009d7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d80:	81a3      	strh	r3, [r4, #12]
 8009d82:	9b00      	ldr	r3, [sp, #0]
 8009d84:	6163      	str	r3, [r4, #20]
 8009d86:	9b01      	ldr	r3, [sp, #4]
 8009d88:	6120      	str	r0, [r4, #16]
 8009d8a:	b15b      	cbz	r3, 8009da4 <__smakebuf_r+0x74>
 8009d8c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009d90:	4630      	mov	r0, r6
 8009d92:	f000 fd79 	bl	800a888 <_isatty_r>
 8009d96:	b128      	cbz	r0, 8009da4 <__smakebuf_r+0x74>
 8009d98:	89a3      	ldrh	r3, [r4, #12]
 8009d9a:	f023 0303 	bic.w	r3, r3, #3
 8009d9e:	f043 0301 	orr.w	r3, r3, #1
 8009da2:	81a3      	strh	r3, [r4, #12]
 8009da4:	89a3      	ldrh	r3, [r4, #12]
 8009da6:	431d      	orrs	r5, r3
 8009da8:	81a5      	strh	r5, [r4, #12]
 8009daa:	e7cd      	b.n	8009d48 <__smakebuf_r+0x18>
 8009dac:	08009b81 	.word	0x08009b81

08009db0 <malloc>:
 8009db0:	4b02      	ldr	r3, [pc, #8]	; (8009dbc <malloc+0xc>)
 8009db2:	4601      	mov	r1, r0
 8009db4:	6818      	ldr	r0, [r3, #0]
 8009db6:	f000 bb45 	b.w	800a444 <_malloc_r>
 8009dba:	bf00      	nop
 8009dbc:	20000014 	.word	0x20000014

08009dc0 <memcpy>:
 8009dc0:	b510      	push	{r4, lr}
 8009dc2:	1e43      	subs	r3, r0, #1
 8009dc4:	440a      	add	r2, r1
 8009dc6:	4291      	cmp	r1, r2
 8009dc8:	d100      	bne.n	8009dcc <memcpy+0xc>
 8009dca:	bd10      	pop	{r4, pc}
 8009dcc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009dd0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009dd4:	e7f7      	b.n	8009dc6 <memcpy+0x6>

08009dd6 <_Balloc>:
 8009dd6:	b570      	push	{r4, r5, r6, lr}
 8009dd8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009dda:	4604      	mov	r4, r0
 8009ddc:	460e      	mov	r6, r1
 8009dde:	b93d      	cbnz	r5, 8009df0 <_Balloc+0x1a>
 8009de0:	2010      	movs	r0, #16
 8009de2:	f7ff ffe5 	bl	8009db0 <malloc>
 8009de6:	6260      	str	r0, [r4, #36]	; 0x24
 8009de8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009dec:	6005      	str	r5, [r0, #0]
 8009dee:	60c5      	str	r5, [r0, #12]
 8009df0:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8009df2:	68eb      	ldr	r3, [r5, #12]
 8009df4:	b183      	cbz	r3, 8009e18 <_Balloc+0x42>
 8009df6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009df8:	68db      	ldr	r3, [r3, #12]
 8009dfa:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8009dfe:	b9b8      	cbnz	r0, 8009e30 <_Balloc+0x5a>
 8009e00:	2101      	movs	r1, #1
 8009e02:	fa01 f506 	lsl.w	r5, r1, r6
 8009e06:	1d6a      	adds	r2, r5, #5
 8009e08:	0092      	lsls	r2, r2, #2
 8009e0a:	4620      	mov	r0, r4
 8009e0c:	f000 fabe 	bl	800a38c <_calloc_r>
 8009e10:	b160      	cbz	r0, 8009e2c <_Balloc+0x56>
 8009e12:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8009e16:	e00e      	b.n	8009e36 <_Balloc+0x60>
 8009e18:	2221      	movs	r2, #33	; 0x21
 8009e1a:	2104      	movs	r1, #4
 8009e1c:	4620      	mov	r0, r4
 8009e1e:	f000 fab5 	bl	800a38c <_calloc_r>
 8009e22:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009e24:	60e8      	str	r0, [r5, #12]
 8009e26:	68db      	ldr	r3, [r3, #12]
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d1e4      	bne.n	8009df6 <_Balloc+0x20>
 8009e2c:	2000      	movs	r0, #0
 8009e2e:	bd70      	pop	{r4, r5, r6, pc}
 8009e30:	6802      	ldr	r2, [r0, #0]
 8009e32:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8009e36:	2300      	movs	r3, #0
 8009e38:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009e3c:	e7f7      	b.n	8009e2e <_Balloc+0x58>

08009e3e <_Bfree>:
 8009e3e:	b570      	push	{r4, r5, r6, lr}
 8009e40:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8009e42:	4606      	mov	r6, r0
 8009e44:	460d      	mov	r5, r1
 8009e46:	b93c      	cbnz	r4, 8009e58 <_Bfree+0x1a>
 8009e48:	2010      	movs	r0, #16
 8009e4a:	f7ff ffb1 	bl	8009db0 <malloc>
 8009e4e:	6270      	str	r0, [r6, #36]	; 0x24
 8009e50:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009e54:	6004      	str	r4, [r0, #0]
 8009e56:	60c4      	str	r4, [r0, #12]
 8009e58:	b13d      	cbz	r5, 8009e6a <_Bfree+0x2c>
 8009e5a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009e5c:	686a      	ldr	r2, [r5, #4]
 8009e5e:	68db      	ldr	r3, [r3, #12]
 8009e60:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009e64:	6029      	str	r1, [r5, #0]
 8009e66:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8009e6a:	bd70      	pop	{r4, r5, r6, pc}

08009e6c <__multadd>:
 8009e6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e70:	690d      	ldr	r5, [r1, #16]
 8009e72:	461f      	mov	r7, r3
 8009e74:	4606      	mov	r6, r0
 8009e76:	460c      	mov	r4, r1
 8009e78:	f101 0c14 	add.w	ip, r1, #20
 8009e7c:	2300      	movs	r3, #0
 8009e7e:	f8dc 0000 	ldr.w	r0, [ip]
 8009e82:	b281      	uxth	r1, r0
 8009e84:	fb02 7101 	mla	r1, r2, r1, r7
 8009e88:	0c0f      	lsrs	r7, r1, #16
 8009e8a:	0c00      	lsrs	r0, r0, #16
 8009e8c:	fb02 7000 	mla	r0, r2, r0, r7
 8009e90:	b289      	uxth	r1, r1
 8009e92:	3301      	adds	r3, #1
 8009e94:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8009e98:	429d      	cmp	r5, r3
 8009e9a:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8009e9e:	f84c 1b04 	str.w	r1, [ip], #4
 8009ea2:	dcec      	bgt.n	8009e7e <__multadd+0x12>
 8009ea4:	b1d7      	cbz	r7, 8009edc <__multadd+0x70>
 8009ea6:	68a3      	ldr	r3, [r4, #8]
 8009ea8:	42ab      	cmp	r3, r5
 8009eaa:	dc12      	bgt.n	8009ed2 <__multadd+0x66>
 8009eac:	6861      	ldr	r1, [r4, #4]
 8009eae:	4630      	mov	r0, r6
 8009eb0:	3101      	adds	r1, #1
 8009eb2:	f7ff ff90 	bl	8009dd6 <_Balloc>
 8009eb6:	6922      	ldr	r2, [r4, #16]
 8009eb8:	3202      	adds	r2, #2
 8009eba:	f104 010c 	add.w	r1, r4, #12
 8009ebe:	4680      	mov	r8, r0
 8009ec0:	0092      	lsls	r2, r2, #2
 8009ec2:	300c      	adds	r0, #12
 8009ec4:	f7ff ff7c 	bl	8009dc0 <memcpy>
 8009ec8:	4621      	mov	r1, r4
 8009eca:	4630      	mov	r0, r6
 8009ecc:	f7ff ffb7 	bl	8009e3e <_Bfree>
 8009ed0:	4644      	mov	r4, r8
 8009ed2:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009ed6:	3501      	adds	r5, #1
 8009ed8:	615f      	str	r7, [r3, #20]
 8009eda:	6125      	str	r5, [r4, #16]
 8009edc:	4620      	mov	r0, r4
 8009ede:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009ee2 <__hi0bits>:
 8009ee2:	0c02      	lsrs	r2, r0, #16
 8009ee4:	0412      	lsls	r2, r2, #16
 8009ee6:	4603      	mov	r3, r0
 8009ee8:	b9b2      	cbnz	r2, 8009f18 <__hi0bits+0x36>
 8009eea:	0403      	lsls	r3, r0, #16
 8009eec:	2010      	movs	r0, #16
 8009eee:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8009ef2:	bf04      	itt	eq
 8009ef4:	021b      	lsleq	r3, r3, #8
 8009ef6:	3008      	addeq	r0, #8
 8009ef8:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8009efc:	bf04      	itt	eq
 8009efe:	011b      	lsleq	r3, r3, #4
 8009f00:	3004      	addeq	r0, #4
 8009f02:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8009f06:	bf04      	itt	eq
 8009f08:	009b      	lsleq	r3, r3, #2
 8009f0a:	3002      	addeq	r0, #2
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	db06      	blt.n	8009f1e <__hi0bits+0x3c>
 8009f10:	005b      	lsls	r3, r3, #1
 8009f12:	d503      	bpl.n	8009f1c <__hi0bits+0x3a>
 8009f14:	3001      	adds	r0, #1
 8009f16:	4770      	bx	lr
 8009f18:	2000      	movs	r0, #0
 8009f1a:	e7e8      	b.n	8009eee <__hi0bits+0xc>
 8009f1c:	2020      	movs	r0, #32
 8009f1e:	4770      	bx	lr

08009f20 <__lo0bits>:
 8009f20:	6803      	ldr	r3, [r0, #0]
 8009f22:	f013 0207 	ands.w	r2, r3, #7
 8009f26:	4601      	mov	r1, r0
 8009f28:	d00b      	beq.n	8009f42 <__lo0bits+0x22>
 8009f2a:	07da      	lsls	r2, r3, #31
 8009f2c:	d423      	bmi.n	8009f76 <__lo0bits+0x56>
 8009f2e:	0798      	lsls	r0, r3, #30
 8009f30:	bf49      	itett	mi
 8009f32:	085b      	lsrmi	r3, r3, #1
 8009f34:	089b      	lsrpl	r3, r3, #2
 8009f36:	2001      	movmi	r0, #1
 8009f38:	600b      	strmi	r3, [r1, #0]
 8009f3a:	bf5c      	itt	pl
 8009f3c:	600b      	strpl	r3, [r1, #0]
 8009f3e:	2002      	movpl	r0, #2
 8009f40:	4770      	bx	lr
 8009f42:	b298      	uxth	r0, r3
 8009f44:	b9a8      	cbnz	r0, 8009f72 <__lo0bits+0x52>
 8009f46:	0c1b      	lsrs	r3, r3, #16
 8009f48:	2010      	movs	r0, #16
 8009f4a:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009f4e:	bf04      	itt	eq
 8009f50:	0a1b      	lsreq	r3, r3, #8
 8009f52:	3008      	addeq	r0, #8
 8009f54:	071a      	lsls	r2, r3, #28
 8009f56:	bf04      	itt	eq
 8009f58:	091b      	lsreq	r3, r3, #4
 8009f5a:	3004      	addeq	r0, #4
 8009f5c:	079a      	lsls	r2, r3, #30
 8009f5e:	bf04      	itt	eq
 8009f60:	089b      	lsreq	r3, r3, #2
 8009f62:	3002      	addeq	r0, #2
 8009f64:	07da      	lsls	r2, r3, #31
 8009f66:	d402      	bmi.n	8009f6e <__lo0bits+0x4e>
 8009f68:	085b      	lsrs	r3, r3, #1
 8009f6a:	d006      	beq.n	8009f7a <__lo0bits+0x5a>
 8009f6c:	3001      	adds	r0, #1
 8009f6e:	600b      	str	r3, [r1, #0]
 8009f70:	4770      	bx	lr
 8009f72:	4610      	mov	r0, r2
 8009f74:	e7e9      	b.n	8009f4a <__lo0bits+0x2a>
 8009f76:	2000      	movs	r0, #0
 8009f78:	4770      	bx	lr
 8009f7a:	2020      	movs	r0, #32
 8009f7c:	4770      	bx	lr

08009f7e <__i2b>:
 8009f7e:	b510      	push	{r4, lr}
 8009f80:	460c      	mov	r4, r1
 8009f82:	2101      	movs	r1, #1
 8009f84:	f7ff ff27 	bl	8009dd6 <_Balloc>
 8009f88:	2201      	movs	r2, #1
 8009f8a:	6144      	str	r4, [r0, #20]
 8009f8c:	6102      	str	r2, [r0, #16]
 8009f8e:	bd10      	pop	{r4, pc}

08009f90 <__multiply>:
 8009f90:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f94:	4614      	mov	r4, r2
 8009f96:	690a      	ldr	r2, [r1, #16]
 8009f98:	6923      	ldr	r3, [r4, #16]
 8009f9a:	429a      	cmp	r2, r3
 8009f9c:	bfb8      	it	lt
 8009f9e:	460b      	movlt	r3, r1
 8009fa0:	4688      	mov	r8, r1
 8009fa2:	bfbc      	itt	lt
 8009fa4:	46a0      	movlt	r8, r4
 8009fa6:	461c      	movlt	r4, r3
 8009fa8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009fac:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8009fb0:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009fb4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009fb8:	eb07 0609 	add.w	r6, r7, r9
 8009fbc:	42b3      	cmp	r3, r6
 8009fbe:	bfb8      	it	lt
 8009fc0:	3101      	addlt	r1, #1
 8009fc2:	f7ff ff08 	bl	8009dd6 <_Balloc>
 8009fc6:	f100 0514 	add.w	r5, r0, #20
 8009fca:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8009fce:	462b      	mov	r3, r5
 8009fd0:	2200      	movs	r2, #0
 8009fd2:	4573      	cmp	r3, lr
 8009fd4:	d316      	bcc.n	800a004 <__multiply+0x74>
 8009fd6:	f104 0214 	add.w	r2, r4, #20
 8009fda:	f108 0114 	add.w	r1, r8, #20
 8009fde:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8009fe2:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8009fe6:	9300      	str	r3, [sp, #0]
 8009fe8:	9b00      	ldr	r3, [sp, #0]
 8009fea:	9201      	str	r2, [sp, #4]
 8009fec:	4293      	cmp	r3, r2
 8009fee:	d80c      	bhi.n	800a00a <__multiply+0x7a>
 8009ff0:	2e00      	cmp	r6, #0
 8009ff2:	dd03      	ble.n	8009ffc <__multiply+0x6c>
 8009ff4:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d05d      	beq.n	800a0b8 <__multiply+0x128>
 8009ffc:	6106      	str	r6, [r0, #16]
 8009ffe:	b003      	add	sp, #12
 800a000:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a004:	f843 2b04 	str.w	r2, [r3], #4
 800a008:	e7e3      	b.n	8009fd2 <__multiply+0x42>
 800a00a:	f8b2 b000 	ldrh.w	fp, [r2]
 800a00e:	f1bb 0f00 	cmp.w	fp, #0
 800a012:	d023      	beq.n	800a05c <__multiply+0xcc>
 800a014:	4689      	mov	r9, r1
 800a016:	46ac      	mov	ip, r5
 800a018:	f04f 0800 	mov.w	r8, #0
 800a01c:	f859 4b04 	ldr.w	r4, [r9], #4
 800a020:	f8dc a000 	ldr.w	sl, [ip]
 800a024:	b2a3      	uxth	r3, r4
 800a026:	fa1f fa8a 	uxth.w	sl, sl
 800a02a:	fb0b a303 	mla	r3, fp, r3, sl
 800a02e:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800a032:	f8dc 4000 	ldr.w	r4, [ip]
 800a036:	4443      	add	r3, r8
 800a038:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800a03c:	fb0b 840a 	mla	r4, fp, sl, r8
 800a040:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800a044:	46e2      	mov	sl, ip
 800a046:	b29b      	uxth	r3, r3
 800a048:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800a04c:	454f      	cmp	r7, r9
 800a04e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800a052:	f84a 3b04 	str.w	r3, [sl], #4
 800a056:	d82b      	bhi.n	800a0b0 <__multiply+0x120>
 800a058:	f8cc 8004 	str.w	r8, [ip, #4]
 800a05c:	9b01      	ldr	r3, [sp, #4]
 800a05e:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800a062:	3204      	adds	r2, #4
 800a064:	f1ba 0f00 	cmp.w	sl, #0
 800a068:	d020      	beq.n	800a0ac <__multiply+0x11c>
 800a06a:	682b      	ldr	r3, [r5, #0]
 800a06c:	4689      	mov	r9, r1
 800a06e:	46a8      	mov	r8, r5
 800a070:	f04f 0b00 	mov.w	fp, #0
 800a074:	f8b9 c000 	ldrh.w	ip, [r9]
 800a078:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800a07c:	fb0a 440c 	mla	r4, sl, ip, r4
 800a080:	445c      	add	r4, fp
 800a082:	46c4      	mov	ip, r8
 800a084:	b29b      	uxth	r3, r3
 800a086:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800a08a:	f84c 3b04 	str.w	r3, [ip], #4
 800a08e:	f859 3b04 	ldr.w	r3, [r9], #4
 800a092:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800a096:	0c1b      	lsrs	r3, r3, #16
 800a098:	fb0a b303 	mla	r3, sl, r3, fp
 800a09c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800a0a0:	454f      	cmp	r7, r9
 800a0a2:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800a0a6:	d805      	bhi.n	800a0b4 <__multiply+0x124>
 800a0a8:	f8c8 3004 	str.w	r3, [r8, #4]
 800a0ac:	3504      	adds	r5, #4
 800a0ae:	e79b      	b.n	8009fe8 <__multiply+0x58>
 800a0b0:	46d4      	mov	ip, sl
 800a0b2:	e7b3      	b.n	800a01c <__multiply+0x8c>
 800a0b4:	46e0      	mov	r8, ip
 800a0b6:	e7dd      	b.n	800a074 <__multiply+0xe4>
 800a0b8:	3e01      	subs	r6, #1
 800a0ba:	e799      	b.n	8009ff0 <__multiply+0x60>

0800a0bc <__pow5mult>:
 800a0bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a0c0:	4615      	mov	r5, r2
 800a0c2:	f012 0203 	ands.w	r2, r2, #3
 800a0c6:	4606      	mov	r6, r0
 800a0c8:	460f      	mov	r7, r1
 800a0ca:	d007      	beq.n	800a0dc <__pow5mult+0x20>
 800a0cc:	3a01      	subs	r2, #1
 800a0ce:	4c21      	ldr	r4, [pc, #132]	; (800a154 <__pow5mult+0x98>)
 800a0d0:	2300      	movs	r3, #0
 800a0d2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a0d6:	f7ff fec9 	bl	8009e6c <__multadd>
 800a0da:	4607      	mov	r7, r0
 800a0dc:	10ad      	asrs	r5, r5, #2
 800a0de:	d035      	beq.n	800a14c <__pow5mult+0x90>
 800a0e0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a0e2:	b93c      	cbnz	r4, 800a0f4 <__pow5mult+0x38>
 800a0e4:	2010      	movs	r0, #16
 800a0e6:	f7ff fe63 	bl	8009db0 <malloc>
 800a0ea:	6270      	str	r0, [r6, #36]	; 0x24
 800a0ec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a0f0:	6004      	str	r4, [r0, #0]
 800a0f2:	60c4      	str	r4, [r0, #12]
 800a0f4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a0f8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a0fc:	b94c      	cbnz	r4, 800a112 <__pow5mult+0x56>
 800a0fe:	f240 2171 	movw	r1, #625	; 0x271
 800a102:	4630      	mov	r0, r6
 800a104:	f7ff ff3b 	bl	8009f7e <__i2b>
 800a108:	2300      	movs	r3, #0
 800a10a:	f8c8 0008 	str.w	r0, [r8, #8]
 800a10e:	4604      	mov	r4, r0
 800a110:	6003      	str	r3, [r0, #0]
 800a112:	f04f 0800 	mov.w	r8, #0
 800a116:	07eb      	lsls	r3, r5, #31
 800a118:	d50a      	bpl.n	800a130 <__pow5mult+0x74>
 800a11a:	4639      	mov	r1, r7
 800a11c:	4622      	mov	r2, r4
 800a11e:	4630      	mov	r0, r6
 800a120:	f7ff ff36 	bl	8009f90 <__multiply>
 800a124:	4639      	mov	r1, r7
 800a126:	4681      	mov	r9, r0
 800a128:	4630      	mov	r0, r6
 800a12a:	f7ff fe88 	bl	8009e3e <_Bfree>
 800a12e:	464f      	mov	r7, r9
 800a130:	106d      	asrs	r5, r5, #1
 800a132:	d00b      	beq.n	800a14c <__pow5mult+0x90>
 800a134:	6820      	ldr	r0, [r4, #0]
 800a136:	b938      	cbnz	r0, 800a148 <__pow5mult+0x8c>
 800a138:	4622      	mov	r2, r4
 800a13a:	4621      	mov	r1, r4
 800a13c:	4630      	mov	r0, r6
 800a13e:	f7ff ff27 	bl	8009f90 <__multiply>
 800a142:	6020      	str	r0, [r4, #0]
 800a144:	f8c0 8000 	str.w	r8, [r0]
 800a148:	4604      	mov	r4, r0
 800a14a:	e7e4      	b.n	800a116 <__pow5mult+0x5a>
 800a14c:	4638      	mov	r0, r7
 800a14e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a152:	bf00      	nop
 800a154:	0800b268 	.word	0x0800b268

0800a158 <__lshift>:
 800a158:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a15c:	460c      	mov	r4, r1
 800a15e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a162:	6923      	ldr	r3, [r4, #16]
 800a164:	6849      	ldr	r1, [r1, #4]
 800a166:	eb0a 0903 	add.w	r9, sl, r3
 800a16a:	68a3      	ldr	r3, [r4, #8]
 800a16c:	4607      	mov	r7, r0
 800a16e:	4616      	mov	r6, r2
 800a170:	f109 0501 	add.w	r5, r9, #1
 800a174:	42ab      	cmp	r3, r5
 800a176:	db32      	blt.n	800a1de <__lshift+0x86>
 800a178:	4638      	mov	r0, r7
 800a17a:	f7ff fe2c 	bl	8009dd6 <_Balloc>
 800a17e:	2300      	movs	r3, #0
 800a180:	4680      	mov	r8, r0
 800a182:	f100 0114 	add.w	r1, r0, #20
 800a186:	461a      	mov	r2, r3
 800a188:	4553      	cmp	r3, sl
 800a18a:	db2b      	blt.n	800a1e4 <__lshift+0x8c>
 800a18c:	6920      	ldr	r0, [r4, #16]
 800a18e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a192:	f104 0314 	add.w	r3, r4, #20
 800a196:	f016 021f 	ands.w	r2, r6, #31
 800a19a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a19e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a1a2:	d025      	beq.n	800a1f0 <__lshift+0x98>
 800a1a4:	f1c2 0e20 	rsb	lr, r2, #32
 800a1a8:	2000      	movs	r0, #0
 800a1aa:	681e      	ldr	r6, [r3, #0]
 800a1ac:	468a      	mov	sl, r1
 800a1ae:	4096      	lsls	r6, r2
 800a1b0:	4330      	orrs	r0, r6
 800a1b2:	f84a 0b04 	str.w	r0, [sl], #4
 800a1b6:	f853 0b04 	ldr.w	r0, [r3], #4
 800a1ba:	459c      	cmp	ip, r3
 800a1bc:	fa20 f00e 	lsr.w	r0, r0, lr
 800a1c0:	d814      	bhi.n	800a1ec <__lshift+0x94>
 800a1c2:	6048      	str	r0, [r1, #4]
 800a1c4:	b108      	cbz	r0, 800a1ca <__lshift+0x72>
 800a1c6:	f109 0502 	add.w	r5, r9, #2
 800a1ca:	3d01      	subs	r5, #1
 800a1cc:	4638      	mov	r0, r7
 800a1ce:	f8c8 5010 	str.w	r5, [r8, #16]
 800a1d2:	4621      	mov	r1, r4
 800a1d4:	f7ff fe33 	bl	8009e3e <_Bfree>
 800a1d8:	4640      	mov	r0, r8
 800a1da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1de:	3101      	adds	r1, #1
 800a1e0:	005b      	lsls	r3, r3, #1
 800a1e2:	e7c7      	b.n	800a174 <__lshift+0x1c>
 800a1e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800a1e8:	3301      	adds	r3, #1
 800a1ea:	e7cd      	b.n	800a188 <__lshift+0x30>
 800a1ec:	4651      	mov	r1, sl
 800a1ee:	e7dc      	b.n	800a1aa <__lshift+0x52>
 800a1f0:	3904      	subs	r1, #4
 800a1f2:	f853 2b04 	ldr.w	r2, [r3], #4
 800a1f6:	f841 2f04 	str.w	r2, [r1, #4]!
 800a1fa:	459c      	cmp	ip, r3
 800a1fc:	d8f9      	bhi.n	800a1f2 <__lshift+0x9a>
 800a1fe:	e7e4      	b.n	800a1ca <__lshift+0x72>

0800a200 <__mcmp>:
 800a200:	6903      	ldr	r3, [r0, #16]
 800a202:	690a      	ldr	r2, [r1, #16]
 800a204:	1a9b      	subs	r3, r3, r2
 800a206:	b530      	push	{r4, r5, lr}
 800a208:	d10c      	bne.n	800a224 <__mcmp+0x24>
 800a20a:	0092      	lsls	r2, r2, #2
 800a20c:	3014      	adds	r0, #20
 800a20e:	3114      	adds	r1, #20
 800a210:	1884      	adds	r4, r0, r2
 800a212:	4411      	add	r1, r2
 800a214:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a218:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a21c:	4295      	cmp	r5, r2
 800a21e:	d003      	beq.n	800a228 <__mcmp+0x28>
 800a220:	d305      	bcc.n	800a22e <__mcmp+0x2e>
 800a222:	2301      	movs	r3, #1
 800a224:	4618      	mov	r0, r3
 800a226:	bd30      	pop	{r4, r5, pc}
 800a228:	42a0      	cmp	r0, r4
 800a22a:	d3f3      	bcc.n	800a214 <__mcmp+0x14>
 800a22c:	e7fa      	b.n	800a224 <__mcmp+0x24>
 800a22e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a232:	e7f7      	b.n	800a224 <__mcmp+0x24>

0800a234 <__mdiff>:
 800a234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a238:	460d      	mov	r5, r1
 800a23a:	4607      	mov	r7, r0
 800a23c:	4611      	mov	r1, r2
 800a23e:	4628      	mov	r0, r5
 800a240:	4614      	mov	r4, r2
 800a242:	f7ff ffdd 	bl	800a200 <__mcmp>
 800a246:	1e06      	subs	r6, r0, #0
 800a248:	d108      	bne.n	800a25c <__mdiff+0x28>
 800a24a:	4631      	mov	r1, r6
 800a24c:	4638      	mov	r0, r7
 800a24e:	f7ff fdc2 	bl	8009dd6 <_Balloc>
 800a252:	2301      	movs	r3, #1
 800a254:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800a258:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a25c:	bfa4      	itt	ge
 800a25e:	4623      	movge	r3, r4
 800a260:	462c      	movge	r4, r5
 800a262:	4638      	mov	r0, r7
 800a264:	6861      	ldr	r1, [r4, #4]
 800a266:	bfa6      	itte	ge
 800a268:	461d      	movge	r5, r3
 800a26a:	2600      	movge	r6, #0
 800a26c:	2601      	movlt	r6, #1
 800a26e:	f7ff fdb2 	bl	8009dd6 <_Balloc>
 800a272:	692b      	ldr	r3, [r5, #16]
 800a274:	60c6      	str	r6, [r0, #12]
 800a276:	6926      	ldr	r6, [r4, #16]
 800a278:	f105 0914 	add.w	r9, r5, #20
 800a27c:	f104 0214 	add.w	r2, r4, #20
 800a280:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800a284:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800a288:	f100 0514 	add.w	r5, r0, #20
 800a28c:	f04f 0e00 	mov.w	lr, #0
 800a290:	f852 ab04 	ldr.w	sl, [r2], #4
 800a294:	f859 4b04 	ldr.w	r4, [r9], #4
 800a298:	fa1e f18a 	uxtah	r1, lr, sl
 800a29c:	b2a3      	uxth	r3, r4
 800a29e:	1ac9      	subs	r1, r1, r3
 800a2a0:	0c23      	lsrs	r3, r4, #16
 800a2a2:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800a2a6:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800a2aa:	b289      	uxth	r1, r1
 800a2ac:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800a2b0:	45c8      	cmp	r8, r9
 800a2b2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800a2b6:	4694      	mov	ip, r2
 800a2b8:	f845 3b04 	str.w	r3, [r5], #4
 800a2bc:	d8e8      	bhi.n	800a290 <__mdiff+0x5c>
 800a2be:	45bc      	cmp	ip, r7
 800a2c0:	d304      	bcc.n	800a2cc <__mdiff+0x98>
 800a2c2:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800a2c6:	b183      	cbz	r3, 800a2ea <__mdiff+0xb6>
 800a2c8:	6106      	str	r6, [r0, #16]
 800a2ca:	e7c5      	b.n	800a258 <__mdiff+0x24>
 800a2cc:	f85c 1b04 	ldr.w	r1, [ip], #4
 800a2d0:	fa1e f381 	uxtah	r3, lr, r1
 800a2d4:	141a      	asrs	r2, r3, #16
 800a2d6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a2da:	b29b      	uxth	r3, r3
 800a2dc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a2e0:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800a2e4:	f845 3b04 	str.w	r3, [r5], #4
 800a2e8:	e7e9      	b.n	800a2be <__mdiff+0x8a>
 800a2ea:	3e01      	subs	r6, #1
 800a2ec:	e7e9      	b.n	800a2c2 <__mdiff+0x8e>

0800a2ee <__d2b>:
 800a2ee:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a2f2:	460e      	mov	r6, r1
 800a2f4:	2101      	movs	r1, #1
 800a2f6:	ec59 8b10 	vmov	r8, r9, d0
 800a2fa:	4615      	mov	r5, r2
 800a2fc:	f7ff fd6b 	bl	8009dd6 <_Balloc>
 800a300:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800a304:	4607      	mov	r7, r0
 800a306:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a30a:	bb34      	cbnz	r4, 800a35a <__d2b+0x6c>
 800a30c:	9301      	str	r3, [sp, #4]
 800a30e:	f1b8 0300 	subs.w	r3, r8, #0
 800a312:	d027      	beq.n	800a364 <__d2b+0x76>
 800a314:	a802      	add	r0, sp, #8
 800a316:	f840 3d08 	str.w	r3, [r0, #-8]!
 800a31a:	f7ff fe01 	bl	8009f20 <__lo0bits>
 800a31e:	9900      	ldr	r1, [sp, #0]
 800a320:	b1f0      	cbz	r0, 800a360 <__d2b+0x72>
 800a322:	9a01      	ldr	r2, [sp, #4]
 800a324:	f1c0 0320 	rsb	r3, r0, #32
 800a328:	fa02 f303 	lsl.w	r3, r2, r3
 800a32c:	430b      	orrs	r3, r1
 800a32e:	40c2      	lsrs	r2, r0
 800a330:	617b      	str	r3, [r7, #20]
 800a332:	9201      	str	r2, [sp, #4]
 800a334:	9b01      	ldr	r3, [sp, #4]
 800a336:	61bb      	str	r3, [r7, #24]
 800a338:	2b00      	cmp	r3, #0
 800a33a:	bf14      	ite	ne
 800a33c:	2102      	movne	r1, #2
 800a33e:	2101      	moveq	r1, #1
 800a340:	6139      	str	r1, [r7, #16]
 800a342:	b1c4      	cbz	r4, 800a376 <__d2b+0x88>
 800a344:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800a348:	4404      	add	r4, r0
 800a34a:	6034      	str	r4, [r6, #0]
 800a34c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a350:	6028      	str	r0, [r5, #0]
 800a352:	4638      	mov	r0, r7
 800a354:	b003      	add	sp, #12
 800a356:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a35a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a35e:	e7d5      	b.n	800a30c <__d2b+0x1e>
 800a360:	6179      	str	r1, [r7, #20]
 800a362:	e7e7      	b.n	800a334 <__d2b+0x46>
 800a364:	a801      	add	r0, sp, #4
 800a366:	f7ff fddb 	bl	8009f20 <__lo0bits>
 800a36a:	9b01      	ldr	r3, [sp, #4]
 800a36c:	617b      	str	r3, [r7, #20]
 800a36e:	2101      	movs	r1, #1
 800a370:	6139      	str	r1, [r7, #16]
 800a372:	3020      	adds	r0, #32
 800a374:	e7e5      	b.n	800a342 <__d2b+0x54>
 800a376:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800a37a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a37e:	6030      	str	r0, [r6, #0]
 800a380:	6918      	ldr	r0, [r3, #16]
 800a382:	f7ff fdae 	bl	8009ee2 <__hi0bits>
 800a386:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800a38a:	e7e1      	b.n	800a350 <__d2b+0x62>

0800a38c <_calloc_r>:
 800a38c:	b538      	push	{r3, r4, r5, lr}
 800a38e:	fb02 f401 	mul.w	r4, r2, r1
 800a392:	4621      	mov	r1, r4
 800a394:	f000 f856 	bl	800a444 <_malloc_r>
 800a398:	4605      	mov	r5, r0
 800a39a:	b118      	cbz	r0, 800a3a4 <_calloc_r+0x18>
 800a39c:	4622      	mov	r2, r4
 800a39e:	2100      	movs	r1, #0
 800a3a0:	f7fd ff34 	bl	800820c <memset>
 800a3a4:	4628      	mov	r0, r5
 800a3a6:	bd38      	pop	{r3, r4, r5, pc}

0800a3a8 <_free_r>:
 800a3a8:	b538      	push	{r3, r4, r5, lr}
 800a3aa:	4605      	mov	r5, r0
 800a3ac:	2900      	cmp	r1, #0
 800a3ae:	d045      	beq.n	800a43c <_free_r+0x94>
 800a3b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a3b4:	1f0c      	subs	r4, r1, #4
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	bfb8      	it	lt
 800a3ba:	18e4      	addlt	r4, r4, r3
 800a3bc:	f000 fa98 	bl	800a8f0 <__malloc_lock>
 800a3c0:	4a1f      	ldr	r2, [pc, #124]	; (800a440 <_free_r+0x98>)
 800a3c2:	6813      	ldr	r3, [r2, #0]
 800a3c4:	4610      	mov	r0, r2
 800a3c6:	b933      	cbnz	r3, 800a3d6 <_free_r+0x2e>
 800a3c8:	6063      	str	r3, [r4, #4]
 800a3ca:	6014      	str	r4, [r2, #0]
 800a3cc:	4628      	mov	r0, r5
 800a3ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a3d2:	f000 ba8e 	b.w	800a8f2 <__malloc_unlock>
 800a3d6:	42a3      	cmp	r3, r4
 800a3d8:	d90c      	bls.n	800a3f4 <_free_r+0x4c>
 800a3da:	6821      	ldr	r1, [r4, #0]
 800a3dc:	1862      	adds	r2, r4, r1
 800a3de:	4293      	cmp	r3, r2
 800a3e0:	bf04      	itt	eq
 800a3e2:	681a      	ldreq	r2, [r3, #0]
 800a3e4:	685b      	ldreq	r3, [r3, #4]
 800a3e6:	6063      	str	r3, [r4, #4]
 800a3e8:	bf04      	itt	eq
 800a3ea:	1852      	addeq	r2, r2, r1
 800a3ec:	6022      	streq	r2, [r4, #0]
 800a3ee:	6004      	str	r4, [r0, #0]
 800a3f0:	e7ec      	b.n	800a3cc <_free_r+0x24>
 800a3f2:	4613      	mov	r3, r2
 800a3f4:	685a      	ldr	r2, [r3, #4]
 800a3f6:	b10a      	cbz	r2, 800a3fc <_free_r+0x54>
 800a3f8:	42a2      	cmp	r2, r4
 800a3fa:	d9fa      	bls.n	800a3f2 <_free_r+0x4a>
 800a3fc:	6819      	ldr	r1, [r3, #0]
 800a3fe:	1858      	adds	r0, r3, r1
 800a400:	42a0      	cmp	r0, r4
 800a402:	d10b      	bne.n	800a41c <_free_r+0x74>
 800a404:	6820      	ldr	r0, [r4, #0]
 800a406:	4401      	add	r1, r0
 800a408:	1858      	adds	r0, r3, r1
 800a40a:	4282      	cmp	r2, r0
 800a40c:	6019      	str	r1, [r3, #0]
 800a40e:	d1dd      	bne.n	800a3cc <_free_r+0x24>
 800a410:	6810      	ldr	r0, [r2, #0]
 800a412:	6852      	ldr	r2, [r2, #4]
 800a414:	605a      	str	r2, [r3, #4]
 800a416:	4401      	add	r1, r0
 800a418:	6019      	str	r1, [r3, #0]
 800a41a:	e7d7      	b.n	800a3cc <_free_r+0x24>
 800a41c:	d902      	bls.n	800a424 <_free_r+0x7c>
 800a41e:	230c      	movs	r3, #12
 800a420:	602b      	str	r3, [r5, #0]
 800a422:	e7d3      	b.n	800a3cc <_free_r+0x24>
 800a424:	6820      	ldr	r0, [r4, #0]
 800a426:	1821      	adds	r1, r4, r0
 800a428:	428a      	cmp	r2, r1
 800a42a:	bf04      	itt	eq
 800a42c:	6811      	ldreq	r1, [r2, #0]
 800a42e:	6852      	ldreq	r2, [r2, #4]
 800a430:	6062      	str	r2, [r4, #4]
 800a432:	bf04      	itt	eq
 800a434:	1809      	addeq	r1, r1, r0
 800a436:	6021      	streq	r1, [r4, #0]
 800a438:	605c      	str	r4, [r3, #4]
 800a43a:	e7c7      	b.n	800a3cc <_free_r+0x24>
 800a43c:	bd38      	pop	{r3, r4, r5, pc}
 800a43e:	bf00      	nop
 800a440:	20000438 	.word	0x20000438

0800a444 <_malloc_r>:
 800a444:	b570      	push	{r4, r5, r6, lr}
 800a446:	1ccd      	adds	r5, r1, #3
 800a448:	f025 0503 	bic.w	r5, r5, #3
 800a44c:	3508      	adds	r5, #8
 800a44e:	2d0c      	cmp	r5, #12
 800a450:	bf38      	it	cc
 800a452:	250c      	movcc	r5, #12
 800a454:	2d00      	cmp	r5, #0
 800a456:	4606      	mov	r6, r0
 800a458:	db01      	blt.n	800a45e <_malloc_r+0x1a>
 800a45a:	42a9      	cmp	r1, r5
 800a45c:	d903      	bls.n	800a466 <_malloc_r+0x22>
 800a45e:	230c      	movs	r3, #12
 800a460:	6033      	str	r3, [r6, #0]
 800a462:	2000      	movs	r0, #0
 800a464:	bd70      	pop	{r4, r5, r6, pc}
 800a466:	f000 fa43 	bl	800a8f0 <__malloc_lock>
 800a46a:	4a21      	ldr	r2, [pc, #132]	; (800a4f0 <_malloc_r+0xac>)
 800a46c:	6814      	ldr	r4, [r2, #0]
 800a46e:	4621      	mov	r1, r4
 800a470:	b991      	cbnz	r1, 800a498 <_malloc_r+0x54>
 800a472:	4c20      	ldr	r4, [pc, #128]	; (800a4f4 <_malloc_r+0xb0>)
 800a474:	6823      	ldr	r3, [r4, #0]
 800a476:	b91b      	cbnz	r3, 800a480 <_malloc_r+0x3c>
 800a478:	4630      	mov	r0, r6
 800a47a:	f000 f97d 	bl	800a778 <_sbrk_r>
 800a47e:	6020      	str	r0, [r4, #0]
 800a480:	4629      	mov	r1, r5
 800a482:	4630      	mov	r0, r6
 800a484:	f000 f978 	bl	800a778 <_sbrk_r>
 800a488:	1c43      	adds	r3, r0, #1
 800a48a:	d124      	bne.n	800a4d6 <_malloc_r+0x92>
 800a48c:	230c      	movs	r3, #12
 800a48e:	6033      	str	r3, [r6, #0]
 800a490:	4630      	mov	r0, r6
 800a492:	f000 fa2e 	bl	800a8f2 <__malloc_unlock>
 800a496:	e7e4      	b.n	800a462 <_malloc_r+0x1e>
 800a498:	680b      	ldr	r3, [r1, #0]
 800a49a:	1b5b      	subs	r3, r3, r5
 800a49c:	d418      	bmi.n	800a4d0 <_malloc_r+0x8c>
 800a49e:	2b0b      	cmp	r3, #11
 800a4a0:	d90f      	bls.n	800a4c2 <_malloc_r+0x7e>
 800a4a2:	600b      	str	r3, [r1, #0]
 800a4a4:	50cd      	str	r5, [r1, r3]
 800a4a6:	18cc      	adds	r4, r1, r3
 800a4a8:	4630      	mov	r0, r6
 800a4aa:	f000 fa22 	bl	800a8f2 <__malloc_unlock>
 800a4ae:	f104 000b 	add.w	r0, r4, #11
 800a4b2:	1d23      	adds	r3, r4, #4
 800a4b4:	f020 0007 	bic.w	r0, r0, #7
 800a4b8:	1ac3      	subs	r3, r0, r3
 800a4ba:	d0d3      	beq.n	800a464 <_malloc_r+0x20>
 800a4bc:	425a      	negs	r2, r3
 800a4be:	50e2      	str	r2, [r4, r3]
 800a4c0:	e7d0      	b.n	800a464 <_malloc_r+0x20>
 800a4c2:	428c      	cmp	r4, r1
 800a4c4:	684b      	ldr	r3, [r1, #4]
 800a4c6:	bf16      	itet	ne
 800a4c8:	6063      	strne	r3, [r4, #4]
 800a4ca:	6013      	streq	r3, [r2, #0]
 800a4cc:	460c      	movne	r4, r1
 800a4ce:	e7eb      	b.n	800a4a8 <_malloc_r+0x64>
 800a4d0:	460c      	mov	r4, r1
 800a4d2:	6849      	ldr	r1, [r1, #4]
 800a4d4:	e7cc      	b.n	800a470 <_malloc_r+0x2c>
 800a4d6:	1cc4      	adds	r4, r0, #3
 800a4d8:	f024 0403 	bic.w	r4, r4, #3
 800a4dc:	42a0      	cmp	r0, r4
 800a4de:	d005      	beq.n	800a4ec <_malloc_r+0xa8>
 800a4e0:	1a21      	subs	r1, r4, r0
 800a4e2:	4630      	mov	r0, r6
 800a4e4:	f000 f948 	bl	800a778 <_sbrk_r>
 800a4e8:	3001      	adds	r0, #1
 800a4ea:	d0cf      	beq.n	800a48c <_malloc_r+0x48>
 800a4ec:	6025      	str	r5, [r4, #0]
 800a4ee:	e7db      	b.n	800a4a8 <_malloc_r+0x64>
 800a4f0:	20000438 	.word	0x20000438
 800a4f4:	2000043c 	.word	0x2000043c

0800a4f8 <__sfputc_r>:
 800a4f8:	6893      	ldr	r3, [r2, #8]
 800a4fa:	3b01      	subs	r3, #1
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	b410      	push	{r4}
 800a500:	6093      	str	r3, [r2, #8]
 800a502:	da08      	bge.n	800a516 <__sfputc_r+0x1e>
 800a504:	6994      	ldr	r4, [r2, #24]
 800a506:	42a3      	cmp	r3, r4
 800a508:	db01      	blt.n	800a50e <__sfputc_r+0x16>
 800a50a:	290a      	cmp	r1, #10
 800a50c:	d103      	bne.n	800a516 <__sfputc_r+0x1e>
 800a50e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a512:	f7fe bb5b 	b.w	8008bcc <__swbuf_r>
 800a516:	6813      	ldr	r3, [r2, #0]
 800a518:	1c58      	adds	r0, r3, #1
 800a51a:	6010      	str	r0, [r2, #0]
 800a51c:	7019      	strb	r1, [r3, #0]
 800a51e:	4608      	mov	r0, r1
 800a520:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a524:	4770      	bx	lr

0800a526 <__sfputs_r>:
 800a526:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a528:	4606      	mov	r6, r0
 800a52a:	460f      	mov	r7, r1
 800a52c:	4614      	mov	r4, r2
 800a52e:	18d5      	adds	r5, r2, r3
 800a530:	42ac      	cmp	r4, r5
 800a532:	d101      	bne.n	800a538 <__sfputs_r+0x12>
 800a534:	2000      	movs	r0, #0
 800a536:	e007      	b.n	800a548 <__sfputs_r+0x22>
 800a538:	463a      	mov	r2, r7
 800a53a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a53e:	4630      	mov	r0, r6
 800a540:	f7ff ffda 	bl	800a4f8 <__sfputc_r>
 800a544:	1c43      	adds	r3, r0, #1
 800a546:	d1f3      	bne.n	800a530 <__sfputs_r+0xa>
 800a548:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a54c <_vfiprintf_r>:
 800a54c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a550:	460c      	mov	r4, r1
 800a552:	b09d      	sub	sp, #116	; 0x74
 800a554:	4617      	mov	r7, r2
 800a556:	461d      	mov	r5, r3
 800a558:	4606      	mov	r6, r0
 800a55a:	b118      	cbz	r0, 800a564 <_vfiprintf_r+0x18>
 800a55c:	6983      	ldr	r3, [r0, #24]
 800a55e:	b90b      	cbnz	r3, 800a564 <_vfiprintf_r+0x18>
 800a560:	f7ff fb2a 	bl	8009bb8 <__sinit>
 800a564:	4b7c      	ldr	r3, [pc, #496]	; (800a758 <_vfiprintf_r+0x20c>)
 800a566:	429c      	cmp	r4, r3
 800a568:	d158      	bne.n	800a61c <_vfiprintf_r+0xd0>
 800a56a:	6874      	ldr	r4, [r6, #4]
 800a56c:	89a3      	ldrh	r3, [r4, #12]
 800a56e:	0718      	lsls	r0, r3, #28
 800a570:	d55e      	bpl.n	800a630 <_vfiprintf_r+0xe4>
 800a572:	6923      	ldr	r3, [r4, #16]
 800a574:	2b00      	cmp	r3, #0
 800a576:	d05b      	beq.n	800a630 <_vfiprintf_r+0xe4>
 800a578:	2300      	movs	r3, #0
 800a57a:	9309      	str	r3, [sp, #36]	; 0x24
 800a57c:	2320      	movs	r3, #32
 800a57e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a582:	2330      	movs	r3, #48	; 0x30
 800a584:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a588:	9503      	str	r5, [sp, #12]
 800a58a:	f04f 0b01 	mov.w	fp, #1
 800a58e:	46b8      	mov	r8, r7
 800a590:	4645      	mov	r5, r8
 800a592:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a596:	b10b      	cbz	r3, 800a59c <_vfiprintf_r+0x50>
 800a598:	2b25      	cmp	r3, #37	; 0x25
 800a59a:	d154      	bne.n	800a646 <_vfiprintf_r+0xfa>
 800a59c:	ebb8 0a07 	subs.w	sl, r8, r7
 800a5a0:	d00b      	beq.n	800a5ba <_vfiprintf_r+0x6e>
 800a5a2:	4653      	mov	r3, sl
 800a5a4:	463a      	mov	r2, r7
 800a5a6:	4621      	mov	r1, r4
 800a5a8:	4630      	mov	r0, r6
 800a5aa:	f7ff ffbc 	bl	800a526 <__sfputs_r>
 800a5ae:	3001      	adds	r0, #1
 800a5b0:	f000 80c2 	beq.w	800a738 <_vfiprintf_r+0x1ec>
 800a5b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a5b6:	4453      	add	r3, sl
 800a5b8:	9309      	str	r3, [sp, #36]	; 0x24
 800a5ba:	f898 3000 	ldrb.w	r3, [r8]
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	f000 80ba 	beq.w	800a738 <_vfiprintf_r+0x1ec>
 800a5c4:	2300      	movs	r3, #0
 800a5c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a5ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a5ce:	9304      	str	r3, [sp, #16]
 800a5d0:	9307      	str	r3, [sp, #28]
 800a5d2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a5d6:	931a      	str	r3, [sp, #104]	; 0x68
 800a5d8:	46a8      	mov	r8, r5
 800a5da:	2205      	movs	r2, #5
 800a5dc:	f818 1b01 	ldrb.w	r1, [r8], #1
 800a5e0:	485e      	ldr	r0, [pc, #376]	; (800a75c <_vfiprintf_r+0x210>)
 800a5e2:	f7f5 fe0d 	bl	8000200 <memchr>
 800a5e6:	9b04      	ldr	r3, [sp, #16]
 800a5e8:	bb78      	cbnz	r0, 800a64a <_vfiprintf_r+0xfe>
 800a5ea:	06d9      	lsls	r1, r3, #27
 800a5ec:	bf44      	itt	mi
 800a5ee:	2220      	movmi	r2, #32
 800a5f0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a5f4:	071a      	lsls	r2, r3, #28
 800a5f6:	bf44      	itt	mi
 800a5f8:	222b      	movmi	r2, #43	; 0x2b
 800a5fa:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a5fe:	782a      	ldrb	r2, [r5, #0]
 800a600:	2a2a      	cmp	r2, #42	; 0x2a
 800a602:	d02a      	beq.n	800a65a <_vfiprintf_r+0x10e>
 800a604:	9a07      	ldr	r2, [sp, #28]
 800a606:	46a8      	mov	r8, r5
 800a608:	2000      	movs	r0, #0
 800a60a:	250a      	movs	r5, #10
 800a60c:	4641      	mov	r1, r8
 800a60e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a612:	3b30      	subs	r3, #48	; 0x30
 800a614:	2b09      	cmp	r3, #9
 800a616:	d969      	bls.n	800a6ec <_vfiprintf_r+0x1a0>
 800a618:	b360      	cbz	r0, 800a674 <_vfiprintf_r+0x128>
 800a61a:	e024      	b.n	800a666 <_vfiprintf_r+0x11a>
 800a61c:	4b50      	ldr	r3, [pc, #320]	; (800a760 <_vfiprintf_r+0x214>)
 800a61e:	429c      	cmp	r4, r3
 800a620:	d101      	bne.n	800a626 <_vfiprintf_r+0xda>
 800a622:	68b4      	ldr	r4, [r6, #8]
 800a624:	e7a2      	b.n	800a56c <_vfiprintf_r+0x20>
 800a626:	4b4f      	ldr	r3, [pc, #316]	; (800a764 <_vfiprintf_r+0x218>)
 800a628:	429c      	cmp	r4, r3
 800a62a:	bf08      	it	eq
 800a62c:	68f4      	ldreq	r4, [r6, #12]
 800a62e:	e79d      	b.n	800a56c <_vfiprintf_r+0x20>
 800a630:	4621      	mov	r1, r4
 800a632:	4630      	mov	r0, r6
 800a634:	f7fe fb1c 	bl	8008c70 <__swsetup_r>
 800a638:	2800      	cmp	r0, #0
 800a63a:	d09d      	beq.n	800a578 <_vfiprintf_r+0x2c>
 800a63c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a640:	b01d      	add	sp, #116	; 0x74
 800a642:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a646:	46a8      	mov	r8, r5
 800a648:	e7a2      	b.n	800a590 <_vfiprintf_r+0x44>
 800a64a:	4a44      	ldr	r2, [pc, #272]	; (800a75c <_vfiprintf_r+0x210>)
 800a64c:	1a80      	subs	r0, r0, r2
 800a64e:	fa0b f000 	lsl.w	r0, fp, r0
 800a652:	4318      	orrs	r0, r3
 800a654:	9004      	str	r0, [sp, #16]
 800a656:	4645      	mov	r5, r8
 800a658:	e7be      	b.n	800a5d8 <_vfiprintf_r+0x8c>
 800a65a:	9a03      	ldr	r2, [sp, #12]
 800a65c:	1d11      	adds	r1, r2, #4
 800a65e:	6812      	ldr	r2, [r2, #0]
 800a660:	9103      	str	r1, [sp, #12]
 800a662:	2a00      	cmp	r2, #0
 800a664:	db01      	blt.n	800a66a <_vfiprintf_r+0x11e>
 800a666:	9207      	str	r2, [sp, #28]
 800a668:	e004      	b.n	800a674 <_vfiprintf_r+0x128>
 800a66a:	4252      	negs	r2, r2
 800a66c:	f043 0302 	orr.w	r3, r3, #2
 800a670:	9207      	str	r2, [sp, #28]
 800a672:	9304      	str	r3, [sp, #16]
 800a674:	f898 3000 	ldrb.w	r3, [r8]
 800a678:	2b2e      	cmp	r3, #46	; 0x2e
 800a67a:	d10e      	bne.n	800a69a <_vfiprintf_r+0x14e>
 800a67c:	f898 3001 	ldrb.w	r3, [r8, #1]
 800a680:	2b2a      	cmp	r3, #42	; 0x2a
 800a682:	d138      	bne.n	800a6f6 <_vfiprintf_r+0x1aa>
 800a684:	9b03      	ldr	r3, [sp, #12]
 800a686:	1d1a      	adds	r2, r3, #4
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	9203      	str	r2, [sp, #12]
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	bfb8      	it	lt
 800a690:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a694:	f108 0802 	add.w	r8, r8, #2
 800a698:	9305      	str	r3, [sp, #20]
 800a69a:	4d33      	ldr	r5, [pc, #204]	; (800a768 <_vfiprintf_r+0x21c>)
 800a69c:	f898 1000 	ldrb.w	r1, [r8]
 800a6a0:	2203      	movs	r2, #3
 800a6a2:	4628      	mov	r0, r5
 800a6a4:	f7f5 fdac 	bl	8000200 <memchr>
 800a6a8:	b140      	cbz	r0, 800a6bc <_vfiprintf_r+0x170>
 800a6aa:	2340      	movs	r3, #64	; 0x40
 800a6ac:	1b40      	subs	r0, r0, r5
 800a6ae:	fa03 f000 	lsl.w	r0, r3, r0
 800a6b2:	9b04      	ldr	r3, [sp, #16]
 800a6b4:	4303      	orrs	r3, r0
 800a6b6:	f108 0801 	add.w	r8, r8, #1
 800a6ba:	9304      	str	r3, [sp, #16]
 800a6bc:	f898 1000 	ldrb.w	r1, [r8]
 800a6c0:	482a      	ldr	r0, [pc, #168]	; (800a76c <_vfiprintf_r+0x220>)
 800a6c2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a6c6:	2206      	movs	r2, #6
 800a6c8:	f108 0701 	add.w	r7, r8, #1
 800a6cc:	f7f5 fd98 	bl	8000200 <memchr>
 800a6d0:	2800      	cmp	r0, #0
 800a6d2:	d037      	beq.n	800a744 <_vfiprintf_r+0x1f8>
 800a6d4:	4b26      	ldr	r3, [pc, #152]	; (800a770 <_vfiprintf_r+0x224>)
 800a6d6:	bb1b      	cbnz	r3, 800a720 <_vfiprintf_r+0x1d4>
 800a6d8:	9b03      	ldr	r3, [sp, #12]
 800a6da:	3307      	adds	r3, #7
 800a6dc:	f023 0307 	bic.w	r3, r3, #7
 800a6e0:	3308      	adds	r3, #8
 800a6e2:	9303      	str	r3, [sp, #12]
 800a6e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a6e6:	444b      	add	r3, r9
 800a6e8:	9309      	str	r3, [sp, #36]	; 0x24
 800a6ea:	e750      	b.n	800a58e <_vfiprintf_r+0x42>
 800a6ec:	fb05 3202 	mla	r2, r5, r2, r3
 800a6f0:	2001      	movs	r0, #1
 800a6f2:	4688      	mov	r8, r1
 800a6f4:	e78a      	b.n	800a60c <_vfiprintf_r+0xc0>
 800a6f6:	2300      	movs	r3, #0
 800a6f8:	f108 0801 	add.w	r8, r8, #1
 800a6fc:	9305      	str	r3, [sp, #20]
 800a6fe:	4619      	mov	r1, r3
 800a700:	250a      	movs	r5, #10
 800a702:	4640      	mov	r0, r8
 800a704:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a708:	3a30      	subs	r2, #48	; 0x30
 800a70a:	2a09      	cmp	r2, #9
 800a70c:	d903      	bls.n	800a716 <_vfiprintf_r+0x1ca>
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d0c3      	beq.n	800a69a <_vfiprintf_r+0x14e>
 800a712:	9105      	str	r1, [sp, #20]
 800a714:	e7c1      	b.n	800a69a <_vfiprintf_r+0x14e>
 800a716:	fb05 2101 	mla	r1, r5, r1, r2
 800a71a:	2301      	movs	r3, #1
 800a71c:	4680      	mov	r8, r0
 800a71e:	e7f0      	b.n	800a702 <_vfiprintf_r+0x1b6>
 800a720:	ab03      	add	r3, sp, #12
 800a722:	9300      	str	r3, [sp, #0]
 800a724:	4622      	mov	r2, r4
 800a726:	4b13      	ldr	r3, [pc, #76]	; (800a774 <_vfiprintf_r+0x228>)
 800a728:	a904      	add	r1, sp, #16
 800a72a:	4630      	mov	r0, r6
 800a72c:	f7fd fe0a 	bl	8008344 <_printf_float>
 800a730:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800a734:	4681      	mov	r9, r0
 800a736:	d1d5      	bne.n	800a6e4 <_vfiprintf_r+0x198>
 800a738:	89a3      	ldrh	r3, [r4, #12]
 800a73a:	065b      	lsls	r3, r3, #25
 800a73c:	f53f af7e 	bmi.w	800a63c <_vfiprintf_r+0xf0>
 800a740:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a742:	e77d      	b.n	800a640 <_vfiprintf_r+0xf4>
 800a744:	ab03      	add	r3, sp, #12
 800a746:	9300      	str	r3, [sp, #0]
 800a748:	4622      	mov	r2, r4
 800a74a:	4b0a      	ldr	r3, [pc, #40]	; (800a774 <_vfiprintf_r+0x228>)
 800a74c:	a904      	add	r1, sp, #16
 800a74e:	4630      	mov	r0, r6
 800a750:	f7fe f8ae 	bl	80088b0 <_printf_i>
 800a754:	e7ec      	b.n	800a730 <_vfiprintf_r+0x1e4>
 800a756:	bf00      	nop
 800a758:	0800b134 	.word	0x0800b134
 800a75c:	0800b274 	.word	0x0800b274
 800a760:	0800b154 	.word	0x0800b154
 800a764:	0800b114 	.word	0x0800b114
 800a768:	0800b27a 	.word	0x0800b27a
 800a76c:	0800b27e 	.word	0x0800b27e
 800a770:	08008345 	.word	0x08008345
 800a774:	0800a527 	.word	0x0800a527

0800a778 <_sbrk_r>:
 800a778:	b538      	push	{r3, r4, r5, lr}
 800a77a:	4c06      	ldr	r4, [pc, #24]	; (800a794 <_sbrk_r+0x1c>)
 800a77c:	2300      	movs	r3, #0
 800a77e:	4605      	mov	r5, r0
 800a780:	4608      	mov	r0, r1
 800a782:	6023      	str	r3, [r4, #0]
 800a784:	f7f7 fa2e 	bl	8001be4 <_sbrk>
 800a788:	1c43      	adds	r3, r0, #1
 800a78a:	d102      	bne.n	800a792 <_sbrk_r+0x1a>
 800a78c:	6823      	ldr	r3, [r4, #0]
 800a78e:	b103      	cbz	r3, 800a792 <_sbrk_r+0x1a>
 800a790:	602b      	str	r3, [r5, #0]
 800a792:	bd38      	pop	{r3, r4, r5, pc}
 800a794:	20000a64 	.word	0x20000a64

0800a798 <__sread>:
 800a798:	b510      	push	{r4, lr}
 800a79a:	460c      	mov	r4, r1
 800a79c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a7a0:	f000 f8a8 	bl	800a8f4 <_read_r>
 800a7a4:	2800      	cmp	r0, #0
 800a7a6:	bfab      	itete	ge
 800a7a8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a7aa:	89a3      	ldrhlt	r3, [r4, #12]
 800a7ac:	181b      	addge	r3, r3, r0
 800a7ae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a7b2:	bfac      	ite	ge
 800a7b4:	6563      	strge	r3, [r4, #84]	; 0x54
 800a7b6:	81a3      	strhlt	r3, [r4, #12]
 800a7b8:	bd10      	pop	{r4, pc}

0800a7ba <__swrite>:
 800a7ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a7be:	461f      	mov	r7, r3
 800a7c0:	898b      	ldrh	r3, [r1, #12]
 800a7c2:	05db      	lsls	r3, r3, #23
 800a7c4:	4605      	mov	r5, r0
 800a7c6:	460c      	mov	r4, r1
 800a7c8:	4616      	mov	r6, r2
 800a7ca:	d505      	bpl.n	800a7d8 <__swrite+0x1e>
 800a7cc:	2302      	movs	r3, #2
 800a7ce:	2200      	movs	r2, #0
 800a7d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a7d4:	f000 f868 	bl	800a8a8 <_lseek_r>
 800a7d8:	89a3      	ldrh	r3, [r4, #12]
 800a7da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a7de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a7e2:	81a3      	strh	r3, [r4, #12]
 800a7e4:	4632      	mov	r2, r6
 800a7e6:	463b      	mov	r3, r7
 800a7e8:	4628      	mov	r0, r5
 800a7ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a7ee:	f000 b817 	b.w	800a820 <_write_r>

0800a7f2 <__sseek>:
 800a7f2:	b510      	push	{r4, lr}
 800a7f4:	460c      	mov	r4, r1
 800a7f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a7fa:	f000 f855 	bl	800a8a8 <_lseek_r>
 800a7fe:	1c43      	adds	r3, r0, #1
 800a800:	89a3      	ldrh	r3, [r4, #12]
 800a802:	bf15      	itete	ne
 800a804:	6560      	strne	r0, [r4, #84]	; 0x54
 800a806:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a80a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a80e:	81a3      	strheq	r3, [r4, #12]
 800a810:	bf18      	it	ne
 800a812:	81a3      	strhne	r3, [r4, #12]
 800a814:	bd10      	pop	{r4, pc}

0800a816 <__sclose>:
 800a816:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a81a:	f000 b813 	b.w	800a844 <_close_r>
	...

0800a820 <_write_r>:
 800a820:	b538      	push	{r3, r4, r5, lr}
 800a822:	4c07      	ldr	r4, [pc, #28]	; (800a840 <_write_r+0x20>)
 800a824:	4605      	mov	r5, r0
 800a826:	4608      	mov	r0, r1
 800a828:	4611      	mov	r1, r2
 800a82a:	2200      	movs	r2, #0
 800a82c:	6022      	str	r2, [r4, #0]
 800a82e:	461a      	mov	r2, r3
 800a830:	f7f7 f9bc 	bl	8001bac <_write>
 800a834:	1c43      	adds	r3, r0, #1
 800a836:	d102      	bne.n	800a83e <_write_r+0x1e>
 800a838:	6823      	ldr	r3, [r4, #0]
 800a83a:	b103      	cbz	r3, 800a83e <_write_r+0x1e>
 800a83c:	602b      	str	r3, [r5, #0]
 800a83e:	bd38      	pop	{r3, r4, r5, pc}
 800a840:	20000a64 	.word	0x20000a64

0800a844 <_close_r>:
 800a844:	b538      	push	{r3, r4, r5, lr}
 800a846:	4c06      	ldr	r4, [pc, #24]	; (800a860 <_close_r+0x1c>)
 800a848:	2300      	movs	r3, #0
 800a84a:	4605      	mov	r5, r0
 800a84c:	4608      	mov	r0, r1
 800a84e:	6023      	str	r3, [r4, #0]
 800a850:	f7f7 f9ba 	bl	8001bc8 <_close>
 800a854:	1c43      	adds	r3, r0, #1
 800a856:	d102      	bne.n	800a85e <_close_r+0x1a>
 800a858:	6823      	ldr	r3, [r4, #0]
 800a85a:	b103      	cbz	r3, 800a85e <_close_r+0x1a>
 800a85c:	602b      	str	r3, [r5, #0]
 800a85e:	bd38      	pop	{r3, r4, r5, pc}
 800a860:	20000a64 	.word	0x20000a64

0800a864 <_fstat_r>:
 800a864:	b538      	push	{r3, r4, r5, lr}
 800a866:	4c07      	ldr	r4, [pc, #28]	; (800a884 <_fstat_r+0x20>)
 800a868:	2300      	movs	r3, #0
 800a86a:	4605      	mov	r5, r0
 800a86c:	4608      	mov	r0, r1
 800a86e:	4611      	mov	r1, r2
 800a870:	6023      	str	r3, [r4, #0]
 800a872:	f7f7 f9ad 	bl	8001bd0 <_fstat>
 800a876:	1c43      	adds	r3, r0, #1
 800a878:	d102      	bne.n	800a880 <_fstat_r+0x1c>
 800a87a:	6823      	ldr	r3, [r4, #0]
 800a87c:	b103      	cbz	r3, 800a880 <_fstat_r+0x1c>
 800a87e:	602b      	str	r3, [r5, #0]
 800a880:	bd38      	pop	{r3, r4, r5, pc}
 800a882:	bf00      	nop
 800a884:	20000a64 	.word	0x20000a64

0800a888 <_isatty_r>:
 800a888:	b538      	push	{r3, r4, r5, lr}
 800a88a:	4c06      	ldr	r4, [pc, #24]	; (800a8a4 <_isatty_r+0x1c>)
 800a88c:	2300      	movs	r3, #0
 800a88e:	4605      	mov	r5, r0
 800a890:	4608      	mov	r0, r1
 800a892:	6023      	str	r3, [r4, #0]
 800a894:	f7f7 f9a2 	bl	8001bdc <_isatty>
 800a898:	1c43      	adds	r3, r0, #1
 800a89a:	d102      	bne.n	800a8a2 <_isatty_r+0x1a>
 800a89c:	6823      	ldr	r3, [r4, #0]
 800a89e:	b103      	cbz	r3, 800a8a2 <_isatty_r+0x1a>
 800a8a0:	602b      	str	r3, [r5, #0]
 800a8a2:	bd38      	pop	{r3, r4, r5, pc}
 800a8a4:	20000a64 	.word	0x20000a64

0800a8a8 <_lseek_r>:
 800a8a8:	b538      	push	{r3, r4, r5, lr}
 800a8aa:	4c07      	ldr	r4, [pc, #28]	; (800a8c8 <_lseek_r+0x20>)
 800a8ac:	4605      	mov	r5, r0
 800a8ae:	4608      	mov	r0, r1
 800a8b0:	4611      	mov	r1, r2
 800a8b2:	2200      	movs	r2, #0
 800a8b4:	6022      	str	r2, [r4, #0]
 800a8b6:	461a      	mov	r2, r3
 800a8b8:	f7f7 f992 	bl	8001be0 <_lseek>
 800a8bc:	1c43      	adds	r3, r0, #1
 800a8be:	d102      	bne.n	800a8c6 <_lseek_r+0x1e>
 800a8c0:	6823      	ldr	r3, [r4, #0]
 800a8c2:	b103      	cbz	r3, 800a8c6 <_lseek_r+0x1e>
 800a8c4:	602b      	str	r3, [r5, #0]
 800a8c6:	bd38      	pop	{r3, r4, r5, pc}
 800a8c8:	20000a64 	.word	0x20000a64

0800a8cc <__ascii_mbtowc>:
 800a8cc:	b082      	sub	sp, #8
 800a8ce:	b901      	cbnz	r1, 800a8d2 <__ascii_mbtowc+0x6>
 800a8d0:	a901      	add	r1, sp, #4
 800a8d2:	b142      	cbz	r2, 800a8e6 <__ascii_mbtowc+0x1a>
 800a8d4:	b14b      	cbz	r3, 800a8ea <__ascii_mbtowc+0x1e>
 800a8d6:	7813      	ldrb	r3, [r2, #0]
 800a8d8:	600b      	str	r3, [r1, #0]
 800a8da:	7812      	ldrb	r2, [r2, #0]
 800a8dc:	1c10      	adds	r0, r2, #0
 800a8de:	bf18      	it	ne
 800a8e0:	2001      	movne	r0, #1
 800a8e2:	b002      	add	sp, #8
 800a8e4:	4770      	bx	lr
 800a8e6:	4610      	mov	r0, r2
 800a8e8:	e7fb      	b.n	800a8e2 <__ascii_mbtowc+0x16>
 800a8ea:	f06f 0001 	mvn.w	r0, #1
 800a8ee:	e7f8      	b.n	800a8e2 <__ascii_mbtowc+0x16>

0800a8f0 <__malloc_lock>:
 800a8f0:	4770      	bx	lr

0800a8f2 <__malloc_unlock>:
 800a8f2:	4770      	bx	lr

0800a8f4 <_read_r>:
 800a8f4:	b538      	push	{r3, r4, r5, lr}
 800a8f6:	4c07      	ldr	r4, [pc, #28]	; (800a914 <_read_r+0x20>)
 800a8f8:	4605      	mov	r5, r0
 800a8fa:	4608      	mov	r0, r1
 800a8fc:	4611      	mov	r1, r2
 800a8fe:	2200      	movs	r2, #0
 800a900:	6022      	str	r2, [r4, #0]
 800a902:	461a      	mov	r2, r3
 800a904:	f7f7 f944 	bl	8001b90 <_read>
 800a908:	1c43      	adds	r3, r0, #1
 800a90a:	d102      	bne.n	800a912 <_read_r+0x1e>
 800a90c:	6823      	ldr	r3, [r4, #0]
 800a90e:	b103      	cbz	r3, 800a912 <_read_r+0x1e>
 800a910:	602b      	str	r3, [r5, #0]
 800a912:	bd38      	pop	{r3, r4, r5, pc}
 800a914:	20000a64 	.word	0x20000a64

0800a918 <__ascii_wctomb>:
 800a918:	b149      	cbz	r1, 800a92e <__ascii_wctomb+0x16>
 800a91a:	2aff      	cmp	r2, #255	; 0xff
 800a91c:	bf85      	ittet	hi
 800a91e:	238a      	movhi	r3, #138	; 0x8a
 800a920:	6003      	strhi	r3, [r0, #0]
 800a922:	700a      	strbls	r2, [r1, #0]
 800a924:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800a928:	bf98      	it	ls
 800a92a:	2001      	movls	r0, #1
 800a92c:	4770      	bx	lr
 800a92e:	4608      	mov	r0, r1
 800a930:	4770      	bx	lr
	...

0800a934 <_init>:
 800a934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a936:	bf00      	nop
 800a938:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a93a:	bc08      	pop	{r3}
 800a93c:	469e      	mov	lr, r3
 800a93e:	4770      	bx	lr

0800a940 <_fini>:
 800a940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a942:	bf00      	nop
 800a944:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a946:	bc08      	pop	{r3}
 800a948:	469e      	mov	lr, r3
 800a94a:	4770      	bx	lr
